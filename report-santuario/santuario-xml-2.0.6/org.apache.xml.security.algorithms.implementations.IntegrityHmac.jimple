public abstract class org.apache.xml.security.algorithms.implementations.IntegrityHmac extends org.apache.xml.security.algorithms.SignatureAlgorithmSpi
{
    private static org.slf4j.Logger log;
    private javax.crypto.Mac macAlgorithm;
    private int HMACOutputLength;
    private boolean HMACOutputLengthSet;

    public abstract java.lang.String engineGetURI();

    abstract int getDigestLength();

    public void <init>() throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        java.lang.String $r1, r2, $r9, $r13, varReplacer1512, varReplacer1513;
        org.slf4j.Logger $r3, $r6;
        boolean $z0;
        javax.crypto.Mac $r4;
        java.lang.StringBuilder $r7, $r8, $r16;
        java.lang.Throwable $r10, r11;
        java.lang.Object[] $r12, r14;
        org.apache.xml.security.signature.XMLSignatureException $r17;
        java.security.NoSuchAlgorithmException $r18;
        int varReplacer1509, varReplacer1510;
        null_type varReplacer1511;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        specialinvoke r0.<org.apache.xml.security.algorithms.SignatureAlgorithmSpi: void <init>()>();

        varReplacer1511 = null;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = varReplacer1511;

        varReplacer1510 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = varReplacer1510;

        varReplacer1509 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1509;

        $r1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: java.lang.String engineGetURI()>();

        r2 = staticinvoke <org.apache.xml.security.algorithms.JCEMapper: java.lang.String translateURItoJCEID(java.lang.String)>($r1);

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer1512 = "Created IntegrityHmacSHA1 using ";

        $r7 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1512);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r9);

     label1:
        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r2);

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = $r4;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r11 = $r10;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r2;

        $r18 = (java.security.NoSuchAlgorithmException) r11;

        $r13 = virtualinvoke $r18.<java.security.NoSuchAlgorithmException: java.lang.String getLocalizedMessage()>();

        $r12[1] = $r13;

        r14 = $r12;

        $r17 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1513 = "algorithms.NoSuchAlgorithm";

        specialinvoke $r17.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1513, r14);

        throw $r17;

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.signature.XMLSignatureException $r0;
        java.lang.Object[] $r1;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r2;
        java.security.spec.AlgorithmParameterSpec r3;
        java.lang.String varReplacer1514;

        nop;

        r2 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r3 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r0 = new org.apache.xml.security.signature.XMLSignatureException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Incorrect method call";

        varReplacer1514 = "empty";

        specialinvoke $r0.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1514, $r1);

        throw $r0;
    }

    public void reset()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        int varReplacer1515, varReplacer1516;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        varReplacer1515 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = varReplacer1515;

        varReplacer1516 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1516;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r1.<javax.crypto.Mac: void reset()>();

        return;
    }

    protected boolean engineVerify(byte[]) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        boolean $z0, $z1, $z2;
        javax.crypto.Mac $r1;
        byte[] r2, r15;
        int $i0, $i1, $i2, $i3;
        org.slf4j.Logger $r3, $r8;
        java.lang.Object[] $r4, r14;
        java.lang.String $r5, $r11, varReplacer1517, varReplacer1518;
        java.lang.StringBuilder $r9, $r10, $r17;
        java.lang.Throwable $r12, r16;
        org.apache.xml.security.signature.XMLSignatureException $r18, $r19;
        java.lang.Exception $r20;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r2 := @parameter0: byte[];

     label1:
        $z0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label3;

        $i0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $i1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        if $i0 >= $i1 goto label3;

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r8 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer1517 = "HMACOutputLength must not be less than ";

        $r9 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1517);

        $i3 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $i2 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r4[0] = $r5;

        r14 = $r4;

        $r18 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1518 = "algorithms.HMACOutputLengthMin";

        specialinvoke $r18.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1518, r14);

        throw $r18;

     label3:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        r15 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>();

        $z1 = staticinvoke <org.apache.xml.security.algorithms.MessageDigestAlgorithm: boolean isEqual(byte[],byte[])>(r15, r2);

     label4:
        return $z1;

     label5:
        $r12 := @caughtexception;

        r16 = $r12;

        $r19 = new org.apache.xml.security.signature.XMLSignatureException;

        $r20 = (java.lang.Exception) r16;

        specialinvoke $r19.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r20);

        throw $r19;

        catch java.lang.IllegalStateException from label1 to label4 with label5;
    }

    protected void engineInitVerify(java.security.Key) throws org.apache.xml.security.signature.XMLSignatureException
    {
        java.security.Key r0;
        boolean $z0, $z1;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        javax.crypto.Mac $r2, $r15, $r17, r22;
        java.lang.Class $r3, $r6;
        java.lang.Object[] $r4, r20;
        java.lang.Exception $r7, r23, $r28;
        org.slf4j.Logger $r8, $r10;
        java.lang.StringBuilder $r11, $r12, $r26;
        java.lang.String $r13, $r16, r18, r19, varReplacer1519, varReplacer1520;
        java.lang.Throwable $r14, r21;
        org.apache.xml.security.signature.XMLSignatureException $r25, $r27;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: java.security.Key;

        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label02;

        r18 = null;

        if r0 == null goto label01;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r18 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label01:
        $r3 = class "Ljavax/crypto/SecretKey;";

        r19 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r18;

        $r4[1] = r19;

        r20 = $r4;

        $r25 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1519 = "algorithms.WrongKeyForThisOperation";

        specialinvoke $r25.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1519, r20);

        throw $r25;

     label02:
        $r2 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>(r0);

     label03:
        goto label10;

     label04:
        $r14 := @caughtexception;

        r21 = $r14;

        r22 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

     label05:
        $r15 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r16 = virtualinvoke $r15.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        $r17 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r16);

        r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = $r17;

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

        r23 = $r7;

        $r8 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r10 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        varReplacer1520 = "Exception when reinstantiating Mac:";

        $r11 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1520);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r13);

     label08:
        r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = r22;

     label09:
        $r27 = new org.apache.xml.security.signature.XMLSignatureException;

        $r28 = (java.lang.Exception) r21;

        specialinvoke $r27.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r28);

        throw $r27;

     label10:
        return;

        catch java.security.InvalidKeyException from label02 to label03 with label04;
        catch java.lang.Exception from label05 to label06 with label07;
    }

    protected byte[] engineSign() throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        boolean $z0, $z1;
        javax.crypto.Mac $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3;
        org.slf4j.Logger $r3, $r8;
        java.lang.Object[] $r4, r14;
        java.lang.String $r5, $r11, varReplacer1521, varReplacer1522;
        java.lang.StringBuilder $r9, $r10, $r16;
        java.lang.Throwable $r12, r15;
        org.apache.xml.security.signature.XMLSignatureException $r17, $r18;
        java.lang.Exception $r19;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

     label1:
        $z0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label3;

        $i0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $i1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        if $i0 >= $i1 goto label3;

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r8 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer1521 = "HMACOutputLength must not be less than ";

        $r9 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1521);

        $i3 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>($r11);

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $i2 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r4[0] = $r5;

        r14 = $r4;

        $r17 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1522 = "algorithms.HMACOutputLengthMin";

        specialinvoke $r17.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1522, r14);

        throw $r17;

     label3:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>();

     label4:
        return $r2;

     label5:
        $r12 := @caughtexception;

        r15 = $r12;

        $r18 = new org.apache.xml.security.signature.XMLSignatureException;

        $r19 = (java.lang.Exception) r15;

        specialinvoke $r18.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r19);

        throw $r18;

        catch java.lang.IllegalStateException from label1 to label4 with label5;
    }

    protected void engineInitSign(java.security.Key) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec $r2;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: java.security.Key;

        $r2 = (java.security.spec.AlgorithmParameterSpec) null;

        virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: void engineInitSign(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, $r2);

        return;
    }

    protected void engineInitSign(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws org.apache.xml.security.signature.XMLSignatureException
    {
        java.security.Key r0;
        boolean $z0;
        java.security.spec.AlgorithmParameterSpec r1;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r2;
        javax.crypto.Mac $r3, $r4;
        java.lang.Class $r5, $r10;
        java.lang.String r6, r15, varReplacer1523;
        java.lang.Object[] $r7, r8;
        java.lang.Throwable $r11, $r13, r16, r17;
        org.apache.xml.security.signature.XMLSignatureException $r18, $r19, $r20;
        java.lang.Exception $r21, $r22;

        nop;

        r2 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label2;

        r15 = null;

        if r0 == null goto label1;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r15 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

     label1:
        $r5 = class "Ljavax/crypto/SecretKey;";

        r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r15;

        $r7[1] = r6;

        r8 = $r7;

        $r18 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1523 = "algorithms.WrongKeyForThisOperation";

        specialinvoke $r18.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1523, r8);

        throw $r18;

     label2:
        if r1 != null goto label3;

        $r4 = r2.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>(r0);

        goto label4;

     label3:
        $r3 = r2.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r3.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r0, r1);

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r16 = $r13;

        $r19 = new org.apache.xml.security.signature.XMLSignatureException;

        $r21 = (java.lang.Exception) r16;

        specialinvoke $r19.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r21);

        throw $r19;

     label6:
        $r11 := @caughtexception;

        r17 = $r11;

        $r20 = new org.apache.xml.security.signature.XMLSignatureException;

        $r22 = (java.lang.Exception) r17;

        specialinvoke $r20.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r22);

        throw $r20;

     label7:
        return;

        catch java.security.InvalidKeyException from label2 to label4 with label5;
        catch java.security.InvalidAlgorithmParameterException from label2 to label4 with label6;
    }

    protected void engineInitSign(java.security.Key, java.security.SecureRandom) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.signature.XMLSignatureException $r0;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        java.security.Key r2;
        java.security.SecureRandom r3;
        java.lang.String varReplacer1524;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r2 := @parameter0: java.security.Key;

        r3 := @parameter1: java.security.SecureRandom;

        $r0 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1524 = "algorithms.CannotUseSecureRandomOnMAC";

        specialinvoke $r0.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String)>(varReplacer1524);

        throw $r0;
    }

    protected void engineUpdate(byte[]) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte[] r1;
        javax.crypto.Mac $r2;
        java.lang.Throwable $r3, r4;
        org.apache.xml.security.signature.XMLSignatureException $r6;
        java.lang.Exception $r7;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: byte[];

     label1:
        $r2 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r6 = new org.apache.xml.security.signature.XMLSignatureException;

        $r7 = (java.lang.Exception) r4;

        specialinvoke $r6.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r7);

        throw $r6;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void engineUpdate(byte) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte b0;
        javax.crypto.Mac $r1;
        java.lang.Throwable $r2, r3;
        org.apache.xml.security.signature.XMLSignatureException $r5;
        java.lang.Exception $r6;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        b0 := @parameter0: byte;

     label1:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r1.<javax.crypto.Mac: void update(byte)>(b0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        $r5 = new org.apache.xml.security.signature.XMLSignatureException;

        $r6 = (java.lang.Exception) r3;

        specialinvoke $r5.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r6);

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void engineUpdate(byte[], int, int) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte[] r1;
        int i0, i1;
        javax.crypto.Mac $r2;
        java.lang.Throwable $r3, r4;
        org.apache.xml.security.signature.XMLSignatureException $r6;
        java.lang.Exception $r7;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[],int,int)>(r1, i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r6 = new org.apache.xml.security.signature.XMLSignatureException;

        $r7 = (java.lang.Exception) r4;

        specialinvoke $r6.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r7);

        throw $r6;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected java.lang.String engineGetJCEAlgorithmString()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        return $r2;
    }

    protected java.lang.String engineGetJCEProviderName()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        java.security.Provider $r2;
        java.lang.String $r3;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: java.security.Provider getProvider()>();

        $r3 = virtualinvoke $r2.<java.security.Provider: java.lang.String getName()>();

        return $r3;
    }

    protected void engineSetHMACOutputLength(int)
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        int i0, varReplacer1525;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        i0 := @parameter0: int;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = i0;

        varReplacer1525 = 1;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1525;

        return;
    }

    protected void engineGetContextFromElement(org.w3c.dom.Element)
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        org.w3c.dom.Element r1;
        org.w3c.dom.Node $r2;
        org.w3c.dom.Text r3;
        java.lang.String $r4, varReplacer1526, varReplacer1529;
        int $i0, varReplacer1527, varReplacer1528;
        java.lang.IllegalArgumentException $r5;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.apache.xml.security.algorithms.SignatureAlgorithmSpi: void engineGetContextFromElement(org.w3c.dom.Element)>(r1);

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        varReplacer1529 = "element null";

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1529);

        throw $r5;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        varReplacer1526 = "HMACOutputLength";

        varReplacer1527 = 0;

        r3 = staticinvoke <org.apache.xml.security.utils.XMLUtils: org.w3c.dom.Text selectDsNodeText(org.w3c.dom.Node,java.lang.String,int)>($r2, varReplacer1526, varReplacer1527);

        if r3 == null goto label2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.Text: java.lang.String getData()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = $i0;

        varReplacer1528 = 1;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1528;

     label2:
        return;
    }

    public void engineAddContextToElement(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0, r3;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        boolean $z0;
        org.w3c.dom.Document r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        int $i0;
        java.lang.String $r7, varReplacer1530, varReplacer1531, varReplacer1532;
        org.w3c.dom.Text r8;
        java.lang.IllegalArgumentException $r11;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: org.w3c.dom.Element;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        varReplacer1532 = "null element";

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1532);

        throw $r11;

     label1:
        $z0 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        varReplacer1531 = "HMACOutputLength";

        r3 = staticinvoke <org.apache.xml.security.utils.XMLUtils: org.w3c.dom.Element createElementInSignatureSpace(org.w3c.dom.Document,java.lang.String)>(r2, varReplacer1531);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer1530 = "";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1530);

        $i0 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r7);

        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r8);

        staticinvoke <org.apache.xml.security.utils.XMLUtils: void addReturnToElement(org.w3c.dom.Element)>(r0);

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r3);

        staticinvoke <org.apache.xml.security.utils.XMLUtils: void addReturnToElement(org.w3c.dom.Element)>(r0);

     label2:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        nop;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/xml/security/algorithms/implementations/IntegrityHmac;");

        <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger log> = $r0;

        return;
    }
}
