public abstract class org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod extends org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod
{
    private static final org.slf4j.Logger LOG;
    static final java.lang.String HMAC_SHA224;
    static final java.lang.String HMAC_SHA256;
    static final java.lang.String HMAC_SHA384;
    static final java.lang.String HMAC_SHA512;
    static final java.lang.String HMAC_RIPEMD160;
    private javax.crypto.Mac hmac;
    private int outputLength;
    private boolean outputLengthSet;
    private javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec params;

    void <init>(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.spec.AlgorithmParameterSpec r1;
        javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec $r2, $r3;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        specialinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod: void <init>()>();

        $r2 = (javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec) r1;

        virtualinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: void checkParams(javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)>($r2);

        $r3 = (javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec) r1;

        r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec params> = $r3;

        return;
    }

    void <init>(org.w3c.dom.Element) throws javax.xml.crypto.MarshalException
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.w3c.dom.Element r1, r2;
        javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec $r3, $r4;
        java.lang.Throwable $r5, r6;
        javax.xml.crypto.MarshalException $r7;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod: void <init>()>();

        r2 = staticinvoke <org.apache.jcp.xml.dsig.internal.dom.DOMUtils: org.w3c.dom.Element getFirstChildElement(org.w3c.dom.Node)>(r1);

        if r2 == null goto label1;

        $r4 = virtualinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec unmarshalParams(org.w3c.dom.Element)>(r2);

        r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec params> = $r4;

     label1:
        $r3 = r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec params>;

        virtualinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: void checkParams(javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        $r7 = new javax.xml.crypto.MarshalException;

        specialinvoke $r7.<javax.xml.crypto.MarshalException: void <init>(java.lang.Throwable)>(r6);

        throw $r7;

     label4:
        return;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    void checkParams(javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec r0;
        boolean $z0;
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r1;
        javax.xml.crypto.dsig.spec.HMACParameterSpec $r2;
        int $i0, $i1, varReplacer178;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;
        java.security.InvalidAlgorithmParameterException $r5;
        java.lang.String varReplacer179, varReplacer180;

        nop;

        r1 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r0 := @parameter0: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;

        if r0 == null goto label2;

        $z0 = r0 instanceof javax.xml.crypto.dsig.spec.HMACParameterSpec;

        if $z0 != 0 goto label1;

        $r5 = new java.security.InvalidAlgorithmParameterException;

        varReplacer179 = "params must be of type HMACParameterSpec";

        specialinvoke $r5.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>(varReplacer179);

        throw $r5;

     label1:
        $r2 = (javax.xml.crypto.dsig.spec.HMACParameterSpec) r0;

        $i0 = virtualinvoke $r2.<javax.xml.crypto.dsig.spec.HMACParameterSpec: int getOutputLength()>();

        r1.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength> = $i0;

        varReplacer178 = 1;

        r1.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet> = varReplacer178;

        $r3 = <org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: org.slf4j.Logger LOG>;

        $i1 = r1.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        varReplacer180 = "Setting outputLength from HMACParameterSpec to: {}";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer180, $r4);

     label2:
        return;
    }

    public final java.security.spec.AlgorithmParameterSpec getParameterSpec()
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec $r1;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        $r1 = r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec params>;

        return $r1;
    }

    javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec unmarshalParams(org.w3c.dom.Element) throws javax.xml.crypto.MarshalException
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.w3c.dom.Element r1;
        java.lang.String $r2, varReplacer182;
        int $i0, $i1, $i2, varReplacer181;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;
        javax.xml.crypto.dsig.spec.HMACParameterSpec $r5;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = staticinvoke <org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.lang.String textOfNode(org.w3c.dom.Node)>(r1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength> = $i0;

        varReplacer181 = 1;

        r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet> = varReplacer181;

        $r3 = <org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: org.slf4j.Logger LOG>;

        $i1 = r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        varReplacer182 = "unmarshalled outputLength: {}";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer182, $r4);

        $r5 = new javax.xml.crypto.dsig.spec.HMACParameterSpec;

        $i2 = r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        specialinvoke $r5.<javax.xml.crypto.dsig.spec.HMACParameterSpec: void <init>(int)>($i2);

        return $r5;
    }

    void marshalParams(org.apache.jcp.xml.dsig.internal.dom.XmlWriter, java.lang.String) throws javax.xml.crypto.MarshalException
    {
        org.apache.jcp.xml.dsig.internal.dom.XmlWriter r0;
        java.lang.String r1, $r3, varReplacer183, varReplacer184;
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r2;
        int $i0;

        nop;

        r2 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r0 := @parameter0: org.apache.jcp.xml.dsig.internal.dom.XmlWriter;

        r1 := @parameter1: java.lang.String;

        $i0 = r2.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        varReplacer183 = "HMACOutputLength";

        varReplacer184 = "http://www.w3.org/2000/09/xmldsig#";

        interfaceinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.XmlWriter: void writeTextElement(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, varReplacer183, varReplacer184, $r3);

        return;
    }

    boolean verify(java.security.Key, org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo, byte[], javax.xml.crypto.dsig.XMLValidateContext) throws java.security.InvalidKeyException, java.security.SignatureException, javax.xml.crypto.dsig.XMLSignatureException
    {
        java.security.Key r0;
        org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo r1;
        byte[] r2, r22;
        boolean $z0, $z1, $z2;
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r3;
        javax.crypto.Mac $r4, $r5, $r8, $r9, $r16;
        javax.xml.crypto.dsig.XMLValidateContext r6;
        org.apache.jcp.xml.dsig.internal.MacOutputStream $r7;
        int $i0, $i1, $i2;
        javax.xml.crypto.dsig.XMLSignatureException $r10, $r19;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14, $r15, varReplacer185, varReplacer186;
        java.security.InvalidKeyException $r17;
        java.lang.Throwable $r18, r21;
        java.lang.NullPointerException $r20;

        nop;

        r3 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo;

        r2 := @parameter2: byte[];

        r6 := @parameter3: javax.xml.crypto.dsig.XMLValidateContext;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>()>();

        throw $r20;

     label2:
        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label3;

        $r17 = new java.security.InvalidKeyException;

        varReplacer185 = "key must be SecretKey";

        specialinvoke $r17.<java.security.InvalidKeyException: void <init>(java.lang.String)>(varReplacer185);

        throw $r17;

     label3:
        $r4 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        if $r4 != null goto label7;

     label4:
        $r15 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.lang.String getJCAAlgorithm()>();

        $r16 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r15);

        r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac> = $r16;

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;

        r21 = $r18;

        $r19 = new javax.xml.crypto.dsig.XMLSignatureException;

        specialinvoke $r19.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.Throwable)>(r21);

        throw $r19;

     label7:
        $z1 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet>;

        if $z1 == 0 goto label8;

        $i0 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        if $i0 >= $i1 goto label8;

        $r10 = new javax.xml.crypto.dsig.XMLSignatureException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        varReplacer186 = "HMACOutputLength must not be less than ";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer186);

        $i2 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label8:
        $r5 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>(r0);

        $r7 = new org.apache.jcp.xml.dsig.internal.MacOutputStream;

        $r8 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        specialinvoke $r7.<org.apache.jcp.xml.dsig.internal.MacOutputStream: void <init>(javax.crypto.Mac)>($r8);

        virtualinvoke r1.<org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo: void canonicalize(javax.xml.crypto.XMLCryptoContext,java.io.ByteArrayOutputStream)>(r6, $r7);

        $r9 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        r22 = virtualinvoke $r9.<javax.crypto.Mac: byte[] doFinal()>();

        $z2 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r2, r22);

        return $z2;

        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
    }

    byte[] sign(java.security.Key, org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo, javax.xml.crypto.dsig.XMLSignContext) throws java.security.InvalidKeyException, javax.xml.crypto.dsig.XMLSignatureException
    {
        java.security.Key r0;
        java.lang.NullPointerException $r1;
        org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo r2;
        boolean $z0, $z1;
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r3;
        javax.crypto.Mac $r4, $r5, $r8, $r9, $r17;
        javax.xml.crypto.dsig.XMLSignContext r6;
        org.apache.jcp.xml.dsig.internal.MacOutputStream $r7;
        byte[] $r10;
        int $i0, $i1, $i2;
        javax.xml.crypto.dsig.XMLSignatureException $r11, $r21;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15, $r16, varReplacer187, varReplacer188;
        java.security.InvalidKeyException $r18;
        java.lang.Throwable $r19, r20;

        nop;

        r3 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r0 := @parameter0: java.security.Key;

        r2 := @parameter1: org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo;

        r6 := @parameter2: javax.xml.crypto.dsig.XMLSignContext;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label2:
        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label3;

        $r18 = new java.security.InvalidKeyException;

        varReplacer187 = "key must be SecretKey";

        specialinvoke $r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>(varReplacer187);

        throw $r18;

     label3:
        $r4 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        if $r4 != null goto label7;

     label4:
        $r16 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.lang.String getJCAAlgorithm()>();

        $r17 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r16);

        r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac> = $r17;

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        r20 = $r19;

        $r21 = new javax.xml.crypto.dsig.XMLSignatureException;

        specialinvoke $r21.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.Throwable)>(r20);

        throw $r21;

     label7:
        $z1 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: boolean outputLengthSet>;

        if $z1 == 0 goto label8;

        $i0 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        if $i0 >= $i1 goto label8;

        $r11 = new javax.xml.crypto.dsig.XMLSignatureException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        varReplacer188 = "HMACOutputLength must not be less than ";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer188);

        $i2 = virtualinvoke r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int getDigestLength()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<javax.xml.crypto.dsig.XMLSignatureException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label8:
        $r5 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        virtualinvoke $r5.<javax.crypto.Mac: void init(java.security.Key)>(r0);

        $r7 = new org.apache.jcp.xml.dsig.internal.MacOutputStream;

        $r8 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        specialinvoke $r7.<org.apache.jcp.xml.dsig.internal.MacOutputStream: void <init>(javax.crypto.Mac)>($r8);

        virtualinvoke r2.<org.apache.jcp.xml.dsig.internal.dom.DOMSignedInfo: void canonicalize(javax.xml.crypto.XMLCryptoContext,java.io.ByteArrayOutputStream)>(r6, $r7);

        $r9 = r3.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: javax.crypto.Mac hmac>;

        $r10 = virtualinvoke $r9.<javax.crypto.Mac: byte[] doFinal()>();

        return $r10;

        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
    }

    boolean paramsEqual(java.security.spec.AlgorithmParameterSpec)
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.security.spec.AlgorithmParameterSpec $r1, r2;
        boolean $z0, $z1;
        javax.xml.crypto.dsig.spec.HMACParameterSpec r3;
        int $i0, $i1, varReplacer189, varReplacer190;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r2 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r1 = virtualinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: java.security.spec.AlgorithmParameterSpec getParameterSpec()>();

        if $r1 != r2 goto label1;

        varReplacer189 = 1;

        return varReplacer189;

     label1:
        $z0 = r2 instanceof javax.xml.crypto.dsig.spec.HMACParameterSpec;

        if $z0 != 0 goto label2;

        varReplacer190 = 0;

        return varReplacer190;

     label2:
        r3 = (javax.xml.crypto.dsig.spec.HMACParameterSpec) r2;

        $i0 = r0.<org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: int outputLength>;

        $i1 = virtualinvoke r3.<javax.xml.crypto.dsig.spec.HMACParameterSpec: int getOutputLength()>();

        if $i0 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod$Type getAlgorithmType()
    {
        org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod$Type $r0;
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r1;

        nop;

        r1 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        $r0 = <org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod$Type: org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod$Type HMAC>;

        return $r0;
    }

    abstract int getDigestLength();

    public volatile int hashCode()
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        int $i0;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        $i0 = specialinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod: int hashCode()>();

        return $i0;
    }

    public volatile boolean equals(java.lang.Object)
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        java.lang.Object r1;
        boolean $z0;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile void marshal(org.apache.jcp.xml.dsig.internal.dom.XmlWriter, java.lang.String) throws javax.xml.crypto.MarshalException
    {
        org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod r0;
        org.apache.jcp.xml.dsig.internal.dom.XmlWriter r1;
        java.lang.String r2;

        nop;

        r0 := @this: org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;

        r1 := @parameter0: org.apache.jcp.xml.dsig.internal.dom.XmlWriter;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod: void marshal(org.apache.jcp.xml.dsig.internal.dom.XmlWriter,java.lang.String)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        nop;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/jcp/xml/dsig/internal/dom/DOMHMACSignatureMethod;");

        <org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
