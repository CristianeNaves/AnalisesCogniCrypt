public abstract class org.apache.xml.security.algorithms.implementations.IntegrityHmac extends org.apache.xml.security.algorithms.SignatureAlgorithmSpi
{
    private static final org.slf4j.Logger LOG;
    private javax.crypto.Mac macAlgorithm;
    private int HMACOutputLength;
    private boolean HMACOutputLengthSet;

    public abstract java.lang.String engineGetURI();

    abstract int getDigestLength();

    public void <init>() throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        java.lang.String $r1, r2, $r8, varReplacer1912, varReplacer1913;
        org.slf4j.Logger $r3;
        javax.crypto.Mac $r4;
        java.lang.Throwable $r5, r6;
        java.lang.Object[] $r7, r9;
        org.apache.xml.security.signature.XMLSignatureException $r11;
        java.security.NoSuchAlgorithmException $r12;
        int varReplacer1914;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        specialinvoke r0.<org.apache.xml.security.algorithms.SignatureAlgorithmSpi: void <init>()>();

        varReplacer1914 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1914;

        $r1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: java.lang.String engineGetURI()>();

        r2 = staticinvoke <org.apache.xml.security.algorithms.JCEMapper: java.lang.String translateURItoJCEID(java.lang.String)>($r1);

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger LOG>;

        varReplacer1913 = "Created IntegrityHmacSHA1 using {}";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1913, r2);

     label1:
        $r4 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r2);

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r2;

        $r12 = (java.security.NoSuchAlgorithmException) r6;

        $r8 = virtualinvoke $r12.<java.security.NoSuchAlgorithmException: java.lang.String getLocalizedMessage()>();

        $r7[1] = $r8;

        r9 = $r7;

        $r11 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1912 = "algorithms.NoSuchAlgorithm";

        specialinvoke $r11.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1912, r9);

        throw $r11;

     label4:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.signature.XMLSignatureException $r0;
        java.lang.Object[] $r1;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r2;
        java.security.spec.AlgorithmParameterSpec r3;
        java.lang.String varReplacer1915;

        nop;

        r2 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r3 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r0 = new org.apache.xml.security.signature.XMLSignatureException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Incorrect method call";

        varReplacer1915 = "empty";

        specialinvoke $r0.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1915, $r1);

        throw $r0;
    }

    public void reset()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        int varReplacer1916, varReplacer1917;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        varReplacer1917 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = varReplacer1917;

        varReplacer1916 = 0;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1916;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r1.<javax.crypto.Mac: void reset()>();

        return;
    }

    protected boolean engineVerify(byte[]) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        boolean $z0, $z1;
        javax.crypto.Mac $r1;
        byte[] r2, r11;
        int $i0, $i1, $i2, $i3;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;
        java.lang.Object[] $r5, r10;
        java.lang.String $r6, varReplacer1918, varReplacer1919;
        java.lang.Throwable $r8, r12;
        org.apache.xml.security.signature.XMLSignatureException $r13, $r14;
        java.lang.Exception $r15;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r2 := @parameter0: byte[];

     label1:
        $z0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $i1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        if $i0 >= $i1 goto label2;

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger LOG>;

        $i2 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        varReplacer1919 = "HMACOutputLength must not be less than {}";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1919, $r4);

        $r5 = newarray (java.lang.Object)[1];

        $i3 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        $r5[0] = $r6;

        r10 = $r5;

        $r13 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1918 = "algorithms.HMACOutputLengthMin";

        specialinvoke $r13.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1918, r10);

        throw $r13;

     label2:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        r11 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>();

        $z1 = staticinvoke <org.apache.xml.security.algorithms.MessageDigestAlgorithm: boolean isEqual(byte[],byte[])>(r11, r2);

     label3:
        return $z1;

     label4:
        $r8 := @caughtexception;

        r12 = $r8;

        $r14 = new org.apache.xml.security.signature.XMLSignatureException;

        $r15 = (java.lang.Exception) r12;

        specialinvoke $r14.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r15);

        throw $r14;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    protected void engineInitVerify(java.security.Key) throws org.apache.xml.security.signature.XMLSignatureException
    {
        java.security.Key r0;
        boolean $z0;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        javax.crypto.Mac $r2, $r11, $r13, r18;
        java.lang.Class $r3, $r6;
        java.lang.Object[] $r4, r16;
        java.lang.Exception $r7, r19, $r22;
        org.slf4j.Logger $r8;
        java.lang.Throwable $r10, r17;
        java.lang.String $r12, r14, r15, varReplacer1920, varReplacer1921;
        org.apache.xml.security.signature.XMLSignatureException $r20, $r21;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: java.security.Key;

        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label2;

        r14 = null;

        if r0 == null goto label1;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r14 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label1:
        $r3 = class "Ljavax/crypto/SecretKey;";

        r15 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r14;

        $r4[1] = r15;

        r16 = $r4;

        $r20 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1921 = "algorithms.WrongKeyForThisOperation";

        specialinvoke $r20.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1921, r16);

        throw $r20;

     label2:
        $r2 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void init(java.security.Key)>(r0);

     label3:
        goto label9;

     label4:
        $r10 := @caughtexception;

        r17 = $r10;

        r18 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

     label5:
        $r11 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r12 = virtualinvoke $r11.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        $r13 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r12);

        r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = $r13;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        r19 = $r7;

        $r8 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger LOG>;

        varReplacer1920 = "Exception when reinstantiating Mac: {}";

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>(varReplacer1920, r19);

        r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm> = r18;

     label8:
        $r21 = new org.apache.xml.security.signature.XMLSignatureException;

        $r22 = (java.lang.Exception) r17;

        specialinvoke $r21.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r22);

        throw $r21;

     label9:
        return;

        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected byte[] engineSign() throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        boolean $z0;
        javax.crypto.Mac $r1;
        byte[] $r2;
        int $i0, $i1, $i2, $i3;
        org.slf4j.Logger $r3;
        java.lang.Integer $r4;
        java.lang.Object[] $r5, r10;
        java.lang.String $r6, varReplacer1922, varReplacer1923;
        java.lang.Throwable $r8, r11;
        org.apache.xml.security.signature.XMLSignatureException $r12, $r13;
        java.lang.Exception $r14;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

     label1:
        $z0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $i1 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        if $i0 >= $i1 goto label2;

        $r3 = <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger LOG>;

        $i2 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        varReplacer1923 = "HMACOutputLength must not be less than {}";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1923, $r4);

        $r5 = newarray (java.lang.Object)[1];

        $i3 = virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int getDigestLength()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        $r5[0] = $r6;

        r10 = $r5;

        $r12 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1922 = "algorithms.HMACOutputLengthMin";

        specialinvoke $r12.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1922, r10);

        throw $r12;

     label2:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: byte[] doFinal()>();

     label3:
        return $r2;

     label4:
        $r8 := @caughtexception;

        r11 = $r8;

        $r13 = new org.apache.xml.security.signature.XMLSignatureException;

        $r14 = (java.lang.Exception) r11;

        specialinvoke $r13.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r14);

        throw $r13;

        catch java.lang.IllegalStateException from label1 to label3 with label4;
    }

    protected void engineInitSign(java.security.Key) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec $r2;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: java.security.Key;

        $r2 = (java.security.spec.AlgorithmParameterSpec) null;

        virtualinvoke r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: void engineInitSign(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, $r2);

        return;
    }

    protected void engineInitSign(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws org.apache.xml.security.signature.XMLSignatureException
    {
        java.security.Key r0;
        boolean $z0;
        java.security.spec.AlgorithmParameterSpec r1;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r2;
        javax.crypto.Mac $r3, $r4;
        java.lang.Class $r5, $r10;
        java.lang.String r6, r15, varReplacer1924;
        java.lang.Object[] $r7, r8;
        java.lang.Throwable $r11, $r13, r16, r17;
        org.apache.xml.security.signature.XMLSignatureException $r18, $r19, $r20;
        java.lang.Exception $r21, $r22;

        nop;

        r2 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $z0 = r0 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label2;

        r15 = null;

        if r0 == null goto label1;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r15 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

     label1:
        $r5 = class "Ljavax/crypto/SecretKey;";

        r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r15;

        $r7[1] = r6;

        r8 = $r7;

        $r18 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1924 = "algorithms.WrongKeyForThisOperation";

        specialinvoke $r18.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String,java.lang.Object[])>(varReplacer1924, r8);

        throw $r18;

     label2:
        if r1 != null goto label3;

        $r4 = r2.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>(r0);

        goto label4;

     label3:
        $r3 = r2.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r3.<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r0, r1);

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r16 = $r13;

        $r19 = new org.apache.xml.security.signature.XMLSignatureException;

        $r21 = (java.lang.Exception) r16;

        specialinvoke $r19.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r21);

        throw $r19;

     label6:
        $r11 := @caughtexception;

        r17 = $r11;

        $r20 = new org.apache.xml.security.signature.XMLSignatureException;

        $r22 = (java.lang.Exception) r17;

        specialinvoke $r20.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r22);

        throw $r20;

     label7:
        return;

        catch java.security.InvalidKeyException from label2 to label4 with label5;
        catch java.security.InvalidAlgorithmParameterException from label2 to label4 with label6;
    }

    protected void engineInitSign(java.security.Key, java.security.SecureRandom) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.signature.XMLSignatureException $r0;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        java.security.Key r2;
        java.security.SecureRandom r3;
        java.lang.String varReplacer1925;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r2 := @parameter0: java.security.Key;

        r3 := @parameter1: java.security.SecureRandom;

        $r0 = new org.apache.xml.security.signature.XMLSignatureException;

        varReplacer1925 = "algorithms.CannotUseSecureRandomOnMAC";

        specialinvoke $r0.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.String)>(varReplacer1925);

        throw $r0;
    }

    protected void engineUpdate(byte[]) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte[] r1;
        javax.crypto.Mac $r2;
        java.lang.Throwable $r3, r4;
        org.apache.xml.security.signature.XMLSignatureException $r6;
        java.lang.Exception $r7;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: byte[];

     label1:
        $r2 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[])>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r6 = new org.apache.xml.security.signature.XMLSignatureException;

        $r7 = (java.lang.Exception) r4;

        specialinvoke $r6.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r7);

        throw $r6;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void engineUpdate(byte) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte b0;
        javax.crypto.Mac $r1;
        java.lang.Throwable $r2, r3;
        org.apache.xml.security.signature.XMLSignatureException $r5;
        java.lang.Exception $r6;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        b0 := @parameter0: byte;

     label1:
        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r1.<javax.crypto.Mac: void update(byte)>(b0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r3 = $r2;

        $r5 = new org.apache.xml.security.signature.XMLSignatureException;

        $r6 = (java.lang.Exception) r3;

        specialinvoke $r5.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r6);

        throw $r5;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected void engineUpdate(byte[], int, int) throws org.apache.xml.security.signature.XMLSignatureException
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        byte[] r1;
        int i0, i1;
        javax.crypto.Mac $r2;
        java.lang.Throwable $r3, r4;
        org.apache.xml.security.signature.XMLSignatureException $r6;
        java.lang.Exception $r7;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r2 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        virtualinvoke $r2.<javax.crypto.Mac: void update(byte[],int,int)>(r1, i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r6 = new org.apache.xml.security.signature.XMLSignatureException;

        $r7 = (java.lang.Exception) r4;

        specialinvoke $r6.<org.apache.xml.security.signature.XMLSignatureException: void <init>(java.lang.Exception)>($r7);

        throw $r6;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected java.lang.String engineGetJCEAlgorithmString()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        return $r2;
    }

    protected java.lang.String engineGetJCEProviderName()
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        javax.crypto.Mac $r1;
        java.security.Provider $r2;
        java.lang.String $r3;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        $r1 = r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: javax.crypto.Mac macAlgorithm>;

        $r2 = virtualinvoke $r1.<javax.crypto.Mac: java.security.Provider getProvider()>();

        $r3 = virtualinvoke $r2.<java.security.Provider: java.lang.String getName()>();

        return $r3;
    }

    protected void engineSetHMACOutputLength(int)
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        int i0, varReplacer1926;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        i0 := @parameter0: int;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = i0;

        varReplacer1926 = 1;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1926;

        return;
    }

    protected void engineGetContextFromElement(org.w3c.dom.Element)
    {
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r0;
        org.w3c.dom.Element r1;
        org.w3c.dom.Node $r2;
        org.w3c.dom.Text r3;
        java.lang.String $r4, varReplacer1927, varReplacer1928;
        int $i0, varReplacer1929, varReplacer1930;
        java.lang.IllegalArgumentException $r5;

        nop;

        r0 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r1 := @parameter0: org.w3c.dom.Element;

        specialinvoke r0.<org.apache.xml.security.algorithms.SignatureAlgorithmSpi: void engineGetContextFromElement(org.w3c.dom.Element)>(r1);

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        varReplacer1927 = "element null";

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1927);

        throw $r5;

     label1:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

        varReplacer1928 = "HMACOutputLength";

        varReplacer1929 = 0;

        r3 = staticinvoke <org.apache.xml.security.utils.XMLUtils: org.w3c.dom.Text selectDsNodeText(org.w3c.dom.Node,java.lang.String,int)>($r2, varReplacer1928, varReplacer1929);

        if r3 == null goto label2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.Text: java.lang.String getData()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength> = $i0;

        varReplacer1930 = 1;

        r0.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet> = varReplacer1930;

     label2:
        return;
    }

    public void engineAddContextToElement(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0, r3;
        org.apache.xml.security.algorithms.implementations.IntegrityHmac r1;
        boolean $z0;
        org.w3c.dom.Document r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        int $i0;
        java.lang.String $r7, varReplacer1931, varReplacer1932, varReplacer1933;
        org.w3c.dom.Text r8;
        java.lang.IllegalArgumentException $r11;

        nop;

        r1 := @this: org.apache.xml.security.algorithms.implementations.IntegrityHmac;

        r0 := @parameter0: org.w3c.dom.Element;

        if r0 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        varReplacer1933 = "null element";

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(varReplacer1933);

        throw $r11;

     label1:
        $z0 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: boolean HMACOutputLengthSet>;

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        varReplacer1932 = "HMACOutputLength";

        r3 = staticinvoke <org.apache.xml.security.utils.XMLUtils: org.w3c.dom.Element createElementInSignatureSpace(org.w3c.dom.Document,java.lang.String)>(r2, varReplacer1932);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer1931 = "";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1931);

        $i0 = r1.<org.apache.xml.security.algorithms.implementations.IntegrityHmac: int HMACOutputLength>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r7);

        interfaceinvoke r3.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r8);

        staticinvoke <org.apache.xml.security.utils.XMLUtils: void addReturnToElement(org.w3c.dom.Element)>(r0);

        interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r3);

        staticinvoke <org.apache.xml.security.utils.XMLUtils: void addReturnToElement(org.w3c.dom.Element)>(r0);

     label2:
        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        nop;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/xml/security/algorithms/implementations/IntegrityHmac;");

        <org.apache.xml.security.algorithms.implementations.IntegrityHmac: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
