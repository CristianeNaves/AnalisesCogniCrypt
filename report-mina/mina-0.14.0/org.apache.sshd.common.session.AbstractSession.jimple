public abstract class org.apache.sshd.common.session.AbstractSession extends org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable implements org.apache.sshd.common.Session
{
    public static final java.lang.String SESSION;
    protected static final int KEX_STATE_INIT;
    protected static final int KEX_STATE_RUN;
    protected static final int KEX_STATE_KEYS;
    protected static final int KEX_STATE_DONE;
    protected final boolean isServer;
    protected final org.apache.sshd.common.FactoryManager factoryManager;
    protected final org.apache.sshd.common.io.IoSession ioSession;
    protected final org.apache.sshd.common.Random random;
    protected boolean authed;
    protected java.lang.String username;
    protected final java.util.List listeners;
    protected final org.apache.sshd.common.SessionListener sessionListenerProxy;
    protected byte[] sessionId;
    protected java.lang.String serverVersion;
    protected java.lang.String clientVersion;
    protected java.lang.String[] serverProposal;
    protected java.lang.String[] clientProposal;
    protected java.lang.String[] negotiated;
    protected byte[] I_C;
    protected byte[] I_S;
    protected org.apache.sshd.common.KeyExchange kex;
    protected final java.util.concurrent.atomic.AtomicInteger kexState;
    protected org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture;
    protected org.apache.sshd.common.Cipher outCipher;
    protected org.apache.sshd.common.Cipher inCipher;
    protected int outCipherSize;
    protected int inCipherSize;
    protected org.apache.sshd.common.Mac outMac;
    protected org.apache.sshd.common.Mac inMac;
    protected byte[] inMacResult;
    protected org.apache.sshd.common.Compression outCompression;
    protected org.apache.sshd.common.Compression inCompression;
    protected long seqi;
    protected long seqo;
    protected org.apache.sshd.common.util.Buffer decoderBuffer;
    protected org.apache.sshd.common.util.Buffer uncompressBuffer;
    protected int decoderState;
    protected int decoderLength;
    protected final java.lang.Object encodeLock;
    protected final java.lang.Object decodeLock;
    protected final java.lang.Object requestLock;
    protected final java.util.concurrent.atomic.AtomicReference requestResult;
    protected final java.util.Map attributes;
    protected long authTimeoutTimestamp;
    protected long idleTimeoutTimestamp;
    protected long authTimeoutMs;
    protected long idleTimeoutMs;
    protected long disconnectTimeoutMs;
    protected final java.util.concurrent.atomic.AtomicReference timeoutStatus;
    protected volatile long inPackets;
    protected volatile long outPackets;
    protected volatile long inBytes;
    protected volatile long outBytes;
    protected volatile long lastKeyTime;
    protected final java.util.Queue pendingPackets;
    protected org.apache.sshd.common.Service currentService;
    static final boolean $assertionsDisabled;

    public void <init>(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        org.apache.sshd.common.util.Buffer $r3;
        java.lang.Object $r4, $r5, $r6, $r23;
        java.util.concurrent.atomic.AtomicReference $r7, $r12;
        java.util.concurrent.ConcurrentHashMap $r8;
        java.util.concurrent.TimeUnit $r9, $r10, $r11;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, varReplacer1220, varReplacer1221, varReplacer1223, varReplacer1225, varReplacer1226;
        org.apache.sshd.common.Session$TimeoutStatus $r13;
        java.util.LinkedList $r14;
        boolean z0;
        org.apache.sshd.common.FactoryManager r15;
        org.apache.sshd.common.io.IoSession r16;
        java.lang.Class $r17;
        java.lang.ClassLoader $r18;
        java.util.List $r19;
        java.util.EventListener $r20;
        org.apache.sshd.common.SessionListener $r21;
        org.apache.sshd.common.Factory $r22;
        org.apache.sshd.common.Random $r24;
        int varReplacer1219, varReplacer1227;
        java.lang.String varReplacer1222, varReplacer1224, varReplacer1228;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        r15 := @parameter1: org.apache.sshd.common.FactoryManager;

        r16 := @parameter2: org.apache.sshd.common.io.IoSession;

        specialinvoke r0.<org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState> = $r2;

        varReplacer1227 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = varReplacer1227;

        varReplacer1219 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = varReplacer1219;

        $r3 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r3.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult> = $r7;

        $r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes> = $r8;

        varReplacer1226 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutTimestamp> = varReplacer1226;

        varReplacer1225 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp> = varReplacer1225;

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        varReplacer1223 = 2L;

        $l0 = virtualinvoke $r9.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer1223);

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs> = $l0;

        $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        varReplacer1221 = 10L;

        $l1 = virtualinvoke $r10.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer1221);

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs> = $l1;

        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        varReplacer1220 = 10L;

        $l2 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer1220);

        r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs> = $l2;

        $r12 = new java.util.concurrent.atomic.AtomicReference;

        $r13 = <org.apache.sshd.common.Session$TimeoutStatus: org.apache.sshd.common.Session$TimeoutStatus NoTimeout>;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r13);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus> = $r12;

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets> = $r14;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer> = z0;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager> = r15;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession> = r16;

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        $r20 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/SessionListener;", $r18, $r19);

        $r21 = (org.apache.sshd.common.SessionListener) $r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.SessionListener sessionListenerProxy> = $r21;

        $r22 = interfaceinvoke r15.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.Factory getRandomFactory()>();

        $r23 = interfaceinvoke $r22.<org.apache.sshd.common.Factory: java.lang.Object create()>();

        $r24 = (org.apache.sshd.common.Random) $r23;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Random random> = $r24;

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        varReplacer1222 = "auth-timeout";

        $l4 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer1222, $l3);

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs> = $l4;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $l7 = $l5 + $l6;

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutTimestamp> = $l7;

        $l8 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        varReplacer1228 = "idle-timeout";

        $l9 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer1228, $l8);

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs> = $l9;

        $l10 = r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs>;

        varReplacer1224 = "disconnect-timeout";

        $l11 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer1224, $l10);

        r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs> = $l11;

        return;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession $r1;
        int varReplacer1229;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        varReplacer1229 = 0;

        $r1 = staticinvoke <org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession,boolean)>(r0, varReplacer1229);

        return $r1;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession, boolean)
    {
        org.apache.sshd.common.io.IoSession r0;
        java.lang.Object $r1;
        org.apache.sshd.common.session.AbstractSession r2;
        boolean z0;
        java.lang.IllegalStateException $r3;
        java.lang.String varReplacer1230, varReplacer1231;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        z0 := @parameter1: boolean;

        varReplacer1231 = "org.apache.sshd.session";

        $r1 = interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object getAttribute(java.lang.Object)>(varReplacer1231);

        r2 = (org.apache.sshd.common.session.AbstractSession) $r1;

        if z0 != 0 goto label1;

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        varReplacer1230 = "No session available";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1230);

        throw $r3;

     label1:
        return r2;
    }

    public static void attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.String varReplacer1232;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        r1 := @parameter1: org.apache.sshd.common.session.AbstractSession;

        varReplacer1232 = "org.apache.sshd.session";

        interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object setAttribute(java.lang.Object,java.lang.Object)>(varReplacer1232, r1);

        return;
    }

    public java.lang.String getServerVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        return $r1;
    }

    public java.lang.String getClientVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        return $r1;
    }

    public org.apache.sshd.common.KeyExchange getKex()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.KeyExchange $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        return $r1;
    }

    public byte[] getSessionId()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte[] $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        return $r1;
    }

    public org.apache.sshd.common.io.IoSession getIoSession()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.io.IoSession $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        return $r1;
    }

    public org.apache.sshd.common.FactoryManager getFactoryManager()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        return $r1;
    }

    public java.lang.String getNegotiatedKexParameter(int)
    {
        int i0, $i1;
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String[] $r1, $r2, $r3;
        java.lang.String $r4;
        null_type varReplacer1233;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        varReplacer1233 = null;

        return varReplacer1233;

     label2:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r4 = $r3[i0];

        return $r4;
    }

    public boolean isAuthenticated()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        return $z0;
    }

    public void setUsername(java.lang.String)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username> = r1;

        return;
    }

    public void setAuthenticated() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.SessionListener$Event $r1;
        int varReplacer1234;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer1234 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean authed> = varReplacer1234;

        $r1 = <org.apache.sshd.common.SessionListener$Event: org.apache.sshd.common.SessionListener$Event Authenticated>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.SessionListener$Event)>($r1);

        return;
    }

    public void messageReceived(org.apache.sshd.common.util.Readable) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Readable r3;
        org.apache.sshd.common.util.Buffer $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;
        java.lang.Throwable $r9, r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Readable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        virtualinvoke $r4.<org.apache.sshd.common.util.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r3);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        if $r5 == null goto label2;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        if $r8 != null goto label5;

     label2:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean readIdentification(org.apache.sshd.common.util.Buffer)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        virtualinvoke $r7.<org.apache.sshd.common.util.Buffer: void compact()>();

        goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void decode()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r10 = $r9;

        exitmonitor r2;

     label8:
        throw r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void handleMessage(org.apache.sshd.common.util.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Buffer r3;
        java.lang.Throwable $r4, r5;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void doHandleMessage(org.apache.sshd.common.util.Buffer)>(r3);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r5 = $r4;

        exitmonitor r2;

     label4:
        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void doHandleMessage(org.apache.sshd.common.util.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.Buffer r0, $r18, r110;
        byte b0;
        org.apache.sshd.common.session.AbstractSession r1;
        org.slf4j.Logger $r2, $r11, $r29, $r47, $r55, $r57, $r65, $r67, $r69, $r70, $r97;
        java.util.concurrent.atomic.AtomicInteger $r3, $r8, $r30, $r31, $r48, $r56, $r80, $r82;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, varReplacer1237, varReplacer1240, varReplacer1241, varReplacer1246, varReplacer1248, varReplacer1249, varReplacer1250, varReplacer1254, varReplacer1257, varReplacer1261;
        org.apache.sshd.common.future.DefaultSshFuture $r4, $r21;
        org.apache.sshd.common.SessionListener$Event $r5, $r45;
        java.util.Queue $r6, $r7, $r14, r111;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.Object $r9, $r10, $r12, r13, $r15, $r36, r112;
        org.apache.sshd.common.session.AbstractSession$PendingWriteFuture $r16, r17;
        org.apache.sshd.common.io.IoWriteFuture $r19;
        java.lang.Boolean $r22, $r66;
        java.lang.IllegalStateException $r23, $r46, $r49, $r59, $r74, $r83;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r50, $r51, $r52, $r53, $r60, $r61, $r62, $r63, $r75, $r76, $r77, $r84, $r85, $r86, $r87, $r96, $r98, $r99, $r100, $r102, $r103, $r104;
        java.lang.String $r28, $r35, $r38, $r41, $r54, $r64, $r78, $r88, $r101, $r105, r106, r107, r108, varReplacer1235, varReplacer1236, varReplacer1238, varReplacer1239, varReplacer1242, varReplacer1243, varReplacer1244, varReplacer1245, varReplacer1247, varReplacer1251, varReplacer1252, varReplacer1253, varReplacer1255, varReplacer1256, varReplacer1258, varReplacer1259, varReplacer1260, varReplacer1262, varReplacer1263, varReplacer1264, varReplacer1265, varReplacer1266, varReplacer1267;
        org.apache.sshd.common.FactoryManager $r32;
        java.util.List $r33;
        java.lang.String[] $r34;
        org.apache.sshd.common.KeyExchange $r37, $r39, $r81;
        byte[] $r40, $r42, $r43, $r44;
        java.lang.Integer $r68, $r71;
        org.apache.sshd.common.Service $r73, $r79;
        java.lang.Throwable $r89, r90, $r91, r92, $r93, r94;
        java.lang.Exception $r95, r109;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.Buffer;

        b0 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: byte getByte()>();

        tableswitch(b0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label10;
            case 7: goto label34;
            case 8: goto label34;
            case 9: goto label34;
            case 10: goto label34;
            case 11: goto label34;
            case 12: goto label34;
            case 13: goto label34;
            case 14: goto label34;
            case 15: goto label34;
            case 16: goto label34;
            case 17: goto label34;
            case 18: goto label34;
            case 19: goto label34;
            case 20: goto label12;
            case 21: goto label15;
            default: goto label34;
        };

     label01:
        i7 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int getInt()>();

        r106 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: java.lang.String getString()>();

        $r70 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        varReplacer1258 = "Received SSH_MSG_DISCONNECT (reason={}, msg={})";

        interfaceinvoke $r70.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer1258, $r71, r106);

        varReplacer1261 = 1;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer1261);

        goto label38;

     label02:
        $r69 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1264 = "Received SSH_MSG_IGNORE";

        interfaceinvoke $r69.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1264);

        goto label38;

     label03:
        i8 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int getInt()>();

        $r67 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        varReplacer1244 = "Received SSH_MSG_UNIMPLEMENTED #{}";

        interfaceinvoke $r67.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1244, $r68);

        goto label38;

     label04:
        z4 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: boolean getBoolean()>();

        r107 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: java.lang.String getString()>();

        $r65 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r66 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        varReplacer1239 = "Received SSH_MSG_DEBUG (display={}) \'{}\'";

        interfaceinvoke $r65.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer1239, $r66, r107);

        goto label38;

     label05:
        r108 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: java.lang.String getString()>();

        $r55 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1259 = "Received SSH_MSG_SERVICE_REQUEST \'{}\'";

        interfaceinvoke $r55.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1259, r108);

        $r56 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i3 = virtualinvoke $r56.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i3 == 4 goto label06;

        $r59 = new java.lang.IllegalStateException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        varReplacer1255 = "Received command ";

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1255);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        varReplacer1253 = " before key exchange is finished";

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1253);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r59;

     label06:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void startService(java.lang.String)>(r108);

     label07:
        goto label09;

     label08:
        $r95 := @caughtexception;

        r109 = $r95;

        $r97 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        varReplacer1235 = "Service ";

        $r98 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1235);

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        varReplacer1245 = " rejected";

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1245);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r97.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r101, r109);

        $r102 = new java.lang.StringBuilder;

        specialinvoke $r102.<java.lang.StringBuilder: void <init>()>();

        varReplacer1266 = "Bad service request: ";

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1266);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1257 = 7;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer1257, $r105);

        goto label38;

     label09:
        $r57 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1236 = "Accepted service {}";

        interfaceinvoke $r57.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer1236, r108);

        varReplacer1246 = 6;

        r110 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte)>(varReplacer1246);

        virtualinvoke r110.<org.apache.sshd.common.util.Buffer: void putString(java.lang.String)>(r108);

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r110);

        goto label38;

     label10:
        $r47 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1242 = "Received SSH_MSG_SERVICE_ACCEPT";

        interfaceinvoke $r47.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1242);

        $r48 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i2 = virtualinvoke $r48.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 == 4 goto label11;

        $r49 = new java.lang.IllegalStateException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        varReplacer1238 = "Received command ";

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1238);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        varReplacer1260 = " before key exchange is finished";

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1260);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r54);

        throw $r49;

     label11:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void serviceAccept()>();

        goto label38;

     label12:
        $r29 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1243 = "Received SSH_MSG_KEXINIT";

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1243);

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void receiveKexInit(org.apache.sshd.common.util.Buffer)>(r0);

        $r30 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        varReplacer1248 = 4;

        varReplacer1249 = 2;

        $z1 = virtualinvoke $r30.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(varReplacer1248, varReplacer1249);

        if $z1 == 0 goto label13;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void sendKexInit()>();

        goto label14;

     label13:
        $r31 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        varReplacer1240 = 1;

        varReplacer1241 = 2;

        $z2 = virtualinvoke $r31.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(varReplacer1240, varReplacer1241);

        if $z2 != 0 goto label14;

        $r46 = new java.lang.IllegalStateException;

        varReplacer1247 = "Received SSH_MSG_KEXINIT while key exchange is running";

        specialinvoke $r46.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1247);

        throw $r46;

     label14:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void negotiate()>();

        $r32 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r33 = interfaceinvoke $r32.<org.apache.sshd.common.FactoryManager: java.util.List getKeyExchangeFactories()>();

        $r34 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r35 = $r34[0];

        $r36 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r33, $r35);

        $r37 = (org.apache.sshd.common.KeyExchange) $r36;

        r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex> = $r37;

        $r39 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        $r38 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        $r40 = virtualinvoke $r38.<java.lang.String: byte[] getBytes()>();

        $r41 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        $r42 = virtualinvoke $r41.<java.lang.String: byte[] getBytes()>();

        $r44 = r1.<org.apache.sshd.common.session.AbstractSession: byte[] I_S>;

        $r43 = r1.<org.apache.sshd.common.session.AbstractSession: byte[] I_C>;

        interfaceinvoke $r39.<org.apache.sshd.common.KeyExchange: void init(org.apache.sshd.common.session.AbstractSession,byte[],byte[],byte[],byte[])>(r1, $r40, $r42, $r44, $r43);

        $r45 = <org.apache.sshd.common.SessionListener$Event: org.apache.sshd.common.SessionListener$Event KexCompleted>;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.SessionListener$Event)>($r45);

        goto label38;

     label15:
        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1267 = "Received SSH_MSG_NEWKEYS";

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1267);

        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i1 == 3 goto label16;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        varReplacer1262 = "Received command ";

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1262);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        varReplacer1263 = " before key exchange is finished";

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1263);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label16:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void receiveNewKeys()>();

        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        if $r4 == null goto label17;

        $r21 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        varReplacer1250 = 1;

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(varReplacer1250);

        virtualinvoke $r21.<org.apache.sshd.common.future.DefaultSshFuture: void setValue(java.lang.Object)>($r22);

     label17:
        $r5 = <org.apache.sshd.common.SessionListener$Event: org.apache.sshd.common.SessionListener$Event KeyEstablished>;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.SessionListener$Event)>($r5);

        $r6 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r111 = $r6;

        entermonitor $r6;

     label18:
        $r7 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z0 = interfaceinvoke $r7.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label24;

        $r11 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1251 = "Dequeing pending packets";

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>(varReplacer1251);

        $r12 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r13 = $r12;

        entermonitor $r12;

     label19:
        $r14 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $r15 = interfaceinvoke $r14.<java.util.Queue: java.lang.Object poll()>();

        $r16 = (org.apache.sshd.common.session.AbstractSession$PendingWriteFuture) $r15;

        r17 = $r16;

        if $r16 == null goto label20;

        $r18 = virtualinvoke r17.<org.apache.sshd.common.session.AbstractSession$PendingWriteFuture: org.apache.sshd.common.util.Buffer getBuffer()>();

        $r19 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.Buffer)>($r18);

        interfaceinvoke $r19.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>(r17);

        goto label19;

     label20:
        exitmonitor r13;

     label21:
        goto label24;

     label22:
        $r93 := @caughtexception;

        r94 = $r93;

        exitmonitor r13;

     label23:
        throw r94;

     label24:
        $r8 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        varReplacer1237 = 4;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(varReplacer1237);

        exitmonitor r111;

     label25:
        goto label28;

     label26:
        $r91 := @caughtexception;

        r92 = $r91;

        exitmonitor r111;

     label27:
        throw r92;

     label28:
        $r9 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r112 = $r9;

        entermonitor $r9;

     label29:
        $r10 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        virtualinvoke $r10.<java.lang.Object: void notifyAll()>();

        exitmonitor r112;

     label30:
        goto label33;

     label31:
        $r89 := @caughtexception;

        r90 = $r89;

        exitmonitor r112;

     label32:
        throw r90;

     label33:
        goto label38;

     label34:
        if b0 < 30 goto label36;

        if b0 > 49 goto label36;

        $r80 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i4 = virtualinvoke $r80.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i4 == 2 goto label35;

        $r83 = new java.lang.IllegalStateException;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        varReplacer1252 = "Received kex command ";

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1252);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        varReplacer1256 = " while not in key exchange";

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1256);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r83.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r88);

        throw $r83;

     label35:
        $i5 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int rpos()>();

        $i6 = $i5 - 1;

        virtualinvoke r0.<org.apache.sshd.common.util.Buffer: void rpos(int)>($i6);

        $r81 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        $z3 = interfaceinvoke $r81.<org.apache.sshd.common.KeyExchange: boolean next(org.apache.sshd.common.util.Buffer)>(r0);

        if $z3 == 0 goto label38;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void checkKeys()>();

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void sendNewKeys()>();

        $r82 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        varReplacer1254 = 3;

        virtualinvoke $r82.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(varReplacer1254);

        goto label38;

     label36:
        $r73 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r73 == null goto label37;

        $r79 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        interfaceinvoke $r79.<org.apache.sshd.common.Service: void process(byte,org.apache.sshd.common.util.Buffer)>(b0, r0);

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        goto label38;

     label37:
        $r74 = new java.lang.IllegalStateException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        varReplacer1265 = "Unsupported command ";

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1265);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r78);

        throw $r74;

     label38:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return;

        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label19 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label18 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label31 to label32 with label31;
    }

    public void exceptionCaught(java.lang.Throwable)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r10;
        boolean $z0, $z1;
        java.lang.Throwable r2, $r7, $r8, r9, r11;
        org.slf4j.Logger $r3;
        org.apache.sshd.common.SshException $r5;
        java.lang.String $r6, varReplacer1269;
        int i0, varReplacer1268;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r10 = $r1;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isClosing()>();

        if $z0 == 0 goto label03;

        exitmonitor r10;

     label02:
        return;

     label03:
        exitmonitor r10;

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

        r9 = $r8;

        exitmonitor r10;

     label06:
        throw r9;

     label07:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1269 = "Exception caught";

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>(varReplacer1269, r2);

     label08:
        $z1 = r2 instanceof org.apache.sshd.common.SshException;

        if $z1 == 0 goto label10;

        $r5 = (org.apache.sshd.common.SshException) r2;

        i0 = virtualinvoke $r5.<org.apache.sshd.common.SshException: int getDisconnectCode()>();

        if i0 <= 0 goto label10;

        $r6 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(i0, $r6);

     label09:
        return;

     label10:
        goto label12;

     label11:
        $r7 := @caughtexception;

        r11 = $r7;

     label12:
        varReplacer1268 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer1268);

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    protected org.apache.sshd.common.Closeable getInnerCloseable()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.CloseableUtils$Builder $r1, $r3, $r5;
        org.apache.sshd.common.Service[] $r2;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.Closeable $r6;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.CloseableUtils$Builder builder()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service[] getServices()>();

        $r3 = virtualinvoke $r1.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.util.CloseableUtils$Builder parallel(org.apache.sshd.common.Closeable[])>($r2);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = virtualinvoke $r3.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.util.CloseableUtils$Builder close(org.apache.sshd.common.Closeable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.Closeable build()>();

        return $r6;
    }

    protected void doCloseImmediately()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.SessionListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        specialinvoke r0.<org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable: void doCloseImmediately()>();

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.SessionListener sessionListenerProxy>;

        interfaceinvoke $r1.<org.apache.sshd.common.SessionListener: void sessionClosed(org.apache.sshd.common.Session)>(r0);

        return;
    }

    protected org.apache.sshd.common.Service[] getServices()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Service $r1, $r2;
        org.apache.sshd.common.Service[] $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r1 == null goto label1;

        $r3 = newarray (org.apache.sshd.common.Service)[1];

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        $r3[0] = $r2;

        goto label2;

     label1:
        $r3 = newarray (org.apache.sshd.common.Service)[0];

     label2:
        return $r3;
    }

    public org.apache.sshd.common.Service getService(java.lang.Class)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Service[] r1;
        int i0, i1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class r5;
        java.lang.String $r6, $r8, varReplacer1270;
        org.apache.sshd.common.Service r9, $r11;
        boolean $z0;
        java.lang.Object $r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r5 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service[] getServices()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r9 = r1[i1];

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r5.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r9);

        $r11 = (org.apache.sshd.common.Service) $r10;

        return $r11;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer1270 = "Attempted to access unknown service ";

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1270);

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r6;
        int $i0, $i1, $i2;
        org.apache.sshd.common.util.Buffer r2;
        byte[] $r3;
        java.util.Queue $r4, r5, $r7, $r10;
        boolean $z0;
        org.apache.sshd.common.session.AbstractSession$PendingWriteFuture $r8, r9;
        org.slf4j.Logger $r11;
        java.lang.Throwable $r13, r14, $r15, r16;
        byte b3;
        org.apache.sshd.common.io.IoWriteFuture r17;
        java.lang.String varReplacer1271;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 == 4 goto label08;

        $r3 = virtualinvoke r2.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i1 = virtualinvoke r2.<org.apache.sshd.common.util.Buffer: int rpos()>();

        b3 = $r3[$i1];

        if b3 <= 49 goto label08;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r5 = $r4;

        entermonitor $r4;

     label01:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        $i2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 == 4 goto label04;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z0 = interfaceinvoke $r7.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1271 = "Start flagging packets as pending until key exchange is done";

        interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String)>(varReplacer1271);

     label02:
        $r8 = new org.apache.sshd.common.session.AbstractSession$PendingWriteFuture;

        specialinvoke $r8.<org.apache.sshd.common.session.AbstractSession$PendingWriteFuture: void <init>(org.apache.sshd.common.util.Buffer)>(r2);

        r9 = $r8;

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        interfaceinvoke $r10.<java.util.Queue: boolean add(java.lang.Object)>(r9);

        exitmonitor r5;

     label03:
        return r9;

     label04:
        exitmonitor r5;

     label05:
        goto label08;

     label06:
        $r15 := @caughtexception;

        r16 = $r15;

        exitmonitor r5;

     label07:
        throw r16;

     label08:
        r17 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.Buffer)>(r2);

     label09:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return r17;

     label10:
        $r13 := @caughtexception;

        r14 = $r13;

     label11:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        throw r14;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.Buffer r1;
        org.apache.sshd.common.io.IoWriteFuture r2;
        org.apache.sshd.common.future.DefaultSshFuture r3;
        org.apache.sshd.common.FactoryManager $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        org.apache.sshd.common.session.AbstractSession$1 $r6;
        long l0;
        java.util.concurrent.TimeUnit r7;
        java.util.concurrent.ScheduledFuture r8;
        org.apache.sshd.common.session.AbstractSession$2 $r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.Buffer;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r1);

        r3 = (org.apache.sshd.common.future.DefaultSshFuture) r2;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r5 = interfaceinvoke $r4.<org.apache.sshd.common.FactoryManager: java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()>();

        $r6 = new org.apache.sshd.common.session.AbstractSession$1;

        specialinvoke $r6.<org.apache.sshd.common.session.AbstractSession$1: void <init>(org.apache.sshd.common.session.AbstractSession,org.apache.sshd.common.future.DefaultSshFuture)>(r0, r3);

        r8 = interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r6, l0, r7);

        $r9 = new org.apache.sshd.common.session.AbstractSession$2;

        specialinvoke $r9.<org.apache.sshd.common.session.AbstractSession$2: void <init>(org.apache.sshd.common.session.AbstractSession,java.util.concurrent.ScheduledFuture)>(r0, r8);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultSshFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r9);

        return r2;
    }

    protected org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Buffer r3;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.io.IoWriteFuture $r5;
        java.lang.Throwable $r6, r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: void encode(org.apache.sshd.common.util.Buffer)>(r3);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = interfaceinvoke $r4.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.Buffer)>(r3);

        exitmonitor r2;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        exitmonitor r2;

     label4:
        throw r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.sshd.common.util.Buffer request(org.apache.sshd.common.util.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2, $r8;
        java.util.concurrent.atomic.AtomicReference $r3, $r6, $r7, r18;
        org.apache.sshd.common.util.Buffer r4, $r9;
        java.lang.Throwable $r10, r11, $r12, $r14, $r16, r17, r19;
        java.io.InterruptedIOException $r13, $r15;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r18 = $r3;

        entermonitor $r3;

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r4);

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r9 = (org.apache.sshd.common.util.Buffer) $r8;

        exitmonitor r18;

     label3:
        exitmonitor r2;

     label4:
        return $r9;

     label5:
        $r16 := @caughtexception;

        r17 = $r16;

        exitmonitor r18;

     label6:
        throw r17;

     label7:
        $r12 := @caughtexception;

        r19 = $r12;

        $r13 = new java.io.InterruptedIOException;

        specialinvoke $r13.<java.io.InterruptedIOException: void <init>()>();

        $r14 = virtualinvoke $r13.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(r19);

        $r15 = (java.io.InterruptedIOException) $r14;

        throw $r15;

     label8:
        $r10 := @caughtexception;

        r11 = $r10;

        exitmonitor r2;

     label9:
        throw r11;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.InterruptedException from label1 to label3 with label7;
        catch java.lang.InterruptedException from label5 to label7 with label7;
        catch java.lang.Throwable from label1 to label4 with label8;
        catch java.lang.Throwable from label5 to label9 with label8;
    }

    public org.apache.sshd.common.util.Buffer createBuffer(byte)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte b0;
        org.apache.sshd.common.util.Buffer $r1;
        int varReplacer1272;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b0 := @parameter0: byte;

        varReplacer1272 = 0;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte,int)>(b0, varReplacer1272);

        return $r1;
    }

    public org.apache.sshd.common.util.Buffer createBuffer(byte, int)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, i8, i9, i10, varReplacer1273, varReplacer1274, varReplacer1275, varReplacer1276;
        org.apache.sshd.common.Mac $r1, $r4;
        org.apache.sshd.common.util.Buffer $r2, $r5, r6;
        byte[] $r3;
        byte b5;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b5 := @parameter0: byte;

        i7 := @parameter1: int;

        if i7 > 0 goto label1;

        $r5 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r5.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r6 = $r5;

        goto label4;

     label1:
        i0 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i8 = i7 + 5;

        $i2 = neg i8;

        $i1 = i0 - 1;

        i9 = $i2 & $i1;

        if i9 >= i0 goto label2;

        i9 = i9 + i0;

     label2:
        $i3 = i8 + i9;

        i10 = $i3 - 4;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        $i6 = interfaceinvoke $r4.<org.apache.sshd.common.Mac: int getBlockSize()>();

        i10 = i10 + $i6;

     label3:
        $r2 = new org.apache.sshd.common.util.Buffer;

        varReplacer1274 = 256;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i10, varReplacer1274);

        $r3 = newarray (byte)[$i4];

        varReplacer1273 = 0;

        specialinvoke $r2.<org.apache.sshd.common.util.Buffer: void <init>(byte[],boolean)>($r3, varReplacer1273);

        r6 = $r2;

     label4:
        varReplacer1275 = 5;

        virtualinvoke r6.<org.apache.sshd.common.util.Buffer: void rpos(int)>(varReplacer1275);

        varReplacer1276 = 5;

        virtualinvoke r6.<org.apache.sshd.common.util.Buffer: void wpos(int)>(varReplacer1276);

        virtualinvoke r6.<org.apache.sshd.common.util.Buffer: void putByte(byte)>(b5);

        return r6;
    }

    private void encode(org.apache.sshd.common.util.Buffer) throws java.io.IOException
    {
        int $i0, $i1, i2, i3, i4, $i5, $i8, $i9, $i10, $i11, $i12, $i21, i22, i23, $i24, i27, i28, $i29, $i30, i31, i32, varReplacer1279;
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r19, $r22;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.Compression $r2, $r17, $r18;
        long $l6, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l25, $l26;
        byte $b7;
        org.apache.sshd.common.Random $r3;
        byte[] $r4, $r8, $r14, $r16;
        org.apache.sshd.common.Mac $r5, $r11, $r12, $r13, $r15;
        org.apache.sshd.common.Cipher $r6, $r7;
        java.lang.Long $r20;
        java.lang.String $r21, varReplacer1277, varReplacer1278;
        org.apache.sshd.common.util.Buffer $r23, r27, r28;
        java.lang.Exception $r24, r30;
        org.apache.sshd.common.SshException $r25, $r26, r29;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r27 := @parameter0: org.apache.sshd.common.util.Buffer;

     label01:
        $i0 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int rpos()>();

        if $i0 >= 5 goto label02;

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1278 = "Performance cost: when sending a packet, ensure that 5 bytes are available in front of the buffer";

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String)>(varReplacer1278);

        $r23 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r23.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r28 = $r23;

        varReplacer1279 = 5;

        virtualinvoke r28.<org.apache.sshd.common.util.Buffer: void wpos(int)>(varReplacer1279);

        virtualinvoke r28.<org.apache.sshd.common.util.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r27);

        r27 = r28;

     label02:
        i27 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int available()>();

        $i1 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int rpos()>();

        i2 = $i1 - 5;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label03;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $l26 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l26);

        $r21 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: java.lang.String printHex()>();

        varReplacer1277 = "Sending packet #{}: {}";

        interfaceinvoke $r19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer1277, $r20, $r21);

     label03:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression>;

        if $r2 == null goto label05;

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label04;

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression>;

        $z2 = interfaceinvoke $r18.<org.apache.sshd.common.Compression: boolean isDelayed()>();

        if $z2 != 0 goto label05;

     label04:
        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression>;

        interfaceinvoke $r17.<org.apache.sshd.common.Compression: void compress(org.apache.sshd.common.util.Buffer)>(r27);

        i27 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int available()>();

     label05:
        i3 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i4 = i27;

        i28 = i27 + 5;

        $i29 = neg i28;

        $i30 = i3 - 1;

        i31 = $i29 & $i30;

        if i31 >= i3 goto label06;

        i31 = i31 + i3;

     label06:
        $i5 = i28 + i31;

        i32 = $i5 - 4;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void wpos(int)>(i2);

        $l6 = (long) i32;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void putInt(long)>($l6);

        $b7 = (byte) i31;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void putByte(byte)>($b7);

        $i8 = i2 + i4;

        $i9 = $i8 + 5;

        $i10 = $i9 + i31;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void wpos(int)>($i10);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Random random>;

        $r4 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i11 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int wpos()>();

        $i12 = $i11 - i31;

        interfaceinvoke $r3.<org.apache.sshd.common.Random: void fill(byte[],int,int)>($r4, $i12, i31);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        if $r5 == null goto label07;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        i22 = interfaceinvoke $r11.<org.apache.sshd.common.Mac: int getBlockSize()>();

        i23 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: int wpos()>();

        $i24 = i23 + i22;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void wpos(int)>($i24);

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        $l25 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        interfaceinvoke $r12.<org.apache.sshd.common.Mac: void updateUInt(long)>($l25);

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        $r14 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        interfaceinvoke $r13.<org.apache.sshd.common.Mac: void update(byte[],int,int)>($r14, i2, i23);

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac>;

        $r16 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        interfaceinvoke $r15.<org.apache.sshd.common.Mac: void doFinal(byte[],int)>($r16, i23);

     label07:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher outCipher>;

        if $r6 == null goto label08;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher outCipher>;

        $r8 = virtualinvoke r27.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i21 = i32 + 4;

        interfaceinvoke $r7.<org.apache.sshd.common.Cipher: void update(byte[],int,int)>($r8, i2, $i21);

     label08:
        $l13 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $l14 = $l13 + 1L;

        $l15 = $l14 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqo> = $l15;

        $l16 = r0.<org.apache.sshd.common.session.AbstractSession: long outPackets>;

        $l17 = $l16 + 1L;

        r0.<org.apache.sshd.common.session.AbstractSession: long outPackets> = $l17;

        $l19 = r0.<org.apache.sshd.common.session.AbstractSession: long outBytes>;

        $l18 = (long) i32;

        $l20 = $l19 + $l18;

        r0.<org.apache.sshd.common.session.AbstractSession: long outBytes> = $l20;

        virtualinvoke r27.<org.apache.sshd.common.util.Buffer: void rpos(int)>(i2);

     label09:
        goto label12;

     label10:
        $r26 := @caughtexception;

        r29 = $r26;

        throw r29;

     label11:
        $r24 := @caughtexception;

        r30 = $r24;

        $r25 = new org.apache.sshd.common.SshException;

        specialinvoke $r25.<org.apache.sshd.common.SshException: void <init>(java.lang.Throwable)>(r30);

        throw $r25;

     label12:
        return;

        catch org.apache.sshd.common.SshException from label01 to label09 with label10;
        catch java.lang.Exception from label01 to label09 with label11;
    }

    protected void decode() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int $i0, i1, $i2, $i3, $i4, i9, $i10, $i11, $i12, $i16, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, varReplacer1280, varReplacer1281, varReplacer1284, varReplacer1285, varReplacer1286, varReplacer1287, varReplacer1288, varReplacer1290;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.sshd.common.Mac $r1, $r6, $r28, $r29, $r31, $r35;
        org.apache.sshd.common.util.Buffer $r2, $r3, $r7, $r8, $r10, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r36, $r38, $r40, $r41, $r49, $r52, r54;
        byte[] r4, $r30, $r32, $r51;
        org.apache.sshd.common.Cipher $r5, $r34, $r39, $r50;
        long $l5, $l6, $l7, $l13, $l14, $l15, $l17, $l18, $l22, $l28;
        byte b8;
        org.apache.sshd.common.Compression $r9, $r25, $r27;
        org.slf4j.Logger $r14, $r42, $r55;
        java.lang.Long $r15;
        java.lang.String $r16, $r43, $r48, varReplacer1282, varReplacer1283, varReplacer1289, varReplacer1291;
        org.apache.sshd.common.SshException $r33, $r44;
        java.lang.AssertionError $r37, $r53;
        java.lang.StringBuilder $r45, $r46, $r47;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

     label01:
        $i47 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i47 != 0 goto label06;

        $z4 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z4 != 0 goto label02;

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i46 = virtualinvoke $r52.<org.apache.sshd.common.util.Buffer: int rpos()>();

        if $i46 == 0 goto label02;

        $r53 = new java.lang.AssertionError;

        specialinvoke $r53.<java.lang.AssertionError: void <init>()>();

        throw $r53;

     label02:
        $r38 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i39 = virtualinvoke $r38.<org.apache.sshd.common.util.Buffer: int available()>();

        $i40 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        if $i39 <= $i40 goto label18;

        $r39 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher>;

        if $r39 == null goto label03;

        $r50 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher>;

        $r49 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $r51 = virtualinvoke $r49.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i45 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        varReplacer1281 = 0;

        interfaceinvoke $r50.<org.apache.sshd.common.Cipher: void update(byte[],int,int)>($r51, varReplacer1281, $i45);

     label03:
        $r40 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i41 = virtualinvoke $r40.<org.apache.sshd.common.util.Buffer: int getInt()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength> = $i41;

        $i42 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i42 < 5 goto label04;

        $i44 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i44 <= 262144 goto label05;

     label04:
        $r42 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r41 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $r43 = virtualinvoke $r41.<org.apache.sshd.common.util.Buffer: java.lang.String printHex()>();

        varReplacer1289 = "Error decoding packet (invalid length) {}";

        interfaceinvoke $r42.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>(varReplacer1289, $r43);

        $r44 = new org.apache.sshd.common.SshException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        varReplacer1282 = "Invalid packet length: ";

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1282);

        $i43 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i43);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1286 = 2;

        specialinvoke $r44.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer1286, $r48);

        throw $r44;

     label05:
        varReplacer1288 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer1288;

        goto label01;

     label06:
        $i0 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i0 != 1 goto label01;

        $z0 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i38 = virtualinvoke $r36.<org.apache.sshd.common.util.Buffer: int rpos()>();

        if $i38 == 4 goto label07;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label07:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        if $r1 == null goto label08;

        $r35 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        $i48 = interfaceinvoke $r35.<org.apache.sshd.common.Mac: int getBlockSize()>();

        goto label09;

     label08:
        $i48 = 0;

     label09:
        i1 = $i48;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i2 = virtualinvoke $r2.<org.apache.sshd.common.util.Buffer: int available()>();

        $i3 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i4 = $i3 + i1;

        if $i2 < $i4 goto label18;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        r4 = virtualinvoke $r3.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher>;

        if $r5 == null goto label10;

        $r34 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher>;

        $i37 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        $i33 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i35 = $i33 + 4;

        $i34 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        $i36 = $i35 - $i34;

        interfaceinvoke $r34.<org.apache.sshd.common.Cipher: void update(byte[],int,int)>(r4, $i37, $i36);

     label10:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        if $r6 == null goto label11;

        $r28 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        $l28 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        interfaceinvoke $r28.<org.apache.sshd.common.Mac: void updateUInt(long)>($l28);

        $r29 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        $i29 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i30 = $i29 + 4;

        varReplacer1280 = 0;

        interfaceinvoke $r29.<org.apache.sshd.common.Mac: void update(byte[],int,int)>(r4, varReplacer1280, $i30);

        $r31 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        $r30 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        varReplacer1285 = 0;

        interfaceinvoke $r31.<org.apache.sshd.common.Mac: void doFinal(byte[],int)>($r30, varReplacer1285);

        $r32 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        $i31 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i32 = $i31 + 4;

        varReplacer1287 = 0;

        $z3 = staticinvoke <org.apache.sshd.common.util.BufferUtils: boolean equals(byte[],int,byte[],int,int)>($r32, varReplacer1287, r4, $i32, i1);

        if $z3 != 0 goto label11;

        $r33 = new org.apache.sshd.common.SshException;

        varReplacer1290 = 5;

        varReplacer1291 = "MAC Error";

        specialinvoke $r33.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer1290, varReplacer1291);

        throw $r33;

     label11:
        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l6 = $l5 + 1L;

        $l7 = $l6 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqi> = $l7;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        b8 = virtualinvoke $r7.<org.apache.sshd.common.util.Buffer: byte getByte()>();

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        i9 = virtualinvoke $r8.<org.apache.sshd.common.util.Buffer: int wpos()>();

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression>;

        if $r9 == null goto label15;

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label12;

        $r27 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression>;

        $z2 = interfaceinvoke $r27.<org.apache.sshd.common.Compression: boolean isDelayed()>();

        if $z2 != 0 goto label15;

     label12:
        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer uncompressBuffer>;

        if $r19 != null goto label13;

        $r26 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r26.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer uncompressBuffer> = $r26;

        goto label14;

     label13:
        $r20 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer uncompressBuffer>;

        virtualinvoke $r20.<org.apache.sshd.common.util.Buffer: void clear()>();

     label14:
        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i23 = virtualinvoke $r21.<org.apache.sshd.common.util.Buffer: int rpos()>();

        $i24 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i25 = $i23 + $i24;

        $i26 = $i25 - 1;

        $i27 = $i26 - b8;

        virtualinvoke $r22.<org.apache.sshd.common.util.Buffer: void wpos(int)>($i27);

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression>;

        $r24 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer uncompressBuffer>;

        interfaceinvoke $r25.<org.apache.sshd.common.Compression: void uncompress(org.apache.sshd.common.util.Buffer,org.apache.sshd.common.util.Buffer)>($r24, $r23);

        r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer uncompressBuffer>;

        goto label16;

     label15:
        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i10 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i11 = $i10 + 4;

        $i12 = $i11 - b8;

        virtualinvoke $r10.<org.apache.sshd.common.util.Buffer: void wpos(int)>($i12);

        r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

     label16:
        $r55 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r55.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z5 == 0 goto label17;

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $l22 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l22);

        $r16 = virtualinvoke r54.<org.apache.sshd.common.util.Buffer: java.lang.String printHex()>();

        varReplacer1283 = "Received packet #{}: {}";

        interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer1283, $r15, $r16);

     label17:
        $l13 = r0.<org.apache.sshd.common.session.AbstractSession: long inPackets>;

        $l14 = $l13 + 1L;

        r0.<org.apache.sshd.common.session.AbstractSession: long inPackets> = $l14;

        $l15 = r0.<org.apache.sshd.common.session.AbstractSession: long inBytes>;

        $i16 = virtualinvoke r54.<org.apache.sshd.common.util.Buffer: int available()>();

        $l17 = (long) $i16;

        $l18 = $l15 + $l17;

        r0.<org.apache.sshd.common.session.AbstractSession: long inBytes> = $l18;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleMessage(org.apache.sshd.common.util.Buffer)>(r54);

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        $i19 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i20 = $i19 + 4;

        $i21 = $i20 + i1;

        virtualinvoke $r11.<org.apache.sshd.common.util.Buffer: void rpos(int)>($i21);

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        virtualinvoke $r12.<org.apache.sshd.common.util.Buffer: void wpos(int)>(i9);

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer decoderBuffer>;

        virtualinvoke $r13.<org.apache.sshd.common.util.Buffer: void compact()>();

        varReplacer1284 = 0;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer1284;

        goto label01;

     label18:
        return;
    }

    protected void sendIdentification(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String r1, $r4, varReplacer1292;
        byte[] r5;
        org.apache.sshd.common.session.AbstractSession r6;
        org.apache.sshd.common.util.Buffer $r7;
        org.apache.sshd.common.io.IoSession $r8;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer1292 = "\r\n";

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1292);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        $r8 = r6.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r7 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r7.<org.apache.sshd.common.util.Buffer: void <init>(byte[])>(r5);

        interfaceinvoke $r8.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.Buffer)>($r7);

        return;
    }

    protected abstract boolean readIdentification(org.apache.sshd.common.util.Buffer) throws java.io.IOException;

    protected java.lang.String doReadIdentification(org.apache.sshd.common.util.Buffer, boolean)
    {
        byte[] r0;
        org.apache.sshd.common.util.Buffer r1;
        int i0, $i1, $i2, $i3, i4, $i5, varReplacer1298;
        java.lang.IllegalStateException $r2, $r3, $r5;
        java.lang.String $r4, r7, varReplacer1293, varReplacer1295, varReplacer1296, varReplacer1297;
        boolean z0, $z1, z2;
        org.apache.sshd.common.session.AbstractSession r6;
        byte b6;
        null_type varReplacer1294;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.Buffer;

        z0 := @parameter1: boolean;

        r0 = newarray (byte)[256];

     label01:
        i0 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: int rpos()>();

        i4 = 0;

        z2 = 0;

     label02:
        $i5 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: int available()>();

        if $i5 != 0 goto label03;

        virtualinvoke r1.<org.apache.sshd.common.util.Buffer: void rpos(int)>(i0);

        varReplacer1294 = null;

        return varReplacer1294;

     label03:
        b6 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: byte getByte()>();

        if b6 != 13 goto label04;

        z2 = 1;

        goto label02;

     label04:
        if b6 != 10 goto label05;

        goto label08;

     label05:
        if z2 == 0 goto label06;

        $r3 = new java.lang.IllegalStateException;

        varReplacer1295 = "Incorrect identification: bad line ending";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1295);

        throw $r3;

     label06:
        $i1 = lengthof r0;

        if i4 < $i1 goto label07;

        $r2 = new java.lang.IllegalStateException;

        varReplacer1293 = "Incorrect identification: line too long";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1293);

        throw $r2;

     label07:
        $i2 = i4;

        i4 = i4 + 1;

        r0[$i2] = b6;

        goto label02;

     label08:
        $r4 = new java.lang.String;

        varReplacer1298 = 0;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r0, varReplacer1298, i4);

        r7 = $r4;

        if z0 != 0 goto label09;

        varReplacer1296 = "SSH-";

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer1296);

        if $z1 == 0 goto label10;

     label09:
        return r7;

     label10:
        $i3 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: int rpos()>();

        if $i3 <= 16384 goto label11;

        $r5 = new java.lang.IllegalStateException;

        varReplacer1297 = "Incorrect identification: too many header lines";

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer1297);

        throw $r5;

     label11:
        goto label01;
    }

    protected java.lang.String[] createProposal(java.lang.String)
    {
        java.lang.String[] $r0;
        org.apache.sshd.common.session.AbstractSession r1;
        org.apache.sshd.common.FactoryManager $r2, $r6, $r9, $r12, $r15, $r18, $r21;
        java.util.List $r3, $r7, $r10, $r13, $r16, $r19, $r22;
        java.lang.String $r4, r5, $r8, $r11, $r14, $r17, $r20, $r23;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r5 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[10];

        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r3 = interfaceinvoke $r2.<org.apache.sshd.common.FactoryManager: java.util.List getKeyExchangeFactories()>();

        $r4 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r3);

        $r0[0] = $r4;

        $r0[1] = r5;

        $r6 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r7 = interfaceinvoke $r6.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r8 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r7);

        $r0[2] = $r8;

        $r9 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r10 = interfaceinvoke $r9.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r11 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r10);

        $r0[3] = $r11;

        $r12 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r13 = interfaceinvoke $r12.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r14 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r13);

        $r0[4] = $r14;

        $r15 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r16 = interfaceinvoke $r15.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r17 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r16);

        $r0[5] = $r17;

        $r18 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r19 = interfaceinvoke $r18.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r20 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r19);

        $r0[6] = $r20;

        $r21 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r22 = interfaceinvoke $r21.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r23 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.String getNames(java.util.List)>($r22);

        $r0[7] = $r23;

        $r0[8] = "";

        $r0[9] = "";

        return $r0;
    }

    protected byte[] sendKexInit(java.lang.String[]) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;
        org.apache.sshd.common.util.Buffer r2;
        int i0, $i1, i2, i3, varReplacer1299, varReplacer1300, varReplacer1303;
        org.apache.sshd.common.Random $r3;
        byte[] $r4, r9;
        java.lang.String[] r5, r8;
        java.lang.String r7, varReplacer1301;
        long varReplacer1302;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r5 := @parameter0: java.lang.String[];

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1301 = "Send SSH_MSG_KEXINIT";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1301);

        varReplacer1300 = 20;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte)>(varReplacer1300);

        i0 = virtualinvoke r2.<org.apache.sshd.common.util.Buffer: int wpos()>();

        $i1 = i0 + 16;

        virtualinvoke r2.<org.apache.sshd.common.util.Buffer: void wpos(int)>($i1);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Random random>;

        $r4 = virtualinvoke r2.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        varReplacer1303 = 16;

        interfaceinvoke $r3.<org.apache.sshd.common.Random: void fill(byte[],int,int)>($r4, i0, varReplacer1303);

        r8 = r5;

        i2 = lengthof r8;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r7 = r8[i3];

        virtualinvoke r2.<org.apache.sshd.common.util.Buffer: void putString(java.lang.String)>(r7);

        i3 = i3 + 1;

        goto label1;

     label2:
        varReplacer1299 = 0;

        virtualinvoke r2.<org.apache.sshd.common.util.Buffer: void putByte(byte)>(varReplacer1299);

        varReplacer1302 = 0L;

        virtualinvoke r2.<org.apache.sshd.common.util.Buffer: void putInt(long)>(varReplacer1302);

        r9 = virtualinvoke r2.<org.apache.sshd.common.util.Buffer: byte[] getCompactData()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r2);

        return r9;
    }

    protected byte[] receiveKexInit(org.apache.sshd.common.util.Buffer, java.lang.String[])
    {
        org.apache.sshd.common.util.Buffer r0;
        byte[] r1, r2, r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, i11, i12, i13, varReplacer1304, varReplacer1305, varReplacer1306;
        java.lang.String[] r3;
        java.lang.String $r4, $r5;
        org.apache.sshd.common.session.AbstractSession r6;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.Buffer;

        r3 := @parameter1: java.lang.String[];

        i11 = 22;

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i0 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int available()>();

        $i1 = $i0 + 1;

        r2 = newarray (byte)[$i1];

        r2[0] = 20;

        $i2 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int rpos()>();

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        varReplacer1306 = 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i2, r2, varReplacer1306, $i4);

        $i5 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int rpos()>();

        $i6 = $i5 + 16;

        virtualinvoke r0.<org.apache.sshd.common.util.Buffer: void rpos(int)>($i6);

        i12 = 0;

     label1:
        $i7 = lengthof r3;

        if i12 >= $i7 goto label2;

        i13 = i11 + 4;

        $r4 = virtualinvoke r0.<org.apache.sshd.common.util.Buffer: java.lang.String getString()>();

        r3[i12] = $r4;

        $r5 = r3[i12];

        $i10 = virtualinvoke $r5.<java.lang.String: int length()>();

        i11 = i13 + $i10;

        i12 = i12 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.sshd.common.util.Buffer: byte getByte()>();

        virtualinvoke r0.<org.apache.sshd.common.util.Buffer: int getInt()>();

        r7 = newarray (byte)[i11];

        varReplacer1304 = 0;

        varReplacer1305 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, varReplacer1304, r7, varReplacer1304, i11);

        return r7;
    }

    protected void sendNewKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;
        org.apache.sshd.common.util.Buffer r2;
        int varReplacer1307;
        java.lang.String varReplacer1308;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1308 = "Send SSH_MSG_NEWKEYS";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer1308);

        varReplacer1307 = 21;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte)>(varReplacer1307);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r2);

        return;
    }

    protected void receiveNewKeys() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.KeyExchange $r1, $r3, $r5;
        byte[] r2, r4, $r7, $r10, r11, r12, $r13, r14, $r55, $r63, $r64, r70, r71, r72, r73, r74, r76, r77, r79;
        org.apache.sshd.common.Digest r6;
        org.apache.sshd.common.util.Buffer $r8, r9;
        int i0, $i1, $i2, i3, $i5, $i8, $i11, $i14, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, varReplacer1309, varReplacer1310, varReplacer1312, varReplacer1314, varReplacer1315, varReplacer1316, varReplacer1317, varReplacer1318, varReplacer1319, varReplacer1322, varReplacer1323;
        byte $b4, $b6, $b7, $b9, $b10, $b12, $b13, $b15, $b16, $b18;
        org.apache.sshd.common.FactoryManager $r15, $r21, $r27, $r33, $r39, $r45;
        java.util.List $r16, $r22, $r28, $r34, $r40, $r46;
        java.lang.String[] $r17, $r23, $r29, $r35, $r41, $r47;
        java.lang.String $r18, $r24, $r30, $r36, $r42, $r48;
        java.lang.Object $r19, $r25, $r31, $r37, $r43, $r49;
        org.apache.sshd.common.Cipher r20, r32, $r51, $r53;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.Mac r26, r38, $r54;
        org.apache.sshd.common.Compression r44, r50, $r52, $r56, $r58, $r60;
        long $l26, varReplacer1311, varReplacer1313, varReplacer1320, varReplacer1321;
        org.apache.sshd.common.Compression$Type $r57, $r59;
        org.apache.sshd.common.Cipher$Mode $r75, $r78;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        r2 = interfaceinvoke $r1.<org.apache.sshd.common.KeyExchange: byte[] getK()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        r4 = interfaceinvoke $r3.<org.apache.sshd.common.KeyExchange: byte[] getH()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.KeyExchange kex>;

        r6 = interfaceinvoke $r5.<org.apache.sshd.common.KeyExchange: org.apache.sshd.common.Digest getHash()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        if $r7 != null goto label1;

        $i27 = lengthof r4;

        $r63 = newarray (byte)[$i27];

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId> = $r63;

        $r64 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $i28 = lengthof r4;

        varReplacer1315 = 0;

        varReplacer1316 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, varReplacer1315, $r64, varReplacer1315, $i28);

     label1:
        $r8 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r8.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r9 = $r8;

        virtualinvoke r9.<org.apache.sshd.common.util.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r9.<org.apache.sshd.common.util.Buffer: void putRawBytes(byte[])>(r4);

        varReplacer1318 = 65;

        virtualinvoke r9.<org.apache.sshd.common.util.Buffer: void putByte(byte)>(varReplacer1318);

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        virtualinvoke r9.<org.apache.sshd.common.util.Buffer: void putRawBytes(byte[])>($r10);

        i0 = virtualinvoke r9.<org.apache.sshd.common.util.Buffer: int available()>();

        r11 = virtualinvoke r9.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        varReplacer1309 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1309, i0);

        r12 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $i1 = lengthof $r13;

        $i2 = i0 - $i1;

        i3 = $i2 - 1;

        $b4 = r11[i3];

        $i5 = $b4 + 1;

        $b6 = (byte) $i5;

        r11[i3] = $b6;

        varReplacer1317 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1317, i0);

        r14 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $b7 = r11[i3];

        $i8 = $b7 + 1;

        $b9 = (byte) $i8;

        r11[i3] = $b9;

        varReplacer1322 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1322, i0);

        r70 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $b10 = r11[i3];

        $i11 = $b10 + 1;

        $b12 = (byte) $i11;

        r11[i3] = $b12;

        varReplacer1323 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1323, i0);

        r71 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $b13 = r11[i3];

        $i14 = $b13 + 1;

        $b15 = (byte) $i14;

        r11[i3] = $b15;

        varReplacer1319 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1319, i0);

        r72 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $b16 = r11[i3];

        $i17 = $b16 + 1;

        $b18 = (byte) $i17;

        r11[i3] = $b18;

        varReplacer1310 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.Digest: void update(byte[],int,int)>(r11, varReplacer1310, i0);

        r73 = interfaceinvoke r6.<org.apache.sshd.common.Digest: byte[] digest()>();

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r16 = interfaceinvoke $r15.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r18 = $r17[3];

        $r19 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r16, $r18);

        r20 = (org.apache.sshd.common.Cipher) $r19;

        $i19 = interfaceinvoke r20.<org.apache.sshd.common.Cipher: int getBlockSize()>();

        r74 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.Digest,byte[],byte[])>(r71, $i19, r6, r2, r4);

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z0 == 0 goto label2;

        $r75 = <org.apache.sshd.common.Cipher$Mode: org.apache.sshd.common.Cipher$Mode Encrypt>;

        goto label3;

     label2:
        $r75 = <org.apache.sshd.common.Cipher$Mode: org.apache.sshd.common.Cipher$Mode Decrypt>;

     label3:
        interfaceinvoke r20.<org.apache.sshd.common.Cipher: void init(org.apache.sshd.common.Cipher$Mode,byte[],byte[])>($r75, r74, r14);

        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r22 = interfaceinvoke $r21.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r24 = $r23[5];

        $r25 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r22, $r24);

        r26 = (org.apache.sshd.common.Mac) $r25;

        $i20 = interfaceinvoke r26.<org.apache.sshd.common.Mac: int getBlockSize()>();

        r76 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.Digest,byte[],byte[])>(r73, $i20, r6, r2, r4);

        interfaceinvoke r26.<org.apache.sshd.common.Mac: void init(byte[])>(r76);

        $r27 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r28 = interfaceinvoke $r27.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r29 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r30 = $r29[2];

        $r31 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r28, $r30);

        r32 = (org.apache.sshd.common.Cipher) $r31;

        $i21 = interfaceinvoke r32.<org.apache.sshd.common.Cipher: int getBlockSize()>();

        r77 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.Digest,byte[],byte[])>(r70, $i21, r6, r2, r4);

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z1 == 0 goto label4;

        $r78 = <org.apache.sshd.common.Cipher$Mode: org.apache.sshd.common.Cipher$Mode Decrypt>;

        goto label5;

     label4:
        $r78 = <org.apache.sshd.common.Cipher$Mode: org.apache.sshd.common.Cipher$Mode Encrypt>;

     label5:
        interfaceinvoke r32.<org.apache.sshd.common.Cipher: void init(org.apache.sshd.common.Cipher$Mode,byte[],byte[])>($r78, r77, r12);

        $r33 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r34 = interfaceinvoke $r33.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r35 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r36 = $r35[4];

        $r37 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r34, $r36);

        r38 = (org.apache.sshd.common.Mac) $r37;

        $i22 = interfaceinvoke r38.<org.apache.sshd.common.Mac: int getBlockSize()>();

        r79 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.Digest,byte[],byte[])>(r72, $i22, r6, r2, r4);

        interfaceinvoke r38.<org.apache.sshd.common.Mac: void init(byte[])>(r79);

        $r39 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r40 = interfaceinvoke $r39.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r41 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r42 = $r41[7];

        $r43 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r40, $r42);

        r44 = (org.apache.sshd.common.Compression) $r43;

        $r45 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r46 = interfaceinvoke $r45.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r47 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r48 = $r47[6];

        $r49 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.List,java.lang.String)>($r46, $r48);

        r50 = (org.apache.sshd.common.Compression) $r49;

        $z2 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z2 == 0 goto label6;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher outCipher> = r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac> = r26;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression> = r44;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher> = r32;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac> = r38;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression> = r50;

        goto label7;

     label6:
        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher outCipher> = r32;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac outMac> = r38;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression> = r50;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher> = r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac> = r26;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression> = r44;

     label7:
        $r51 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher outCipher>;

        $i23 = interfaceinvoke $r51.<org.apache.sshd.common.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = $i23;

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression>;

        if $r52 == null goto label8;

        $r60 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression outCompression>;

        $r59 = <org.apache.sshd.common.Compression$Type: org.apache.sshd.common.Compression$Type Deflater>;

        varReplacer1314 = -1;

        interfaceinvoke $r60.<org.apache.sshd.common.Compression: void init(org.apache.sshd.common.Compression$Type,int)>($r59, varReplacer1314);

     label8:
        $r53 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Cipher inCipher>;

        $i24 = interfaceinvoke $r53.<org.apache.sshd.common.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = $i24;

        $r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Mac inMac>;

        $i25 = interfaceinvoke $r54.<org.apache.sshd.common.Mac: int getBlockSize()>();

        $r55 = newarray (byte)[$i25];

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult> = $r55;

        $r56 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression>;

        if $r56 == null goto label9;

        $r58 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Compression inCompression>;

        $r57 = <org.apache.sshd.common.Compression$Type: org.apache.sshd.common.Compression$Type Inflater>;

        varReplacer1312 = -1;

        interfaceinvoke $r58.<org.apache.sshd.common.Compression: void init(org.apache.sshd.common.Compression$Type,int)>($r57, varReplacer1312);

     label9:
        varReplacer1311 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long inBytes> = varReplacer1311;

        varReplacer1320 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long outBytes> = varReplacer1320;

        varReplacer1313 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long inPackets> = varReplacer1313;

        varReplacer1321 = 0L;

        r0.<org.apache.sshd.common.session.AbstractSession: long outPackets> = varReplacer1321;

        $l26 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.AbstractSession: long lastKeyTime> = $l26;

        return;
    }

    private byte[] resizeKey(byte[], int, org.apache.sshd.common.Digest, byte[], byte[]) throws java.lang.Exception
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, varReplacer1324, varReplacer1325, varReplacer1326, varReplacer1327;
        org.apache.sshd.common.util.Buffer $r0, r1;
        byte[] r2, r3, $r5, r6, r7, r9;
        org.apache.sshd.common.Digest r4;
        org.apache.sshd.common.session.AbstractSession r8;

        nop;

        r8 := @this: org.apache.sshd.common.session.AbstractSession;

        r9 := @parameter0: byte[];

        i0 := @parameter1: int;

        r4 := @parameter2: org.apache.sshd.common.Digest;

        r2 := @parameter3: byte[];

        r3 := @parameter4: byte[];

     label1:
        $i1 = lengthof r9;

        if i0 <= $i1 goto label2;

        $r0 = new org.apache.sshd.common.util.Buffer;

        specialinvoke $r0.<org.apache.sshd.common.util.Buffer: void <init>()>();

        r1 = $r0;

        virtualinvoke r1.<org.apache.sshd.common.util.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r1.<org.apache.sshd.common.util.Buffer: void putRawBytes(byte[])>(r3);

        virtualinvoke r1.<org.apache.sshd.common.util.Buffer: void putRawBytes(byte[])>(r9);

        $r5 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: byte[] array()>();

        $i2 = virtualinvoke r1.<org.apache.sshd.common.util.Buffer: int available()>();

        varReplacer1324 = 0;

        interfaceinvoke r4.<org.apache.sshd.common.Digest: void update(byte[],int,int)>($r5, varReplacer1324, $i2);

        r6 = interfaceinvoke r4.<org.apache.sshd.common.Digest: byte[] digest()>();

        $i4 = lengthof r9;

        $i3 = lengthof r6;

        $i5 = $i4 + $i3;

        r7 = newarray (byte)[$i5];

        $i6 = lengthof r9;

        varReplacer1326 = 0;

        varReplacer1327 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, varReplacer1326, r7, varReplacer1326, $i6);

        $i8 = lengthof r9;

        $i7 = lengthof r6;

        varReplacer1325 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, varReplacer1325, r7, $i8, $i7);

        r9 = r7;

        goto label1;

     label2:
        return r9;
    }

    public void disconnect(int, java.lang.String) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, varReplacer1328, varReplacer1329;
        org.slf4j.Logger $r2;
        org.apache.sshd.common.util.Buffer r3;
        int i0, varReplacer1330;
        long $l1, $l2;
        java.util.concurrent.TimeUnit $r4;
        org.apache.sshd.common.io.IoWriteFuture $r5;
        org.apache.sshd.common.session.AbstractSession$3 $r6;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1329 = "Disconnecting: {}";

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>(varReplacer1329, r1);

        varReplacer1330 = 1;

        r3 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte)>(varReplacer1330);

        $l1 = (long) i0;

        virtualinvoke r3.<org.apache.sshd.common.util.Buffer: void putInt(long)>($l1);

        virtualinvoke r3.<org.apache.sshd.common.util.Buffer: void putString(java.lang.String)>(r1);

        varReplacer1328 = "";

        virtualinvoke r3.<org.apache.sshd.common.util.Buffer: void putString(java.lang.String)>(varReplacer1328);

        $l2 = r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer,long,java.util.concurrent.TimeUnit)>(r3, $l2, $r4);

        $r6 = new org.apache.sshd.common.session.AbstractSession$3;

        specialinvoke $r6.<org.apache.sshd.common.session.AbstractSession$3: void <init>(org.apache.sshd.common.session.AbstractSession)>(r0);

        interfaceinvoke $r5.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r6);

        return;
    }

    protected void notImplemented() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.Buffer r1;
        long $l0, $l1;
        int varReplacer1331;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer1331 = 3;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Buffer createBuffer(byte)>(varReplacer1331);

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l1 = $l0 - 1L;

        virtualinvoke r1.<org.apache.sshd.common.util.Buffer: void putInt(long)>($l1);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.Buffer)>(r1);

        return;
    }

    protected void negotiate()
    {
        java.lang.String[] r0, $r3, $r5, $r7, $r11, $r13, $r15, $r18, $r20, $r22, r24, r25, r52, r55;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.Object[] $r2, $r10;
        java.lang.String $r4, $r6, $r8, $r12, $r14, $r16, r19, r21, r23, $r26, $r33, $r39, r51, $r53, r54, r56, varReplacer1332, varReplacer1333, varReplacer1334, varReplacer1335, varReplacer1336, varReplacer1337, varReplacer1338, varReplacer1339, varReplacer1340, varReplacer1341, varReplacer1342, varReplacer1343;
        org.slf4j.Logger $r9, $r17, $r27, $r29, $r48, $r49;
        int i0, i1, i2, i3, i4;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r28, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47;
        java.lang.IllegalStateException $r50;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 = newarray (java.lang.String)[10];

        i2 = 0;

     label01:
        if i2 >= 10 goto label12;

        $r18 = <org.apache.sshd.common.SshConstants: java.lang.String[] PROPOSAL_KEX_NAMES>;

        r19 = $r18[i2];

        $r20 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] clientProposal>;

        r21 = $r20[i2];

        $r22 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] serverProposal>;

        r23 = $r22[i2];

        varReplacer1340 = ",";

        r24 = virtualinvoke r21.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1340);

        varReplacer1341 = ",";

        r25 = virtualinvoke r23.<java.lang.String: java.lang.String[] split(java.lang.String)>(varReplacer1341);

        r55 = r24;

        i0 = lengthof r55;

        i3 = 0;

     label02:
        if i3 >= i0 goto label07;

        r51 = r55[i3];

        r52 = r25;

        i1 = lengthof r52;

        i4 = 0;

     label03:
        if i4 >= i1 goto label05;

        r54 = r52[i4];

        $z2 = virtualinvoke r51.<java.lang.String: boolean equals(java.lang.Object)>(r54);

        if $z2 == 0 goto label04;

        r0[i2] = r51;

        goto label05;

     label04:
        i4 = i4 + 1;

        goto label03;

     label05:
        $r53 = r0[i2];

        if $r53 == null goto label06;

        goto label07;

     label06:
        i3 = i3 + 1;

        goto label02;

     label07:
        $r26 = r0[i2];

        if $r26 != null goto label10;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        varReplacer1338 = "Unable to negotiate key exchange for ";

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1338);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        varReplacer1332 = " (client: ";

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1332);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        varReplacer1336 = " / server: ";

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1336);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        varReplacer1339 = ")";

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1339);

        r56 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        if i2 == 8 goto label08;

        if i2 == 9 goto label08;

        $r50 = new java.lang.IllegalStateException;

        specialinvoke $r50.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r56);

        throw $r50;

     label08:
        $r48 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r48.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label09;

        $r49 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        interfaceinvoke $r49.<org.slf4j.Logger: void trace(java.lang.String)>(r56);

     label09:
        goto label11;

     label10:
        $r27 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r27.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label11;

        $r29 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        varReplacer1343 = "Kex: negotiate(";

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1343);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        varReplacer1333 = ") guess=";

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1333);

        $r33 = r0[i2];

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        varReplacer1334 = " (client: ";

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1334);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        varReplacer1335 = " / server: ";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1335);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void trace(java.lang.String)>($r39);

     label11:
        i2 = i2 + 1;

        goto label01;

     label12:
        r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated> = r0;

        $r9 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r4 = $r3[3];

        $r2[0] = $r4;

        $r5 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r6 = $r5[5];

        $r2[1] = $r6;

        $r7 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r8 = $r7[7];

        $r2[2] = $r8;

        varReplacer1337 = "Kex: server->client {} {} {}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer1337, $r2);

        $r17 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r10 = newarray (java.lang.Object)[3];

        $r11 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r12 = $r11[2];

        $r10[0] = $r12;

        $r13 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r14 = $r13[4];

        $r10[1] = $r14;

        $r15 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String[] negotiated>;

        $r16 = $r15[6];

        $r10[2] = $r16;

        varReplacer1342 = "Kex: client->server {} {} {}";

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer1342, $r10);

        return;
    }

    protected void requestSuccess(org.apache.sshd.common.util.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r5, $r7;
        org.apache.sshd.common.util.Buffer $r3, r4;
        byte[] $r6;
        java.lang.Throwable $r8, r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r3 = new org.apache.sshd.common.util.Buffer;

        $r6 = virtualinvoke r4.<org.apache.sshd.common.util.Buffer: byte[] getCompactData()>();

        specialinvoke $r3.<org.apache.sshd.common.util.Buffer: void <init>(byte[])>($r6);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r9 = $r8;

        exitmonitor r2;

     label4:
        throw r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void requestFailure(org.apache.sshd.common.util.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r3, $r4;
        java.lang.Throwable $r5, r6;
        org.apache.sshd.common.util.Buffer r7;
        null_type varReplacer1344;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r7 := @parameter0: org.apache.sshd.common.util.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        varReplacer1344 = null;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(varReplacer1344);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r4.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        exitmonitor r2;

     label4:
        throw r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getIntProperty(java.lang.String, int)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;
        java.util.Map $r2;
        java.lang.String r3, r6;
        java.lang.Object $r4;
        int i0, $i1;
        java.lang.Exception $r5, r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r2 = interfaceinvoke $r1.<org.apache.sshd.common.FactoryManager: java.util.Map getProperties()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.lang.String) $r4;

        if r6 == null goto label3;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6);

     label2:
        return $i1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

     label5:
        return i0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public long getLongProperty(java.lang.String, long)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;
        java.util.Map $r2;
        java.lang.String r3, r6;
        java.lang.Object $r4;
        long l0, $l1;
        java.lang.Exception $r5, r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r2 = interfaceinvoke $r1.<org.apache.sshd.common.FactoryManager: java.util.Map getProperties()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r6 = (java.lang.String) $r4;

        if r6 == null goto label3;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

     label2:
        return $l1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

     label5:
        return l0;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    public java.lang.Object getAttribute(org.apache.sshd.common.Session$AttributeKey)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Session$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.Session$AttributeKey;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object setAttribute(org.apache.sshd.common.Session$AttributeKey, java.lang.Object)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Session$AttributeKey r1;
        java.lang.Object r2, $r4;
        java.util.Map $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.Session$AttributeKey;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.String getUsername()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username>;

        return $r1;
    }

    public java.lang.Object getLock()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        return $r1;
    }

    public void addListener(org.apache.sshd.common.SessionListener)
    {
        org.apache.sshd.common.SessionListener r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.util.List $r2;
        java.lang.IllegalArgumentException $r3;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.SessionListener;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void removeListener(org.apache.sshd.common.SessionListener)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.SessionListener r1;
        java.util.List $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.SessionListener;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void sendEvent(org.apache.sshd.common.SessionListener$Event) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.SessionListener$Event r1;
        org.apache.sshd.common.SessionListener $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.SessionListener$Event;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.SessionListener sessionListenerProxy>;

        interfaceinvoke $r2.<org.apache.sshd.common.SessionListener: void sessionEvent(org.apache.sshd.common.Session,org.apache.sshd.common.SessionListener$Event)>(r0, r1);

        return;
    }

    public org.apache.sshd.common.future.SshFuture reExchangeKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        boolean $z0;
        org.apache.sshd.common.future.DefaultSshFuture $r2, $r4;
        org.slf4j.Logger $r3;
        java.lang.String varReplacer1345;
        null_type varReplacer1346;
        int varReplacer1347, varReplacer1348;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicInteger kexState>;

        varReplacer1347 = 4;

        varReplacer1348 = 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(varReplacer1347, varReplacer1348);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer1345 = "Initiating key re-exchange";

        interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>(varReplacer1345);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendKexInit()>();

        $r4 = new org.apache.sshd.common.future.DefaultSshFuture;

        varReplacer1346 = null;

        specialinvoke $r4.<org.apache.sshd.common.future.DefaultSshFuture: void <init>(java.lang.Object)>(varReplacer1346);

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture> = $r4;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        return $r2;
    }

    protected void checkRekey() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        return;
    }

    protected abstract void sendKexInit() throws java.io.IOException;

    protected abstract void checkKeys() throws java.io.IOException;

    protected abstract void receiveKexInit(org.apache.sshd.common.util.Buffer) throws java.io.IOException;

    protected void serviceAccept() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        return;
    }

    public abstract void startService(java.lang.String) throws java.lang.Exception;

    protected void checkForTimeouts() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0, $z1;
        long l0, $l1, $l3, $l5, $l6, $l8, $l10, $l11;
        byte $b2, $b4, $b7, $b9, $b12;
        org.apache.sshd.common.Session$TimeoutStatus $r1, $r8;
        java.util.concurrent.atomic.AtomicReference $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13;
        java.lang.String $r7, $r14, varReplacer1349, varReplacer1350, varReplacer1352, varReplacer1353;
        int varReplacer1351, varReplacer1354;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isClosing()>();

        if $z0 != 0 goto label2;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label1;

        $l6 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $b7 = $l6 cmp 0L;

        if $b7 <= 0 goto label1;

        $l8 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutTimestamp>;

        $b9 = l0 cmp $l8;

        if $b9 <= 0 goto label1;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r8 = <org.apache.sshd.common.Session$TimeoutStatus: org.apache.sshd.common.Session$TimeoutStatus AuthTimeout>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r8);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        varReplacer1350 = "Session has timed out waiting for authentication after ";

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1350);

        $l10 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        varReplacer1353 = " ms.";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1353);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1351 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer1351, $r14);

     label1:
        $l11 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $b12 = $l11 cmp 0L;

        if $b12 <= 0 goto label2;

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp>;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r1 = <org.apache.sshd.common.Session$TimeoutStatus: org.apache.sshd.common.Session$TimeoutStatus AuthTimeout>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer1349 = "User session has timed out idling after ";

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1349);

        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        varReplacer1352 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1352);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer1354 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer1354, $r7);

     label2:
        return;
    }

    public void resetIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l1, $l2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $l2 = $l0 + $l1;

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp> = $l2;

        return;
    }

    public org.apache.sshd.common.Session$TimeoutStatus getTimeoutStatus()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.Session$TimeoutStatus $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (org.apache.sshd.common.Session$TimeoutStatus) $r2;

        return $r3;
    }

    public long getAuthTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        return $l0;
    }

    public long getIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        return $l0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r11, $r12;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r13, varReplacer1355, varReplacer1356, varReplacer1357;
        org.apache.sshd.common.io.IoSession $r9;
        java.net.SocketAddress $r10;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer1357 = "[";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1357);

        $r6 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String getUsername()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer1356 = "@";

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1356);

        $r9 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession getIoSession()>();

        $r10 = interfaceinvoke $r9.<org.apache.sshd.common.io.IoSession: java.net.SocketAddress getRemoteAddress()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        varReplacer1355 = "]";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer1355);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static org.slf4j.Logger access$000(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        nop;

        $r0 = class "Lorg/apache/sshd/common/session/AbstractSession;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled> = $z1;

        return;
    }
}
