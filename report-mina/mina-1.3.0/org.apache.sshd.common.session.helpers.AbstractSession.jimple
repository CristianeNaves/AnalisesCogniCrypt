public abstract class org.apache.sshd.common.session.helpers.AbstractSession extends org.apache.sshd.common.kex.AbstractKexFactoryManager implements org.apache.sshd.common.session.Session
{
    public static final java.lang.String SESSION;
    protected final boolean isServer;
    protected final org.apache.sshd.common.io.IoSession ioSession;
    protected final org.apache.sshd.common.random.Random random;
    protected boolean authed;
    protected java.lang.String username;
    protected final java.util.Collection sessionListeners;
    protected final org.apache.sshd.common.session.SessionListener sessionListenerProxy;
    protected final java.util.Collection channelListeners;
    protected final org.apache.sshd.common.channel.ChannelListener channelListenerProxy;
    protected final java.util.Collection tunnelListeners;
    protected final org.apache.sshd.common.forward.PortForwardingEventListener tunnelListenerProxy;
    protected byte[] sessionId;
    protected java.lang.String serverVersion;
    protected java.lang.String clientVersion;
    protected final java.util.Map serverProposal;
    protected final java.util.Map clientProposal;
    protected final java.util.Map negotiationResult;
    protected byte[] i_c;
    protected byte[] i_s;
    protected org.apache.sshd.common.kex.KeyExchange kex;
    protected java.lang.Boolean firstKexPacketFollows;
    protected final java.util.concurrent.atomic.AtomicReference kexState;
    protected final java.util.concurrent.atomic.AtomicReference kexFutureHolder;
    protected org.apache.sshd.common.cipher.Cipher outCipher;
    protected org.apache.sshd.common.cipher.Cipher inCipher;
    protected int outCipherSize;
    protected int inCipherSize;
    protected org.apache.sshd.common.mac.Mac outMac;
    protected org.apache.sshd.common.mac.Mac inMac;
    protected byte[] inMacResult;
    protected org.apache.sshd.common.compression.Compression outCompression;
    protected org.apache.sshd.common.compression.Compression inCompression;
    protected long seqi;
    protected long seqo;
    protected org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer;
    protected final org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer;
    protected int decoderState;
    protected int decoderLength;
    protected final java.lang.Object encodeLock;
    protected final java.lang.Object decodeLock;
    protected final java.lang.Object requestLock;
    protected long authTimeoutStart;
    protected long idleTimeoutStart;
    protected final java.util.concurrent.atomic.AtomicReference timeoutStatus;
    protected final java.util.concurrent.atomic.AtomicLong inPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong outPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong inBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong outBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong inBlocksCount;
    protected final java.util.concurrent.atomic.AtomicLong outBlocksCount;
    protected final java.util.concurrent.atomic.AtomicLong lastKeyTimeValue;
    protected long maxRekyPackets;
    protected long maxRekeyBytes;
    protected long maxRekeyInterval;
    protected final java.util.Queue pendingPackets;
    protected org.apache.sshd.common.Service currentService;
    protected int ignorePacketDataLength;
    protected long ignorePacketsFrequency;
    protected int ignorePacketsVariance;
    protected final java.util.concurrent.atomic.AtomicLong maxRekeyBlocks;
    protected final java.util.concurrent.atomic.AtomicLong ignorePacketsCount;
    private final org.apache.sshd.common.FactoryManager factoryManager;
    private final java.util.Map properties;
    private final java.util.concurrent.atomic.AtomicReference requestResult;
    private final java.util.Map attributes;
    private org.apache.sshd.common.session.ReservedSessionMessagesHandler reservedSessionMessagesHandler;
    static final boolean $assertionsDisabled;

    protected void <init>(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.FactoryManager r1;
        java.lang.Object $r2, $r13, $r14, $r15, $r34, $r36, $r37;
        org.apache.sshd.common.kex.KexFactoryManager $r3;
        java.util.Set $r4, $r5, $r6;
        java.util.EnumMap $r7, $r8, $r9;
        java.util.concurrent.atomic.AtomicReference $r10, $r12, $r16, $r29;
        org.apache.sshd.common.kex.KexState $r11;
        long $l0, $l1, varReplacer4075, varReplacer4078, varReplacer4079, varReplacer4080, varReplacer4081, varReplacer4082, varReplacer4083, varReplacer4084, varReplacer4085, varReplacer4090, varReplacer4092, varReplacer4093, varReplacer4094;
        org.apache.sshd.common.session.Session$TimeoutStatus $r17;
        java.util.concurrent.atomic.AtomicLong $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27;
        java.util.LinkedList $r25;
        java.util.concurrent.ConcurrentHashMap $r28, $r30;
        boolean z0;
        org.apache.sshd.common.io.IoSession r31;
        org.apache.sshd.common.session.SessionWorkBuffer $r32;
        org.apache.sshd.common.Factory $r33, r35;
        org.apache.sshd.common.random.Random $r38;
        java.lang.Class $r39;
        java.lang.ClassLoader r40;
        java.util.Collection $r41, $r44, $r47;
        java.util.EventListener $r42, $r45, $r48;
        org.apache.sshd.common.session.SessionListener $r43, $r50;
        org.apache.sshd.common.channel.ChannelListener $r46, $r51;
        org.apache.sshd.common.forward.PortForwardingEventListener $r49, $r52;
        null_type varReplacer4074;
        java.lang.String varReplacer4076, varReplacer4077, varReplacer4087;
        int varReplacer4086, varReplacer4088, varReplacer4089, varReplacer4091;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.sshd.common.FactoryManager;

        r31 := @parameter2: org.apache.sshd.common.io.IoSession;

        varReplacer4077 = "No factory manager provided";

        $r2 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, varReplacer4077);

        $r3 = (org.apache.sshd.common.kex.KexFactoryManager) $r2;

        specialinvoke r0.<org.apache.sshd.common.kex.AbstractKexFactoryManager: void <init>(org.apache.sshd.common.kex.KexFactoryManager)>($r3);

        $r4 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.Set synchronizedListenersSet()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners> = $r4;

        $r5 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.Set synchronizedListenersSet()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners> = $r5;

        $r6 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.Set synchronizedListenersSet()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection tunnelListeners> = $r6;

        $r7 = new java.util.EnumMap;

        specialinvoke $r7.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map serverProposal> = $r7;

        $r8 = new java.util.EnumMap;

        specialinvoke $r8.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map clientProposal> = $r8;

        $r9 = new java.util.EnumMap;

        specialinvoke $r9.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult> = $r9;

        $r10 = new java.util.concurrent.atomic.AtomicReference;

        $r11 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState UNKNOWN>;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r11);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState> = $r10;

        $r12 = new java.util.concurrent.atomic.AtomicReference;

        varReplacer4074 = null;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(varReplacer4074);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder> = $r12;

        varReplacer4086 = 8;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int outCipherSize> = varReplacer4086;

        varReplacer4088 = 8;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize> = varReplacer4088;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object encodeLock> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object decodeLock> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object requestLock> = $r15;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long authTimeoutStart> = $l0;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long idleTimeoutStart> = $l1;

        $r16 = new java.util.concurrent.atomic.AtomicReference;

        $r17 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r17);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus> = $r16;

        $r18 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4093 = 0L;

        specialinvoke $r18.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4093);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount> = $r18;

        $r19 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4082 = 0L;

        specialinvoke $r19.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4082);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4078 = 0L;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4078);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount> = $r20;

        $r21 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4079 = 0L;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4079);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount> = $r21;

        $r22 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4092 = 0L;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4092);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount> = $r22;

        $r23 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4084 = 0L;

        specialinvoke $r23.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4084);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount> = $r23;

        $r24 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4094 = 0L;

        specialinvoke $r24.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4094);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue> = $r24;

        varReplacer4085 = 2147483648L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets> = varReplacer4085;

        varReplacer4075 = 1073741824L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes> = varReplacer4075;

        varReplacer4090 = 3600000L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval> = varReplacer4090;

        $r25 = new java.util.LinkedList;

        specialinvoke $r25.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets> = $r25;

        varReplacer4091 = 16;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketDataLength> = varReplacer4091;

        varReplacer4083 = 1024L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency> = varReplacer4083;

        varReplacer4089 = 32;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance> = varReplacer4089;

        $r26 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4080 = 67108864L;

        specialinvoke $r26.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4080);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks> = $r26;

        $r27 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer4081 = 1024L;

        specialinvoke $r27.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer4081);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount> = $r27;

        $r28 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r28.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map properties> = $r28;

        $r29 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r29.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult> = $r29;

        $r30 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r30.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map attributes> = $r30;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isServer> = z0;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager> = r1;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession> = r31;

        $r32 = new org.apache.sshd.common.session.SessionWorkBuffer;

        specialinvoke $r32.<org.apache.sshd.common.session.SessionWorkBuffer: void <init>(org.apache.sshd.common.session.Session)>(r0);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer> = $r32;

        $r33 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.Factory getRandomFactory()>();

        varReplacer4087 = "No random factory for %s";

        $r34 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r33, varReplacer4087, r31);

        r35 = (org.apache.sshd.common.Factory) $r34;

        $r36 = interfaceinvoke r35.<org.apache.sshd.common.Factory: java.lang.Object create()>();

        varReplacer4076 = "No randomizer instance for %s";

        $r37 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r36, varReplacer4076, r31);

        $r38 = (org.apache.sshd.common.random.Random) $r37;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random> = $r38;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void refreshConfiguration()>();

        $r39 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r40 = virtualinvoke $r39.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r41 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        $r42 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/session/SessionListener;", r40, $r41);

        $r43 = (org.apache.sshd.common.session.SessionListener) $r42;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy> = $r43;

        $r44 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        $r45 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/channel/ChannelListener;", r40, $r44);

        $r46 = (org.apache.sshd.common.channel.ChannelListener) $r45;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.channel.ChannelListener channelListenerProxy> = $r46;

        $r47 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection tunnelListeners>;

        $r48 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/forward/PortForwardingEventListener;", r40, $r47);

        $r49 = (org.apache.sshd.common.forward.PortForwardingEventListener) $r48;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.forward.PortForwardingEventListener tunnelListenerProxy> = $r49;

        $r50 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void addSessionListener(org.apache.sshd.common.session.SessionListener)>($r50);

        $r51 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.channel.ChannelListener getChannelListenerProxy()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void addChannelListener(org.apache.sshd.common.channel.ChannelListener)>($r51);

        $r52 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.forward.PortForwardingEventListener getPortForwardingEventListenerProxy()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)>($r52);

        return;
    }

    public static org.apache.sshd.common.session.helpers.AbstractSession getSession(org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.helpers.AbstractSession $r1;
        int varReplacer4095;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        varReplacer4095 = 0;

        $r1 = staticinvoke <org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.helpers.AbstractSession getSession(org.apache.sshd.common.io.IoSession,boolean)>(r0, varReplacer4095);

        return $r1;
    }

    public static org.apache.sshd.common.session.helpers.AbstractSession getSession(org.apache.sshd.common.io.IoSession, boolean)
    {
        org.apache.sshd.common.io.IoSession r0;
        java.lang.Object $r1;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        boolean z0;
        java.lang.IllegalStateException $r3;
        java.lang.String varReplacer4096, varReplacer4097;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        z0 := @parameter1: boolean;

        varReplacer4096 = "org.apache.sshd.session";

        $r1 = interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object getAttribute(java.lang.Object)>(varReplacer4096);

        r2 = (org.apache.sshd.common.session.helpers.AbstractSession) $r1;

        if r2 != null goto label1;

        if z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        varReplacer4097 = "No session available";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer4097);

        throw $r3;

     label1:
        return r2;
    }

    public static void attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.helpers.AbstractSession)
    {
        org.apache.sshd.common.io.IoSession r0, $r3;
        java.lang.Object $r1, $r4;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        java.lang.String varReplacer4098, varReplacer4099, varReplacer4100;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        r2 := @parameter1: org.apache.sshd.common.session.helpers.AbstractSession;

        varReplacer4100 = "No I/O session";

        $r1 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, varReplacer4100);

        $r3 = (org.apache.sshd.common.io.IoSession) $r1;

        varReplacer4098 = "No SSH session";

        $r4 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, varReplacer4098);

        varReplacer4099 = "org.apache.sshd.session";

        interfaceinvoke $r3.<org.apache.sshd.common.io.IoSession: java.lang.Object setAttribute(java.lang.Object,java.lang.Object)>(varReplacer4099, $r4);

        return;
    }

    public java.lang.String getServerVersion()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String serverVersion>;

        return $r1;
    }

    public java.lang.String getClientVersion()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String clientVersion>;

        return $r1;
    }

    public org.apache.sshd.common.kex.KeyExchange getKex()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        return $r1;
    }

    public byte[] getSessionId()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        byte[] $r1, $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        $z0 = staticinvoke <org.apache.sshd.common.util.NumberUtils: boolean isEmpty(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

     label2:
        return $r4;
    }

    public org.apache.sshd.common.io.IoSession getIoSession()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.io.IoSession $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        return $r1;
    }

    protected java.net.SocketAddress resolvePeerAddress(java.net.SocketAddress)
    {
        java.net.SocketAddress r0, $r3;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        org.apache.sshd.common.io.IoSession r2;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: java.net.SocketAddress;

        if r0 == null goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession getIoSession()>();

        if r2 != null goto label2;

        $r3 = null;

        goto label3;

     label2:
        $r3 = interfaceinvoke r2.<org.apache.sshd.common.io.IoSession: java.net.SocketAddress getRemoteAddress()>();

     label3:
        return $r3;
    }

    public org.apache.sshd.common.FactoryManager getFactoryManager()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        return $r1;
    }

    public org.apache.sshd.common.PropertyResolver getParentPropertyResolver()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        return $r1;
    }

    public java.util.Map getProperties()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.Map $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map properties>;

        return $r1;
    }

    public java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)
    {
        org.apache.sshd.common.kex.KexProposalOption r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        java.util.Map $r2, r3, $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7, r8;
        null_type varReplacer4101;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.kex.KexProposalOption;

        if r0 != null goto label1;

        varReplacer4101 = null;

        return varReplacer4101;

     label1:
        $r2 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        r3 = $r2;

        entermonitor $r2;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (java.lang.String) $r5;

        exitmonitor r3;

     label3:
        return $r6;

     label4:
        $r7 := @caughtexception;

        r8 = $r7;

        exitmonitor r3;

     label5:
        throw r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.sshd.common.cipher.CipherInformation getCipherInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.cipher.Cipher $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

     label2:
        return $r1;
    }

    public org.apache.sshd.common.compression.CompressionInformation getCompressionInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.compression.Compression $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

     label2:
        return $r1;
    }

    public org.apache.sshd.common.mac.MacInformation getMacInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.mac.Mac $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

     label2:
        return $r1;
    }

    public boolean isAuthenticated()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $z0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean authed>;

        return $z0;
    }

    public void setAuthenticated() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener$Event $r1;
        int varReplacer4102;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        varReplacer4102 = 1;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean authed> = varReplacer4102;

        $r1 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event Authenticated>;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r1);

        return;
    }

    public void messageReceived(org.apache.sshd.common.util.Readable) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Readable r3;
        org.apache.sshd.common.session.SessionWorkBuffer $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;
        java.lang.Throwable $r9, r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Readable;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object decodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        virtualinvoke $r4.<org.apache.sshd.common.session.SessionWorkBuffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r3);

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String clientVersion>;

        if $r5 == null goto label2;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String serverVersion>;

        if $r8 != null goto label5;

     label2:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        virtualinvoke $r7.<org.apache.sshd.common.session.SessionWorkBuffer: void compact()>();

        goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void decode()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r10 = $r9;

        exitmonitor r2;

     label8:
        throw r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void refreshConfiguration()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.random.Random $r1, r2, $r3;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7, $l10, $l11, $l14, $l15, varReplacer4105;
        int $i6, $i8, $i9, $i13, varReplacer4109, varReplacer4110, varReplacer4112;
        byte $b12;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.lang.Throwable $r5, r6;
        java.lang.String varReplacer4103, varReplacer4104, varReplacer4106, varReplacer4107, varReplacer4108, varReplacer4111;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $l0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes>;

        varReplacer4106 = "rekey-bytes-limit";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4106, $l0);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes> = $l1;

        $l2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval>;

        varReplacer4103 = "rekey-time-limit";

        $l3 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4103, $l2);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval> = $l3;

        $l4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets>;

        varReplacer4107 = "rekey-packets-limit";

        $l5 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4107, $l4);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets> = $l5;

        varReplacer4111 = "ignore-message-size";

        varReplacer4112 = 16;

        $i6 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)>(r0, varReplacer4111, varReplacer4112);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketDataLength> = $i6;

        varReplacer4104 = "ignore-message-frequency";

        varReplacer4105 = 1024L;

        $l7 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4104, varReplacer4105);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency> = $l7;

        varReplacer4108 = "ignore-message-variance";

        varReplacer4109 = 32;

        $i8 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)>(r0, varReplacer4108, varReplacer4109);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance> = $i8;

        $i9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance>;

        $l11 = (long) $i9;

        $l10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency>;

        $b12 = $l11 cmp $l10;

        if $b12 < 0 goto label2;

        varReplacer4110 = 0;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance> = varReplacer4110;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $l14 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency>;

        $i13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance>;

        $l15 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)>($r3, $l14, $i13);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l15);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

        exitmonitor r2;

     label5:
        throw r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void handleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.Object $r1, $r8, r12, r14;
        org.apache.sshd.common.util.buffer.Buffer r2;
        java.lang.Throwable $r3, r4, $r6, $r13, r15, r16;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r5, r17;
        java.util.concurrent.atomic.AtomicReference $r7;
        boolean $z0;
        org.apache.sshd.common.RuntimeSshException $r9;
        java.lang.Exception $r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

     label01:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object lock>;

        r14 = $r1;

        entermonitor $r1;

     label02:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        exitmonitor r14;

     label03:
        goto label06;

     label04:
        $r13 := @caughtexception;

        r15 = $r13;

        exitmonitor r14;

     label05:
        throw r15;

     label06:
        goto label15;

     label07:
        $r6 := @caughtexception;

        r16 = $r6;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r17 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r8;

        if r17 == null goto label13;

        r5 = r17;

        entermonitor r17;

     label08:
        r12 = virtualinvoke r17.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r12 != null goto label09;

        virtualinvoke r17.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>(r16);

     label09:
        exitmonitor r5;

     label10:
        goto label13;

     label11:
        $r3 := @caughtexception;

        r4 = $r3;

        exitmonitor r5;

     label12:
        throw r4;

     label13:
        $z0 = r16 instanceof java.lang.Exception;

        if $z0 == 0 goto label14;

        $r10 = (java.lang.Exception) r16;

        throw $r10;

     label14:
        $r9 = new org.apache.sshd.common.RuntimeSshException;

        specialinvoke $r9.<org.apache.sshd.common.RuntimeSshException: void <init>(java.lang.Throwable)>(r16);

        throw $r9;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        int i0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        org.slf4j.Logger $r2, $r14;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.Service $r4, $r11;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r8, $r10, $r15, varReplacer4115, varReplacer4116;
        java.lang.Boolean $r12, $r13;
        java.lang.Throwable $r16, r17;
        null_type varReplacer4113, varReplacer4114, varReplacer4117;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int getUByte()>();

        $r2 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label01;

        $r14 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r15 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        varReplacer4116 = "doHandleMessage({}) process {}";

        interfaceinvoke $r14.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4116, r1, $r15);

     label01:
        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label10;
            case 10: goto label10;
            case 11: goto label10;
            case 12: goto label10;
            case 13: goto label10;
            case 14: goto label10;
            case 15: goto label10;
            case 16: goto label10;
            case 17: goto label10;
            case 18: goto label10;
            case 19: goto label10;
            case 20: goto label08;
            case 21: goto label09;
            default: goto label10;
        };

     label02:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label03:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleIgnore(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label04:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label05:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleDebug(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label06:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label07:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label08:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label09:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        goto label18;

     label10:
        if i0 < 30 goto label16;

        if i0 > 49 goto label16;

        $r12 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        if $r12 == null goto label15;

     label11:
        $r13 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        $z2 = virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: boolean handleFirstKexPacketFollows(int,org.apache.sshd.common.util.buffer.Buffer,boolean)>(i0, r0, $z1);

        if $z2 != 0 goto label13;

     label12:
        varReplacer4114 = null;

        r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer4114;

        goto label18;

     label13:
        varReplacer4113 = null;

        r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer4113;

        goto label15;

     label14:
        $r16 := @caughtexception;

        r17 = $r16;

        varReplacer4117 = null;

        r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer4117;

        throw r17;

     label15:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        goto label18;

     label16:
        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r4 == null goto label17;

        $r11 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.Service currentService>;

        interfaceinvoke $r11.<org.apache.sshd.common.Service: void process(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: void resetIdleTimeout()>();

        goto label18;

     label17:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer4115 = "Unsupported command ";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4115);

        $r8 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label18:
        virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.KeyExchangeFuture checkRekey()>();

        return;

        catch java.lang.Throwable from label11 to label12 with label14;
    }

    protected boolean handleFirstKexPacketFollows(int, org.apache.sshd.common.util.buffer.Buffer, boolean)
    {
        boolean z0, $z1;
        org.apache.sshd.common.kex.KexProposalOption[] $r0, r3;
        org.apache.sshd.common.kex.KexProposalOption $r1, $r2, r4;
        int i0, i1, i2, varReplacer4118, varReplacer4119, varReplacer4120;
        org.apache.sshd.common.session.helpers.AbstractSession r5;
        org.apache.sshd.common.util.Pair r6;
        org.slf4j.Logger $r7, $r9;
        java.lang.Object[] $r8;
        java.lang.String $r10, varReplacer4121;
        java.lang.Object $r11, $r12;
        org.apache.sshd.common.util.buffer.Buffer r13;

        nop;

        r5 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i1 := @parameter0: int;

        r13 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        varReplacer4120 = 1;

        return varReplacer4120;

     label1:
        $r0 = newarray (org.apache.sshd.common.kex.KexProposalOption)[2];

        $r1 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r0[0] = $r1;

        $r2 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption SERVERKEYS>;

        $r0[1] = $r2;

        r3 = $r0;

        i0 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r4 = r3[i2];

        r6 = virtualinvoke r5.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.Pair comparePreferredKexProposalOption(org.apache.sshd.common.kex.KexProposalOption)>(r4);

        if r6 == null goto label4;

        $r7 = r5.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r9 = r5.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = r5;

        $r10 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i1);

        $r8[1] = $r10;

        $r8[2] = r4;

        $r11 = virtualinvoke r6.<org.apache.sshd.common.util.Pair: java.lang.Object getFirst()>();

        $r8[3] = $r11;

        $r12 = virtualinvoke r6.<org.apache.sshd.common.util.Pair: java.lang.Object getSecond()>();

        $r8[4] = $r12;

        varReplacer4121 = "handleFirstKexPacketFollows({})[{}] 1st follow KEX packet {} option mismatch: client={}, server={}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4121, $r8);

     label3:
        varReplacer4119 = 0;

        return varReplacer4119;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        varReplacer4118 = 1;

        return varReplacer4118;
    }

    protected org.apache.sshd.common.util.Pair comparePreferredKexProposalOption(org.apache.sshd.common.kex.KexProposalOption)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.kex.KexProposalOption r1;
        java.util.Map $r2, $r7;
        java.lang.Object $r3, $r8;
        java.lang.String $r4, r6, $r9, r11;
        java.lang.String[] r5, r10;
        boolean $z0;
        org.apache.sshd.common.util.Pair $r12;
        int varReplacer4122, varReplacer4123;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.kex.KexProposalOption;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map clientProposal>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        varReplacer4122 = 44;

        r5 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>($r4, varReplacer4122);

        r6 = r5[0];

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map serverProposal>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.String) $r8;

        varReplacer4123 = 44;

        r10 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>($r9, varReplacer4123);

        r11 = r10[0];

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 == 0 goto label1;

        $r12 = null;

        goto label2;

     label1:
        $r12 = new org.apache.sshd.common.util.Pair;

        specialinvoke $r12.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r6, r11);

     label2:
        return $r12;
    }

    protected void handleKexMessage(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int i0;
        org.apache.sshd.common.kex.KexState $r1, $r12;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.kex.KeyExchange $r3, $r6, $r15;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r4, $r7, $r10, $r16;
        java.lang.Object[] $r5, $r14;
        java.lang.String $r8, $r17, varReplacer4124, varReplacer4125;
        java.lang.Integer $r9, $r18;
        java.util.concurrent.atomic.AtomicReference $r13;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r2 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r1);

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $z0 = interfaceinvoke $r3.<org.apache.sshd.common.kex.KeyExchange: boolean next(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r2);

        if $z0 == 0 goto label2;

        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r14 = newarray (java.lang.Object)[3];

        $r14[0] = r0;

        $r15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r17 = interfaceinvoke $r15.<org.apache.sshd.common.kex.KeyExchange: java.lang.String getName()>();

        $r14[1] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r14[2] = $r18;

        varReplacer4124 = "handleKexMessage({})[{}] KEX processing complete after cmd={}";

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4124, $r14);

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void checkKeys()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture sendNewKeys()>();

        $r13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r12 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r12);

        goto label3;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r0;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r8 = interfaceinvoke $r6.<org.apache.sshd.common.kex.KeyExchange: java.lang.String getName()>();

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[2] = $r9;

        varReplacer4125 = "handleKexMessage({})[{}] more KEX packets expected after cmd={}";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4125, $r5);

     label3:
        return;
    }

    public transient org.apache.sshd.common.io.IoWriteFuture sendIgnoreMessage(byte[]) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int $i0, $i1, varReplacer4126;
        org.apache.sshd.common.util.buffer.Buffer r1;
        org.apache.sshd.common.io.IoWriteFuture $r2;
        byte[] r3, $r4, r5;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r3 := @parameter0: byte[];

        if r3 != null goto label1;

        $r4 = <org.apache.sshd.common.util.GenericUtils: byte[] EMPTY_BYTE_ARRAY>;

        goto label2;

     label1:
        $r4 = r3;

     label2:
        r5 = $r4;

        $i0 = lengthof r5;

        $i1 = $i0 + 8;

        varReplacer4126 = 2;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4126, $i1);

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putBytes(byte[])>(r5);

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        return $r2;
    }

    protected void handleIgnore(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        java.lang.Class[] $r1;
        boolean $z0, $z1;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler r3;
        org.slf4j.Logger $r4, $r5;
        java.lang.String varReplacer4127;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[B";

        $z0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean isValidMessageStructure(java.lang.Class[])>($r1);

        if $z0 != 0 goto label2;

        $r4 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r5 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4127 = "handleIgnore({}) ignore malformed message";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>(varReplacer4127, r2);

     label1:
        return;

     label2:
        r3 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler resolveReservedSessionMessagesHandler()>();

        interfaceinvoke r3.<org.apache.sshd.common.session.ReservedSessionMessagesHandler: void handleIgnoreMessage(org.apache.sshd.common.session.Session,org.apache.sshd.common.util.buffer.Buffer)>(r2, r0);

        return;
    }

    protected void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        boolean $z0, $z1;
        org.apache.sshd.common.session.helpers.AbstractSession r3;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler r4;
        org.slf4j.Logger $r5, $r6;
        java.lang.String varReplacer4128;

        nop;

        r3 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean isValidMessageStructure(java.lang.Class[])>($r1);

        if $z0 != 0 goto label2;

        $r5 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r6 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4128 = "handleUnimplemented({}) ignore malformed message";

        interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>(varReplacer4128, r3);

     label1:
        return;

     label2:
        r4 = virtualinvoke r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler resolveReservedSessionMessagesHandler()>();

        interfaceinvoke r4.<org.apache.sshd.common.session.ReservedSessionMessagesHandler: void handleUnimplementedMessage(org.apache.sshd.common.session.Session,org.apache.sshd.common.util.buffer.Buffer)>(r3, r0);

        return;
    }

    public org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean, java.lang.Object, java.lang.String) throws java.io.IOException
    {
        java.lang.Object r0;
        java.lang.String r1, r5, $r6, r7, varReplacer4130;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        int $i0, $i1, $i2, $i3, varReplacer4129;
        org.apache.sshd.common.util.buffer.Buffer r3;
        boolean z0;
        org.apache.sshd.common.io.IoWriteFuture $r4;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.String;

        varReplacer4130 = "";

        r1 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(r0, varReplacer4130);

        if r5 != null goto label1;

        $r6 = "";

        goto label2;

     label1:
        $r6 = r5;

     label2:
        r7 = $r6;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r7.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $i3 = $i2 + 32;

        varReplacer4129 = 4;

        r3 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4129, $i3);

        virtualinvoke r3.<org.apache.sshd.common.util.buffer.Buffer: void putBoolean(boolean)>(z0);

        virtualinvoke r3.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r1);

        virtualinvoke r3.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r7);

        $r4 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r3);

        return $r4;
    }

    protected void handleDebug(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        boolean $z0, $z1;
        org.apache.sshd.common.session.helpers.AbstractSession r3;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler r4;
        org.slf4j.Logger $r5, $r6;
        java.lang.String varReplacer4131;

        nop;

        r3 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = newarray (java.lang.Class)[3];

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r1[0] = $r2;

        $r1[1] = class "Ljava/lang/String;";

        $r1[2] = class "Ljava/lang/String;";

        $z0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean isValidMessageStructure(java.lang.Class[])>($r1);

        if $z0 != 0 goto label2;

        $r5 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label1;

        $r6 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4131 = "handleDebug({}) ignore malformed message";

        interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>(varReplacer4131, r3);

     label1:
        return;

     label2:
        r4 = virtualinvoke r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler resolveReservedSessionMessagesHandler()>();

        interfaceinvoke r4.<org.apache.sshd.common.session.ReservedSessionMessagesHandler: void handleDebugMessage(org.apache.sshd.common.session.Session,org.apache.sshd.common.util.buffer.Buffer)>(r3, r0);

        return;
    }

    protected org.apache.sshd.common.session.ReservedSessionMessagesHandler resolveReservedSessionMessagesHandler()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler r1, $r3;
        java.lang.Object $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler getReservedSessionMessagesHandler()>();

        if r1 != null goto label1;

        $r2 = <org.apache.sshd.common.session.helpers.ReservedSessionMessagesHandlerAdapter: org.apache.sshd.common.session.helpers.ReservedSessionMessagesHandlerAdapter DEFAULT>;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        $r3 = (org.apache.sshd.common.session.ReservedSessionMessagesHandler) $r2;

        return $r3;
    }

    protected void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        int $i0;
        java.lang.String $r2, $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $i0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($i0, $r2, $r3, r1);

        return;
    }

    protected void handleDisconnect(int, java.lang.String, java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        java.lang.Object[] $r3;
        int i0, varReplacer4133;
        java.lang.String $r5, r6, r7, varReplacer4132;
        org.apache.sshd.common.util.buffer.Buffer r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r8 := @parameter3: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r5 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r3[1] = $r5;

        $r3[2] = r6;

        $r3[3] = r7;

        varReplacer4132 = "handleDisconnect({}) SSH_MSG_DISCONNECT reason={}, [lang={}] msg={}";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4132, $r3);

     label1:
        varReplacer4133 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer4133);

        return;
    }

    protected void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($r2, r1);

        return;
    }

    protected boolean handleServiceRequest(java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r4, $r6, $r7, $r9, $r10, $r16, $r24;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.kex.KexState $r2;
        java.lang.String r3, $r14, $r22, $r26, $r27, varReplacer4134, varReplacer4135, varReplacer4137, varReplacer4138, varReplacer4141, varReplacer4143, varReplacer4145;
        int $i0, $i1, varReplacer4136, varReplacer4139, varReplacer4140, varReplacer4142, varReplacer4144;
        java.lang.Throwable $r8, r29;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r21;
        java.lang.Object[] $r23;
        java.lang.Class $r25;
        org.apache.sshd.common.util.buffer.Buffer r28, r30;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r3 := @parameter0: java.lang.String;

        r28 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4143 = "handleServiceRequest({}) SSH_MSG_SERVICE_REQUEST \'{}\'";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4143, r0, r3);

     label1:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer4144 = 5;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer4144, $r2);

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void startService(java.lang.String)>(r3);

     label3:
        goto label7;

     label4:
        $r8 := @caughtexception;

        r29 = $r8;

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label5;

        $r24 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r23 = newarray (java.lang.Object)[4];

        $r23[0] = r0;

        $r23[1] = r3;

        $r25 = virtualinvoke r29.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getSimpleName()>();

        $r23[2] = $r26;

        $r27 = virtualinvoke r29.<java.lang.Throwable: java.lang.String getMessage()>();

        $r23[3] = $r27;

        varReplacer4137 = "handleServiceRequest({}) Service {} rejected: {} = {}";

        interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4137, $r23);

     label5:
        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label6;

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer4145 = "handleServiceRequest(";

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4145);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4134 = ") service=";

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4134);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        varReplacer4135 = " rejection details";

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4135);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r22, r29);

     label6:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        varReplacer4138 = "Bad service request: ";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4138);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4140 = 7;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer4140, $r14);

        varReplacer4139 = 0;

        return varReplacer4139;

     label7:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label8;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4141 = "handleServiceRequest({}) Accepted service {}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4141, r0, r3);

     label8:
        $i0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int length(java.lang.CharSequence)>(r3);

        $i1 = 8 + $i0;

        varReplacer4136 = 6;

        r30 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4136, $i1);

        virtualinvoke r30.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r3);

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r30);

        varReplacer4142 = 1;

        return varReplacer4142;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($r2, r1);

        return;
    }

    protected void handleServiceAccept(java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        org.apache.sshd.common.kex.KexState $r2;
        java.lang.String r3, varReplacer4147;
        org.apache.sshd.common.util.buffer.Buffer r5;
        int varReplacer4146;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4147 = "handleServiceAccept({}) SSH_MSG_SERVICE_ACCEPT service={}";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4147, r0, r3);

     label1:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer4146 = 6;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer4146, $r2);

        return;
    }

    protected void handleKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r29;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.kex.KexState $r3, $r4, $r6, $r7;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        java.util.Map r9;
        org.apache.sshd.common.kex.KexProposalOption $r10;
        java.lang.Object $r11, $r14, $r15;
        java.lang.String r12, $r18, $r22, varReplacer4148, varReplacer4149, varReplacer4150;
        java.util.List $r13;
        org.apache.sshd.common.kex.KeyExchange $r16, $r19;
        java.nio.charset.Charset $r17, $r21;
        byte[] $r20, $r23, $r24, $r25;
        org.apache.sshd.common.session.SessionListener$Event $r26;
        java.lang.IllegalStateException $r27;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r29 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4148 = "handleKexInit({}) SSH_MSG_KEXINIT";

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer4148, r0);

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r3 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sendKexInit()>();

        goto label3;

     label2:
        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r7 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $r6 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z2 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z2 != 0 goto label3;

        $r27 = new java.lang.IllegalStateException;

        varReplacer4150 = "Received SSH_MSG_KEXINIT while key exchange is running";

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer4150);

        throw $r27;

     label3:
        r9 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiate()>();

        $r10 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r11 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getKeyExchangeFactories()>();

        $r14 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r13, r12);

        varReplacer4149 = "Unknown negotiated KEX algorithm: %s";

        $r15 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r14, varReplacer4149, r12);

        $r16 = (org.apache.sshd.common.kex.KeyExchange) $r15;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex> = $r16;

        $r19 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r18 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String serverVersion>;

        $r17 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r20 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        $r22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String clientVersion>;

        $r21 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r21);

        $r25 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] i_s>;

        $r24 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] i_c>;

        interfaceinvoke $r19.<org.apache.sshd.common.kex.KeyExchange: void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])>(r0, $r20, $r23, $r25, $r24);

        $r26 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KexCompleted>;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r26);

        return;
    }

    protected void handleNewKeys(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r13, $r19, $r23;
        boolean $z0, $z1, $z2;
        int i0, $i1;
        org.apache.sshd.common.kex.KexState $r2, $r9;
        java.util.concurrent.atomic.AtomicReference $r3, $r10;
        java.lang.Object $r4, $r11, $r12, $r14, r34, r37, $r39, r42;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r5, r33;
        org.apache.sshd.common.session.SessionListener$Event $r6;
        java.util.Queue $r7, $r8, $r18, r36, $r38;
        org.apache.sshd.common.util.buffer.Buffer $r15, r32;
        org.apache.sshd.common.io.IoWriteFuture $r16;
        java.lang.Integer $r20;
        java.lang.Boolean $r22;
        java.lang.String $r24, varReplacer4151, varReplacer4152;
        java.lang.Throwable $r25, r26, $r27, r28, $r29, r30, $r31, r35;
        org.apache.sshd.common.session.helpers.PendingWriteFuture $r40, r41;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r32 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r24 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        varReplacer4151 = "handleNewKeys({}) SSH_MSG_NEWKEYS command={}";

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4151, r0, $r24);

     label01:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r2);

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void receiveNewKeys()>();

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r4;

        if r5 == null goto label07;

        r33 = r5;

        entermonitor r5;

     label02:
        r34 = virtualinvoke r5.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r34 != null goto label03;

        $r22 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r5.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r22);

     label03:
        exitmonitor r33;

     label04:
        goto label07;

     label05:
        $r31 := @caughtexception;

        r35 = $r31;

        exitmonitor r33;

     label06:
        throw r35;

     label07:
        $r6 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KeyEstablished>;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r6);

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        r36 = $r7;

        entermonitor $r7;

     label08:
        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        $z1 = interfaceinvoke $r8.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label15;

        $r13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label09;

        $r19 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r18 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        $i1 = interfaceinvoke $r18.<java.util.Queue: int size()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        varReplacer4152 = "handleNewKeys({}) Dequeing {} pending packets";

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4152, r0, $r20);

     label09:
        $r14 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object encodeLock>;

        r37 = $r14;

        entermonitor $r14;

     label10:
        $r38 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        $r39 = interfaceinvoke $r38.<java.util.Queue: java.lang.Object poll()>();

        $r40 = (org.apache.sshd.common.session.helpers.PendingWriteFuture) $r39;

        r41 = $r40;

        if $r40 == null goto label11;

        $r15 = virtualinvoke r41.<org.apache.sshd.common.session.helpers.PendingWriteFuture: org.apache.sshd.common.util.buffer.Buffer getBuffer()>();

        $r16 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>($r15);

        interfaceinvoke $r16.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>(r41);

        goto label10;

     label11:
        exitmonitor r37;

     label12:
        goto label15;

     label13:
        $r29 := @caughtexception;

        r30 = $r29;

        exitmonitor r37;

     label14:
        throw r30;

     label15:
        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r9 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r9);

        exitmonitor r36;

     label16:
        goto label19;

     label17:
        $r27 := @caughtexception;

        r28 = $r27;

        exitmonitor r36;

     label18:
        throw r28;

     label19:
        $r11 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object lock>;

        r42 = $r11;

        entermonitor $r11;

     label20:
        $r12 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object lock>;

        virtualinvoke $r12.<java.lang.Object: void notifyAll()>();

        exitmonitor r42;

     label21:
        goto label24;

     label22:
        $r25 := @caughtexception;

        r26 = $r25;

        exitmonitor r42;

     label23:
        throw r26;

     label24:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label08 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    protected void validateKexState(int, org.apache.sshd.common.kex.KexState)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.kex.KexState r3, r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r13;
        int i0;
        java.lang.String $r8, $r14, varReplacer4153, varReplacer4154, varReplacer4155;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.sshd.common.kex.KexState;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.kex.KexState) $r2;

        $z0 = virtualinvoke r4.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer4155 = "Received KEX command=";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4155);

        $r8 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        varReplacer4154 = " while in state=";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4154);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer4153 = " instead of ";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4153);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label1:
        return;
    }

    public void exceptionCaught(java.lang.Throwable)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.util.closeable.AbstractCloseable$State r3, $r4, $r24, $r78;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r5, $r35, $r52;
        java.lang.Throwable r6, $r40, $r58, r63, r76, r77, r79;
        org.slf4j.Logger $r7, $r11, $r17, $r25, $r26, $r28, $r36, $r41, $r42, $r44, $r53, $r59, $r60, $r65, $r71;
        java.lang.Class $r8, $r37, $r54;
        java.lang.String $r9, $r10, $r15, $r23, $r34, $r38, $r39, $r48, $r51, $r55, $r56, $r57, $r69, $r75, varReplacer4156, varReplacer4157, varReplacer4158, varReplacer4159, varReplacer4160, varReplacer4161, varReplacer4162, varReplacer4163, varReplacer4164, varReplacer4165, varReplacer4167, varReplacer4168, varReplacer4169, varReplacer4170, varReplacer4171, varReplacer4172;
        org.apache.sshd.common.session.SessionListener r12;
        org.apache.sshd.common.SshException $r14;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21, $r22, $r27, $r29, $r30, $r31, $r32, $r33, $r43, $r45, $r46, $r47, $r49, $r50, $r64, $r66, $r67, $r68, $r70, $r72, $r73, $r74;
        java.lang.Throwable[] r61, r62;
        int $i0, i1, i2, i3, varReplacer4166;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r6 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference state>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.util.closeable.AbstractCloseable$State) $r2;

        $r4 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Opened>;

        $z0 = virtualinvoke $r4.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label03;

        $r24 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Graceful>;

        $z3 = virtualinvoke $r24.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z3 != 0 goto label03;

        $r25 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r25.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z4 == 0 goto label01;

        $r36 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r35 = newarray (java.lang.Object)[4];

        $r35[0] = r0;

        $r37 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getSimpleName()>();

        $r35[1] = $r38;

        $r35[2] = r3;

        $r39 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r35[3] = $r39;

        varReplacer4171 = "exceptionCaught({}) ignore {} due to state={}, message=\'{}\'";

        interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4171, $r35);

     label01:
        $r26 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r26.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z5 == 0 goto label02;

        $r28 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        varReplacer4170 = "exceptionCaught(";

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4170);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4160 = ")[state=";

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4160);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer4168 = "] ignored exception details";

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4168);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r34, r6);

     label02:
        return;

     label03:
        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r0;

        $r5[1] = r3;

        $r8 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5[2] = $r9;

        $r10 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5[3] = $r10;

        varReplacer4156 = "exceptionCaught({})[state={}] {}: {}";

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer4156, $r5);

        $r11 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label04;

        $r17 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer4164 = "exceptionCaught(";

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4164);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4165 = ")[state=";

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4165);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer4167 = "] details";

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4167);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r23, r6);

     label04:
        r12 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

     label05:
        interfaceinvoke r12.<org.apache.sshd.common.session.SessionListener: void sessionException(org.apache.sshd.common.session.Session,java.lang.Throwable)>(r0, r6);

     label06:
        goto label10;

     label07:
        $r58 := @caughtexception;

        r76 = $r58;

        r77 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.Throwable peelException(java.lang.Throwable)>(r76);

        $r59 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z8 = interfaceinvoke $r59.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z8 == 0 goto label08;

        $r71 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        varReplacer4158 = "exceptionCaught(";

        $r72 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4158);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4172 = ") signal session exception details";

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4172);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r71.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r75, r77);

     label08:
        $r60 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z9 = interfaceinvoke $r60.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z9 == 0 goto label10;

        r61 = virtualinvoke r77.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        $i0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int length(java.lang.Object[])>(r61);

        if $i0 <= 0 goto label10;

        r62 = r61;

        i1 = lengthof r62;

        i2 = 0;

     label09:
        if i2 >= i1 goto label10;

        r63 = r62[i2];

        $r65 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        varReplacer4162 = "exceptionCaught(";

        $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4162);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4161 = ") suppressed session exception signalling";

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4161);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r65.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r69, r63);

        i2 = i2 + 1;

        goto label09;

     label10:
        $r78 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Opened>;

        $z10 = virtualinvoke $r78.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z10 == 0 goto label16;

        $z2 = r6 instanceof org.apache.sshd.common.SshException;

        if $z2 == 0 goto label16;

        $r14 = (org.apache.sshd.common.SshException) r6;

        i3 = virtualinvoke $r14.<org.apache.sshd.common.SshException: int getDisconnectCode()>();

        if i3 <= 0 goto label16;

     label11:
        $r15 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void disconnect(int,java.lang.String)>(i3, $r15);

     label12:
        goto label15;

     label13:
        $r40 := @caughtexception;

        r79 = $r40;

        $r41 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z6 = interfaceinvoke $r41.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z6 == 0 goto label14;

        $r53 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r52 = newarray (java.lang.Object)[4];

        $r52[0] = r0;

        $r54 = virtualinvoke r79.<java.lang.Object: java.lang.Class getClass()>();

        $r55 = virtualinvoke $r54.<java.lang.Class: java.lang.String getSimpleName()>();

        $r52[1] = $r55;

        $r56 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i3);

        $r52[2] = $r56;

        $r57 = virtualinvoke r79.<java.lang.Throwable: java.lang.String getMessage()>();

        $r52[3] = $r57;

        varReplacer4169 = "exceptionCaught({}) {} while disconnect with code={}: {}";

        interfaceinvoke $r53.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4169, $r52);

     label14:
        $r42 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z7 = interfaceinvoke $r42.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z7 == 0 goto label15;

        $r44 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        varReplacer4157 = "exceptionCaught(";

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4157);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4159 = ")[code=";

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4159);

        $r48 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i3);

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        varReplacer4163 = "] disconnect exception details";

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4163);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r51, r79);

     label15:
        return;

     label16:
        varReplacer4166 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer4166);

        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    protected org.apache.sshd.common.Closeable getInnerCloseable()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.closeable.Builder $r1, $r3, $r5;
        java.util.List $r2;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.Closeable $r6;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.closeable.Builder builder()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getServices()>();

        $r3 = virtualinvoke $r1.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.util.closeable.Builder parallel(java.lang.Iterable)>($r2);

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = virtualinvoke $r3.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.util.closeable.Builder close(org.apache.sshd.common.Closeable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.Closeable build()>();

        return $r6;
    }

    protected void preClose()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r4, $r6, $r7, r43;
        java.lang.Object $r2, $r5, r41;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r3, r40;
        java.util.Collection $r8, $r9, $r14, $r15, $r49, $r50;
        org.apache.sshd.common.SshException $r11;
        java.lang.Throwable $r12, r13, $r16, r25, $r38, $r39, r42, r44, r46, r47;
        java.lang.Object[] $r17;
        org.slf4j.Logger $r18, $r22, $r23, $r27, $r33;
        java.lang.Class $r19;
        java.lang.String $r20, $r21, $r31, $r37, varReplacer4173, varReplacer4174, varReplacer4175, varReplacer4176, varReplacer4177, varReplacer4178;
        boolean $z0, $z1;
        int $i0, i1, i2;
        java.lang.Throwable[] r24, r48;
        java.lang.StringBuilder $r26, $r28, $r29, $r30, $r32, $r34, $r35, $r36;
        org.apache.sshd.common.session.SessionListener r45;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r2;

        if r3 == null goto label06;

        r40 = r3;

        entermonitor r3;

     label01:
        r41 = virtualinvoke r3.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r41 != null goto label02;

        $r11 = new org.apache.sshd.common.SshException;

        varReplacer4176 = "Session closing while KEX in progress";

        specialinvoke $r11.<org.apache.sshd.common.SshException: void <init>(java.lang.String)>(varReplacer4176);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r11);

     label02:
        exitmonitor r40;

     label03:
        goto label06;

     label04:
        $r39 := @caughtexception;

        r42 = $r39;

        exitmonitor r40;

     label05:
        throw r42;

     label06:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r43 = $r4;

        entermonitor $r4;

     label07:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r5 = <org.apache.sshd.common.util.GenericUtils: java.lang.Object NULL>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r43;

     label08:
        goto label11;

     label09:
        $r38 := @caughtexception;

        r44 = $r38;

        exitmonitor r43;

     label10:
        throw r44;

     label11:
        r45 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

     label12:
        interfaceinvoke r45.<org.apache.sshd.common.session.SessionListener: void sessionClosed(org.apache.sshd.common.session.Session)>(r0);

     label13:
        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r8.<java.util.Collection: void clear()>();

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r9.<java.util.Collection: void clear()>();

        goto label20;

     label14:
        $r16 := @caughtexception;

        r46 = $r16;

        r47 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.Throwable peelException(java.lang.Throwable)>(r46);

        $r18 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r17 = newarray (java.lang.Object)[3];

        $r17[0] = r0;

        $r19 = virtualinvoke r47.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>();

        $r17[1] = $r20;

        $r21 = virtualinvoke r47.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17[2] = $r21;

        varReplacer4174 = "preClose({}) {} while signal session closed: {}";

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer4174, $r17);

        $r22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r22.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label15;

        $r33 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        varReplacer4177 = "preClose(";

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4177);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4175 = ") signal session closed exception details";

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4175);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r37, r47);

     label15:
        $r23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r23.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label17;

        r48 = virtualinvoke r47.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        $i0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int length(java.lang.Object[])>(r48);

        if $i0 <= 0 goto label17;

        r24 = r48;

        i1 = lengthof r24;

        i2 = 0;

     label16:
        if i2 >= i1 goto label17;

        r25 = r24[i2];

        $r27 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        varReplacer4173 = "preClose(";

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4173);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4178 = ") suppressed session closed signalling";

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4178);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r31, r25);

        i2 = i2 + 1;

        goto label16;

     label17:
        $r49 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r49.<java.util.Collection: void clear()>();

        $r50 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r50.<java.util.Collection: void clear()>();

        goto label20;

     label18:
        $r12 := @caughtexception;

        r13 = $r12;

     label19:
        $r14 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r14.<java.util.Collection: void clear()>();

        $r15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r15.<java.util.Collection: void clear()>();

        throw r13;

     label20:
        specialinvoke r0.<org.apache.sshd.common.kex.AbstractKexFactoryManager: void preClose()>();

        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    protected java.util.List getServices()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.Service $r1, $r2;
        java.util.List $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.Service currentService>;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r3;
    }

    public org.apache.sshd.common.Service getService(java.lang.Class)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class r6;
        java.lang.String $r7, $r9, varReplacer4179;
        java.lang.Object $r10, $r12;
        org.apache.sshd.common.Service r11, $r13;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r6 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getServices()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.sshd.common.Service) $r10;

        $z1 = virtualinvoke r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r11);

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r11);

        $r13 = (org.apache.sshd.common.Service) $r12;

        return $r13;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer4179 = "Attempted to access unknown service ";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4179);

        $r7 = virtualinvoke r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r9;
        org.apache.sshd.common.kex.KexState $r2, $r10;
        java.lang.Object $r3, $r11;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.util.buffer.Buffer r4;
        byte[] $r6;
        int $i0, $i1;
        java.util.Queue $r7, r8, $r12, $r15;
        org.apache.sshd.common.session.helpers.PendingWriteFuture $r13, r14;
        org.slf4j.Logger $r16;
        java.lang.String $r17, varReplacer4180;
        java.lang.Throwable $r19, r20, $r22, r23;
        byte b2;
        org.apache.sshd.common.io.IoWriteFuture r24;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z0 = virtualinvoke $r2.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label08;

        $r6 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        b2 = $r6[$i0];

        if b2 <= 49 goto label08;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        r8 = $r7;

        entermonitor $r7;

     label01:
        $r10 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r11 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z1 = virtualinvoke $r10.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label04;

        $r12 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        $z2 = interfaceinvoke $r12.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label02;

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $i1 = b2 & 255;

        $r17 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>($i1);

        varReplacer4180 = "writePacket({})[{}] Start flagging packets as pending until key exchange is done";

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4180, r0, $r17);

     label02:
        $r13 = new org.apache.sshd.common.session.helpers.PendingWriteFuture;

        specialinvoke $r13.<org.apache.sshd.common.session.helpers.PendingWriteFuture: void <init>(org.apache.sshd.common.util.buffer.Buffer)>(r4);

        r14 = $r13;

        $r15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Queue pendingPackets>;

        interfaceinvoke $r15.<java.util.Queue: boolean add(java.lang.Object)>(r14);

        exitmonitor r8;

     label03:
        return r14;

     label04:
        exitmonitor r8;

     label05:
        goto label08;

     label06:
        $r22 := @caughtexception;

        r23 = $r22;

        exitmonitor r8;

     label07:
        throw r23;

     label08:
        r24 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>(r4);

     label09:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.KeyExchangeFuture checkRekey()>();

        return r24;

     label10:
        $r19 := @caughtexception;

        r20 = $r19;

     label11:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.KeyExchangeFuture checkRekey()>();

        throw r20;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        org.apache.sshd.common.io.IoWriteFuture r2;
        org.apache.sshd.common.future.DefaultSshFuture r3;
        org.apache.sshd.common.FactoryManager $r4;
        java.util.concurrent.ScheduledExecutorService r5;
        long l0;
        java.util.concurrent.TimeUnit r6;
        java.lang.Runnable $r7;
        java.util.concurrent.ScheduledFuture r8;
        org.apache.sshd.common.future.SshFutureListener $r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        l0 := @parameter1: long;

        r6 := @parameter2: java.util.concurrent.TimeUnit;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        r3 = (org.apache.sshd.common.future.DefaultSshFuture) r2;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        r5 = interfaceinvoke $r4.<org.apache.sshd.common.FactoryManager: java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()>();

        $r7 = staticinvoke <org.apache.sshd.common.session.helpers.AbstractSession$lambda_writePacket_0__113: java.lang.Runnable bootstrap$(org.apache.sshd.common.session.helpers.AbstractSession,long,java.util.concurrent.TimeUnit,org.apache.sshd.common.future.DefaultSshFuture)>(r0, l0, r6, r3);

        r8 = interfaceinvoke r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r7, l0, r6);

        $r9 = staticinvoke <org.apache.sshd.common.session.helpers.AbstractSession$lambda_writePacket_1__114: org.apache.sshd.common.future.SshFutureListener bootstrap$(java.util.concurrent.ScheduledFuture)>(r8);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultSshFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r9);

        return r2;
    }

    protected org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int i0, $i1, $i3, i4, i5, i7, varReplacer4181;
        java.lang.Object r1, $r20;
        org.apache.sshd.common.io.IoSession $r2, $r4;
        org.apache.sshd.common.io.IoWriteFuture $r3;
        long $l2;
        org.apache.sshd.common.random.Random $r6, $r7, r16;
        byte[] $r8, r18;
        org.slf4j.Logger $r9, $r10;
        boolean $z0;
        java.lang.Throwable $r11, r12, $r13, r17;
        org.apache.sshd.common.util.buffer.Buffer r14, r15, r19;
        byte $b6;
        java.lang.String varReplacer4182;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r14 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r15 = null;

        i0 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: int resolveIgnoreBufferDataLength()>();

        if i0 <= 0 goto label06;

        $i1 = i0 + 8;

        varReplacer4181 = 2;

        r15 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4181, $i1);

        $l2 = (long) i0;

        virtualinvoke r15.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l2);

        i4 = virtualinvoke r15.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        r16 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r8 = virtualinvoke r15.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r7.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r8, i4, i0);

        exitmonitor r16;

     label02:
        goto label05;

     label03:
        $r13 := @caughtexception;

        r17 = $r13;

        exitmonitor r16;

     label04:
        throw r17;

     label05:
        $i3 = i4 + i0;

        virtualinvoke r15.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i3);

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4182 = "doWritePacket({}) append SSH_MSG_IGNORE message";

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer4182, r0);

     label06:
        i5 = virtualinvoke r14.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        r18 = virtualinvoke r14.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $b6 = r18[i5];

        i7 = $b6 & 255;

        r19 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int,org.apache.sshd.common.util.buffer.Buffer)>(i7, r14);

        $r20 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object encodeLock>;

        r1 = $r20;

        entermonitor $r20;

     label07:
        if r15 == null goto label08;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void encode(org.apache.sshd.common.util.buffer.Buffer)>(r15);

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        interfaceinvoke $r4.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>(r15);

     label08:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void encode(org.apache.sshd.common.util.buffer.Buffer)>(r19);

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r3 = interfaceinvoke $r2.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>(r19);

        exitmonitor r1;

     label09:
        return $r3;

     label10:
        $r11 := @caughtexception;

        r12 = $r11;

        exitmonitor r1;

     label11:
        throw r12;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected int resolveIgnoreBufferDataLength()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int $i0, $i3, $i6, $i9, $i10, $i11, $i12, varReplacer4183, varReplacer4184;
        long $l1, l4, $l7, $l8;
        byte $b2, $b5;
        java.util.concurrent.atomic.AtomicLong $r1, $r5;
        org.apache.sshd.common.random.Random $r2, r3, $r4, $r6;
        java.lang.Throwable $r7, r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $i0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketDataLength>;

        if $i0 <= 0 goto label1;

        $l1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $i3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance>;

        if $i3 >= 0 goto label2;

     label1:
        varReplacer4184 = 0;

        return varReplacer4184;

     label2:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        l4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        $b5 = l4 cmp 0L;

        if $b5 <= 0 goto label3;

        varReplacer4183 = 0;

        return varReplacer4183;

     label3:
        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        r3 = $r2;

        entermonitor $r2;

     label4:
        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $l7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long ignorePacketsFrequency>;

        $i6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketsVariance>;

        $l8 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)>($r4, $l7, $i6);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l8);

        $i10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketDataLength>;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $i9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int ignorePacketDataLength>;

        $i11 = interfaceinvoke $r6.<org.apache.sshd.common.random.Random: int random(int)>($i9);

        $i12 = $i10 + $i11;

        exitmonitor r3;

     label5:
        return $i12;

     label6:
        $r7 := @caughtexception;

        r8 = $r7;

        exitmonitor r3;

     label7:
        throw r8;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random, long, int)
    {
        long l0, $l4, l5, $l6, $l8, varReplacer4185;
        byte $b1;
        int i2, i3, $i7;
        org.apache.sshd.common.random.Random r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        org.slf4j.Logger $r2, $r3;
        boolean $z0;
        java.lang.Long $r4;
        java.lang.String varReplacer4186;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.random.Random;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        if i2 >= 0 goto label2;

     label1:
        varReplacer4185 = -1L;

        return varReplacer4185;

     label2:
        if i2 != 0 goto label3;

        return l0;

     label3:
        if i2 >= 0 goto label4;

        $i7 = 0 - i2;

        goto label5;

     label4:
        $i7 = i2;

     label5:
        i3 = interfaceinvoke r0.<org.apache.sshd.common.random.Random: int random(int)>($i7);

        if i2 >= 0 goto label6;

        $l6 = (long) i3;

        $l8 = l0 - $l6;

        goto label7;

     label6:
        $l4 = (long) i3;

        $l8 = l0 + $l4;

     label7:
        l5 = $l8;

        $r2 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label8;

        $r3 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        varReplacer4186 = "calculateNextIgnorePacketCount({}) count={}";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4186, r1, $r4);

     label8:
        return l5;
    }

    public org.apache.sshd.common.util.buffer.Buffer request(java.lang.String, org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        long l0, l5, l6, l7, l8, l10;
        byte $b1, $b2, $b4, $b9;
        java.util.concurrent.TimeUnit r0, $r1, $r36;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.slf4j.Logger $r3, $r10, $r23, $r34, $r38, $r41;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r4, r5, r9, $r33;
        org.apache.sshd.common.util.buffer.Buffer r6, $r11;
        java.util.concurrent.atomic.AtomicReference $r8, $r32, $r35, r65, $r66;
        java.net.SocketTimeoutException $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r28, $r29, $r30, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r56, $r57, $r58, $r59;
        java.lang.String r19, $r21, $r31, $r51, $r60, varReplacer4187, varReplacer4188, varReplacer4190, varReplacer4192, varReplacer4193, varReplacer4194, varReplacer4195, varReplacer4196, varReplacer4197, varReplacer4198, varReplacer4199, varReplacer4200, varReplacer4201;
        java.lang.Object[] $r22, $r37, $r40;
        java.lang.Long $r25, $r39, $r42;
        java.lang.Boolean $r26;
        java.io.IOException $r27;
        java.lang.IllegalArgumentException $r43;
        java.lang.Throwable $r52, r53, $r54, $r61, $r63, r64, r67;
        java.io.InterruptedIOException $r55, $r62;
        null_type varReplacer4189, varReplacer4191;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r19 := @parameter0: java.lang.String;

        r6 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        l0 := @parameter2: long;

        r0 := @parameter3: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        varReplacer4188 = "Non-positive timeout requested: %d";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: void checkTrue(boolean,java.lang.String,long)>($z5, varReplacer4188, l0);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l10 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l0, r0);

        $b2 = l10 cmp 0L;

        if $b2 > 0 goto label03;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        varReplacer4197 = "Requested timeout for ";

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4197);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        varReplacer4187 = " below 1 msec: ";

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4187);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        varReplacer4192 = " ";

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4192);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw $r43;

     label03:
        $r3 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label04;

        $r41 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r40 = newarray (java.lang.Object)[4];

        $r40[0] = r2;

        $r40[1] = r19;

        $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r40[2] = $r42;

        $r40[3] = r0;

        varReplacer4198 = "request({}) request={}, timeout={} {}";

        interfaceinvoke $r41.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4198, $r40);

     label04:
        $r4 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object requestLock>;

        r5 = $r4;

        entermonitor $r4;

     label05:
        virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r6);

        $r8 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r65 = $r8;

        entermonitor $r8;

     label06:
        $z6 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isOpen()>();

        if $z6 == 0 goto label10;

        $b4 = l10 cmp 0L;

        if $b4 <= 0 goto label10;

        $r32 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r33 = virtualinvoke $r32.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r33 != null goto label10;

        $r34 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r34.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z4 == 0 goto label07;

        $r38 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r37 = newarray (java.lang.Object)[3];

        $r37[0] = r2;

        $r37[1] = r19;

        $r39 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10);

        $r37[2] = $r39;

        varReplacer4201 = "request({})[{}] remaining wait={}";

        interfaceinvoke $r38.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer4201, $r37);

     label07:
        l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $r35 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r35.<java.lang.Object: void wait(long)>(l10);

        l6 = staticinvoke <java.lang.System: long nanoTime()>();

        l7 = l6 - l5;

        $r36 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l8 = virtualinvoke $r36.<java.util.concurrent.TimeUnit: long toMillis(long)>(l7);

        $b9 = l8 cmp 0L;

        if $b9 <= 0 goto label08;

        l10 = l10 - l8;

        goto label09;

     label08:
        l10 = l10 - 1L;

     label09:
        goto label06;

     label10:
        $r66 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        varReplacer4191 = null;

        r9 = virtualinvoke $r66.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(varReplacer4191);

        exitmonitor r65;

     label11:
        goto label14;

     label12:
        $r63 := @caughtexception;

        r64 = $r63;

        exitmonitor r65;

     label13:
        throw r64;

     label14:
        goto label16;

     label15:
        $r54 := @caughtexception;

        r67 = $r54;

        $r55 = new java.io.InterruptedIOException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        varReplacer4195 = "Interrupted while waiting for request=";

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4195);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        varReplacer4200 = " result";

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4200);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.io.InterruptedIOException: void <init>(java.lang.String)>($r60);

        $r61 = virtualinvoke $r55.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(r67);

        $r62 = (java.io.InterruptedIOException) $r61;

        throw $r62;

     label16:
        exitmonitor r5;

     label17:
        goto label20;

     label18:
        $r52 := @caughtexception;

        r53 = $r52;

        exitmonitor r5;

     label19:
        throw r53;

     label20:
        $z1 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isOpen()>();

        if $z1 != 0 goto label21;

        $r27 = new java.io.IOException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        varReplacer4193 = "Session is closed or closing while awaiting reply for request=";

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4193);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r27;

     label21:
        $r10 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label24;

        $r23 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r22 = newarray (java.lang.Object)[5];

        $r22[0] = r2;

        $r22[1] = r19;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r22[2] = $r25;

        $r22[3] = r0;

        if r9 == null goto label22;

        $z7 = 1;

        goto label23;

     label22:
        $z7 = 0;

     label23:
        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        $r22[4] = $r26;

        varReplacer4196 = "request({}) request={}, timeout={} {}, result received={}";

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4196, $r22);

     label24:
        if r9 != null goto label25;

        $r12 = new java.net.SocketTimeoutException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        varReplacer4190 = "No response received after ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4190);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        varReplacer4194 = " ";

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4194);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4199 = " for request=";

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4199);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.net.SocketTimeoutException: void <init>(java.lang.String)>($r21);

        throw $r12;

     label25:
        $z3 = r9 instanceof org.apache.sshd.common.util.buffer.Buffer;

        if $z3 == 0 goto label26;

        $r11 = (org.apache.sshd.common.util.buffer.Buffer) r9;

        return $r11;

     label26:
        varReplacer4189 = null;

        return varReplacer4189;

        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.InterruptedException from label05 to label14 with label15;
        catch java.lang.Throwable from label05 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        byte b0;
        org.apache.sshd.common.util.buffer.Buffer $r1;
        int varReplacer4202;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        b0 := @parameter0: byte;

        varReplacer4202 = 0;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(b0, varReplacer4202);

        return $r1;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte, int)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int i0, $i1, $i2, $i3, $i5, $i6, i7, i8, i9, i10, varReplacer4203;
        org.apache.sshd.common.mac.Mac $r1, $r5;
        byte b4;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r2, $r6;
        byte[] $r3;
        org.apache.sshd.common.util.buffer.Buffer $r4, $r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        b4 := @parameter0: byte;

        i7 := @parameter1: int;

        if i7 > 0 goto label1;

        $r6 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r6.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        $r7 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)>(b4, $r6);

        return $r7;

     label1:
        i0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int outCipherSize>;

        i8 = i7 + 5;

        $i2 = neg i8;

        $i1 = i0 - 1;

        i9 = $i2 & $i1;

        if i9 >= i0 goto label2;

        i9 = i9 + i0;

     label2:
        $i3 = i8 + i9;

        i10 = $i3 - 4;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r1 == null goto label3;

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $i6 = interfaceinvoke $r5.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i10 = i10 + $i6;

     label3:
        $r2 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $i5 = i10 + 8;

        $r3 = newarray (byte)[$i5];

        varReplacer4203 = 0;

        specialinvoke $r2.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[],boolean)>($r3, varReplacer4203);

        $r4 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)>(b4, $r2);

        return $r4;
    }

    public org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte, org.apache.sshd.common.util.buffer.Buffer)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        byte b0;
        int $i1, varReplacer4204, varReplacer4205;
        org.apache.sshd.common.util.buffer.Buffer r1, r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        b0 := @parameter0: byte;

        r1 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $i1 = b0 & 255;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int,org.apache.sshd.common.util.buffer.Buffer)>($i1, r1);

        varReplacer4205 = 5;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(varReplacer4205);

        varReplacer4204 = 5;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer4204);

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(b0);

        return r2;
    }

    protected org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int, org.apache.sshd.common.util.buffer.Buffer)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        int i0;
        long $l1, $l2, $l3;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.apache.sshd.common.session.SessionWorkBuffer $r3, $r4;
        boolean $z0, $z1;
        java.lang.String varReplacer4206, varReplacer4207, varReplacer4208;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $l1 = (long) i0;

        varReplacer4207 = "No target buffer to examine for command=%d";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long)>(r0, varReplacer4207, $l1);

        $r3 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        if r0 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l2 = (long) i0;

        varReplacer4206 = "Not allowed to use the internal decoder buffer for command=%d";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: void checkTrue(boolean,java.lang.String,long)>($z0, varReplacer4206, $l2);

        $r4 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer>;

        if r0 == $r4 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $l3 = (long) i0;

        varReplacer4208 = "Not allowed to use the internal uncompress buffer for command=%d";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: void checkTrue(boolean,java.lang.String,long)>($z1, varReplacer4208, $l3);

        return r0;
    }

    protected void encode(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r31;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.compression.Compression $r2, $r20, $r21, $r22;
        int i0, $i1, $i4, $i5, $i6, $i7, $i8, $i15, $i16, $i17, $i18, $i21, $i25, $i26, i27, i28, i29, i30, i31, i32, $i33, $i34, i35, i36, i37, i38, i39, varReplacer4210, varReplacer4212, varReplacer4214, varReplacer4215;
        long $l2, $l9, $l10, $l11, $l13, $l19, $l22, $l23;
        byte $b3, $b24;
        org.apache.sshd.common.random.Random $r3, $r4, r43;
        byte[] $r5, $r11, $r17, $r19, r41;
        org.apache.sshd.common.mac.Mac $r6, $r14, $r15, $r16, $r18;
        org.apache.sshd.common.cipher.Cipher $r7, $r10, $r12;
        java.util.concurrent.atomic.AtomicLong $r8, $r9, $r13;
        org.apache.sshd.common.util.logging.SimplifiedLog $r23;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r28;
        java.lang.String $r29, $r32, varReplacer4209, varReplacer4211, varReplacer4213;
        java.lang.Object[] $r30;
        java.lang.Integer $r33, $r34;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r35, r42;
        java.lang.Exception $r36, r46;
        org.apache.sshd.common.SshException $r37;
        java.lang.Throwable $r38, $r39, r44, r45;
        org.apache.sshd.common.util.buffer.Buffer r40;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r40 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

     label01:
        i27 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if i27 >= 5 goto label02;

        r41 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $b24 = r41[i27];

        i28 = $b24 & 255;

        $r31 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r30 = newarray (java.lang.Object)[4];

        $r30[0] = r0;

        $r32 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i28);

        $r30[1] = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i27);

        $r30[2] = $r33;

        varReplacer4210 = 5;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(varReplacer4210);

        $r30[3] = $r34;

        varReplacer4211 = "encode({}) command={} performance cost: available buffer packet header length ({}) below min. required ({})";

        interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer4211, $r30);

        $r35 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $i25 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i26 = $i25 + 64;

        varReplacer4214 = 0;

        specialinvoke $r35.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(int,boolean)>($i26, varReplacer4214);

        r42 = $r35;

        varReplacer4212 = 5;

        virtualinvoke r42.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer4212);

        virtualinvoke r42.<org.apache.sshd.common.util.buffer.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r40);

        r40 = r42;

        i27 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

     label02:
        i29 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        i30 = i27 - 5;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label03;

        $r23 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.logging.SimplifiedLog getSimplifiedLogger()>();

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        varReplacer4213 = "encode(";

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4213);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4209 = ") packet #";

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4209);

        $l23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqo>;

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l23);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void dumpHex(org.apache.sshd.common.util.logging.SimplifiedLog,java.lang.String,org.apache.sshd.common.PropertyResolver)>($r23, $r29, r0);

     label03:
        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        if $r2 == null goto label05;

        $r20 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $z1 = interfaceinvoke $r20.<org.apache.sshd.common.compression.Compression: boolean isCompressionExecuted()>();

        if $z1 == 0 goto label05;

        $z2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean authed>;

        if $z2 != 0 goto label04;

        $r22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $z3 = interfaceinvoke $r22.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z3 != 0 goto label05;

     label04:
        $r21 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        interfaceinvoke $r21.<org.apache.sshd.common.compression.Compression: void compress(org.apache.sshd.common.util.buffer.Buffer)>(r40);

        i29 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

     label05:
        i31 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int outCipherSize>;

        i0 = i29;

        i32 = i29 + 5;

        $i33 = neg i32;

        $i34 = i31 - 1;

        i35 = $i33 & $i34;

        if i35 >= i31 goto label06;

        i35 = i35 + i31;

     label06:
        $i1 = i32 + i35;

        i36 = $i1 - 4;

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(i30);

        $l2 = (long) i36;

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l2);

        $b3 = (byte) i35;

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>($b3);

        $i4 = i30 + i0;

        $i5 = $i4 + 5;

        $i6 = $i5 + i35;

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i6);

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        r43 = $r3;

        entermonitor $r3;

     label07:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r5 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i7 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i8 = $i7 - i35;

        interfaceinvoke $r4.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r5, $i8, i35);

        exitmonitor r43;

     label08:
        goto label11;

     label09:
        $r39 := @caughtexception;

        r44 = $r39;

        exitmonitor r43;

     label10:
        throw r44;

     label11:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r6 == null goto label12;

        $r14 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        i37 = interfaceinvoke $r14.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i38 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i21 = i38 + i37;

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i21);

        $r15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $l22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqo>;

        interfaceinvoke $r15.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l22);

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r17 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r16.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>($r17, i30, i38);

        $r18 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r19 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r18.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r19, i38);

     label12:
        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        if $r7 == null goto label13;

        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $r11 = virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i15 = i36 + 4;

        interfaceinvoke $r10.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r11, i30, $i15);

        $i16 = i36 + 4;

        $r12 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $i17 = interfaceinvoke $r12.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i39 = $i16 / $i17;

        $r13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        varReplacer4215 = 1;

        $i18 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer4215, i39);

        $l19 = (long) $i18;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l19);

     label13:
        $l9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqo>;

        $l10 = $l9 + 1L;

        $l11 = $l10 & 4294967295L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqo> = $l11;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $l13 = (long) i36;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l13);

        virtualinvoke r40.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i30);

     label14:
        goto label17;

     label15:
        $r38 := @caughtexception;

        r45 = $r38;

        throw r45;

     label16:
        $r36 := @caughtexception;

        r46 = $r36;

        $r37 = new org.apache.sshd.common.SshException;

        specialinvoke $r37.<org.apache.sshd.common.SshException: void <init>(java.lang.Throwable)>(r46);

        throw $r37;

     label17:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.IOException from label01 to label14 with label15;
        catch java.lang.Exception from label01 to label14 with label16;
    }

    protected void decode() throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int $i0, $i1, $i2, $i3, i7, $i9, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i48, $i49, i50, $i51, i52, i53, i54, i55, $i56, $i57, $i58, varReplacer4216, varReplacer4217, varReplacer4218, varReplacer4219, varReplacer4221, varReplacer4223, varReplacer4224, varReplacer4225, varReplacer4230, varReplacer4231;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.sshd.common.mac.Mac $r1, $r6, $r32, $r33, $r35, $r41;
        org.apache.sshd.common.session.SessionWorkBuffer $r2, $r3, $r7, $r8, $r12, $r13, $r14, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r42, $r44, $r46, $r49, $r61, $r66, r68, $r69;
        byte[] r4, $r34, $r36, $r63;
        org.apache.sshd.common.cipher.Cipher $r5, $r38, $r39, $r45, $r62, $r64;
        long $l4, $l5, $l6, $l10, $l15, $l21, $l32, $l46;
        org.apache.sshd.common.compression.Compression $r9, $r22, $r29, $r31;
        java.util.concurrent.atomic.AtomicLong $r10, $r11, $r40, $r65;
        org.apache.sshd.common.util.logging.SimplifiedLog $r15, $r50;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r51, $r52, $r53, $r54, $r57, $r58, $r59;
        java.lang.String $r21, $r55, $r60, varReplacer4220, varReplacer4222, varReplacer4226, varReplacer4227, varReplacer4228, varReplacer4229, varReplacer4232;
        org.apache.sshd.common.SshException $r37, $r56;
        java.lang.AssertionError $r43, $r67;
        org.slf4j.Logger $r47, $r70;
        java.lang.Integer $r48;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

     label01:
        $i49 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderState>;

        if $i49 != 0 goto label06;

        $z5 = <org.apache.sshd.common.session.helpers.AbstractSession: boolean $assertionsDisabled>;

        if $z5 != 0 goto label02;

        $r66 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i48 = virtualinvoke $r66.<org.apache.sshd.common.session.SessionWorkBuffer: int rpos()>();

        if $i48 == 0 goto label02;

        $r67 = new java.lang.AssertionError;

        specialinvoke $r67.<java.lang.AssertionError: void <init>()>();

        throw $r67;

     label02:
        $r44 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i35 = virtualinvoke $r44.<org.apache.sshd.common.session.SessionWorkBuffer: int available()>();

        $i36 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize>;

        if $i35 <= $i36 goto label18;

        $r45 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r45 == null goto label03;

        $r62 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $r61 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $r63 = virtualinvoke $r61.<org.apache.sshd.common.session.SessionWorkBuffer: byte[] array()>();

        $i42 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize>;

        varReplacer4219 = 0;

        interfaceinvoke $r62.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r63, varReplacer4219, $i42);

        $i43 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize>;

        $r64 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i44 = interfaceinvoke $r64.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i50 = $i43 / $i44;

        $r65 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer4218 = 1;

        $i45 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer4218, i50);

        $l46 = (long) $i45;

        virtualinvoke $r65.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l46);

     label03:
        $r46 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i37 = virtualinvoke $r46.<org.apache.sshd.common.session.SessionWorkBuffer: int getInt()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength> = $i37;

        $i38 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        if $i38 < 5 goto label04;

        $i41 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        if $i41 <= 262144 goto label05;

     label04:
        $r47 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $i39 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i39);

        varReplacer4232 = "decode({}) Error decoding packet(invalid length): {}";

        interfaceinvoke $r47.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4232, r0, $r48);

        $r49 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $r50 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.logging.SimplifiedLog getSimplifiedLogger()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        varReplacer4228 = "decode(";

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4228);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4229 = ") invalid length packet";

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4229);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<org.apache.sshd.common.session.SessionWorkBuffer: void dumpHex(org.apache.sshd.common.util.logging.SimplifiedLog,java.lang.String,org.apache.sshd.common.PropertyResolver)>($r50, $r55, r0);

        $r56 = new org.apache.sshd.common.SshException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        varReplacer4220 = "Invalid packet length: ";

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4220);

        $i40 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i40);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4224 = 2;

        specialinvoke $r56.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4224, $r60);

        throw $r56;

     label05:
        varReplacer4216 = 1;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderState> = varReplacer4216;

        goto label01;

     label06:
        $i0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderState>;

        if $i0 != 1 goto label01;

        $z0 = <org.apache.sshd.common.session.helpers.AbstractSession: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $r42 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i34 = virtualinvoke $r42.<org.apache.sshd.common.session.SessionWorkBuffer: int rpos()>();

        if $i34 == 4 goto label07;

        $r43 = new java.lang.AssertionError;

        specialinvoke $r43.<java.lang.AssertionError: void <init>()>();

        throw $r43;

     label07:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r1 == null goto label08;

        $r41 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i51 = interfaceinvoke $r41.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        goto label09;

     label08:
        $i51 = 0;

     label09:
        i52 = $i51;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i1 = virtualinvoke $r2.<org.apache.sshd.common.session.SessionWorkBuffer: int available()>();

        $i2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i3 = $i2 + i52;

        if $i1 < $i3 goto label18;

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        r4 = virtualinvoke $r3.<org.apache.sshd.common.session.SessionWorkBuffer: byte[] array()>();

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r5 == null goto label10;

        $i26 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i28 = $i26 + 4;

        $i27 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize>;

        i53 = $i28 - $i27;

        $r38 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i29 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize>;

        interfaceinvoke $r38.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>(r4, $i29, i53);

        $r39 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i30 = interfaceinvoke $r39.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i54 = i53 / $i30;

        $r40 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer4221 = 1;

        $i31 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer4221, i54);

        $l32 = (long) $i31;

        virtualinvoke $r40.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l32);

     label10:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r6 == null goto label11;

        $r32 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $l21 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqi>;

        interfaceinvoke $r32.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l21);

        $r33 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i23 = $i22 + 4;

        varReplacer4231 = 0;

        interfaceinvoke $r33.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>(r4, varReplacer4231, $i23);

        $r35 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $r34 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] inMacResult>;

        varReplacer4223 = 0;

        interfaceinvoke $r35.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r34, varReplacer4223);

        $r36 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] inMacResult>;

        $i24 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i25 = $i24 + 4;

        varReplacer4217 = 0;

        $z4 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: boolean equals(byte[],int,byte[],int,int)>($r36, varReplacer4217, r4, $i25, i52);

        if $z4 != 0 goto label11;

        $r37 = new org.apache.sshd.common.SshException;

        varReplacer4225 = 5;

        varReplacer4226 = "MAC Error";

        specialinvoke $r37.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4225, varReplacer4226);

        throw $r37;

     label11:
        $l4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqi>;

        $l5 = $l4 + 1L;

        $l6 = $l5 & 4294967295L;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqi> = $l6;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        i55 = virtualinvoke $r7.<org.apache.sshd.common.session.SessionWorkBuffer: int getUByte()>();

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        i7 = virtualinvoke $r8.<org.apache.sshd.common.session.SessionWorkBuffer: int wpos()>();

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        if $r9 == null goto label15;

        $r22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $z1 = interfaceinvoke $r22.<org.apache.sshd.common.compression.Compression: boolean isCompressionExecuted()>();

        if $z1 == 0 goto label15;

        $z2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean authed>;

        if $z2 != 0 goto label12;

        $r31 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $z3 = interfaceinvoke $r31.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z3 != 0 goto label15;

     label12:
        $r23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer>;

        if $r23 != null goto label13;

        $r30 = new org.apache.sshd.common.session.SessionWorkBuffer;

        specialinvoke $r30.<org.apache.sshd.common.session.SessionWorkBuffer: void <init>(org.apache.sshd.common.session.Session)>(r0);

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer> = $r30;

        goto label14;

     label13:
        $r24 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer>;

        virtualinvoke $r24.<org.apache.sshd.common.session.SessionWorkBuffer: void forceClear()>();

     label14:
        $r26 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $r25 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i16 = virtualinvoke $r25.<org.apache.sshd.common.session.SessionWorkBuffer: int rpos()>();

        $i17 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i18 = $i16 + $i17;

        $i19 = $i18 - 1;

        $i20 = $i19 - i55;

        virtualinvoke $r26.<org.apache.sshd.common.session.SessionWorkBuffer: void wpos(int)>($i20);

        $r29 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r28 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $r27 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer>;

        interfaceinvoke $r29.<org.apache.sshd.common.compression.Compression: void uncompress(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)>($r28, $r27);

        r68 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer uncompressBuffer>;

        goto label16;

     label15:
        $r69 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i56 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i57 = $i56 + 4;

        $i58 = $i57 - i55;

        virtualinvoke $r69.<org.apache.sshd.common.session.SessionWorkBuffer: void wpos(int)>($i58);

        r68 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

     label16:
        $r70 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z6 = interfaceinvoke $r70.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z6 == 0 goto label17;

        $r15 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.logging.SimplifiedLog getSimplifiedLogger()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer4227 = "decode(";

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4227);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4222 = ") packet #";

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4222);

        $l15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqi>;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r68.<org.apache.sshd.common.util.buffer.Buffer: void dumpHex(org.apache.sshd.common.util.logging.SimplifiedLog,java.lang.String,org.apache.sshd.common.PropertyResolver)>($r15, $r21, r0);

     label17:
        $r10 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r11 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $i9 = virtualinvoke r68.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $l10 = (long) $i9;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l10);

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void handleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r68);

        $r12 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        $i12 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderLength>;

        $i13 = $i12 + 4;

        $i14 = $i13 + i52;

        virtualinvoke $r12.<org.apache.sshd.common.session.SessionWorkBuffer: void rpos(int)>($i14);

        $r13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        virtualinvoke $r13.<org.apache.sshd.common.session.SessionWorkBuffer: void wpos(int)>(i7);

        $r14 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionWorkBuffer decoderBuffer>;

        virtualinvoke $r14.<org.apache.sshd.common.session.SessionWorkBuffer: void compact()>();

        varReplacer4230 = 0;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int decoderState> = varReplacer4230;

        goto label01;

     label18:
        return;
    }

    protected java.lang.String resolveIdentificationString(java.lang.String)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.FactoryManager r1;
        java.lang.String r2, r3, $r7, $r8, varReplacer4233;
        java.lang.StringBuilder $r4, $r5, $r6;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r2 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        r3 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: java.lang.String getString(org.apache.sshd.common.PropertyResolver,java.lang.String)>(r1, r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer4233 = "SSH-2.0-";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4233);

        $z0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: java.lang.String getVersion()>();

        goto label2;

     label1:
        $r8 = r3;

     label2:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected org.apache.sshd.common.io.IoWriteFuture sendIdentification(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String r1, $r4, $r13, $r14, varReplacer4236, varReplacer4237;
        java.nio.charset.Charset $r5;
        byte[] r6;
        org.apache.sshd.common.session.helpers.AbstractSession r7;
        org.slf4j.Logger $r8, $r12;
        boolean $z0;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r9;
        org.apache.sshd.common.io.IoSession $r10;
        org.apache.sshd.common.io.IoWriteFuture $r11;
        int varReplacer4234, varReplacer4235, varReplacer4238, varReplacer4239;

        nop;

        r7 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer4236 = "\r\n";

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4236);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $r8 = r7.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r12 = r7.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4238 = 13;

        varReplacer4239 = 124;

        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(varReplacer4238, varReplacer4239);

        varReplacer4234 = 10;

        varReplacer4235 = 124;

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(char,char)>(varReplacer4234, varReplacer4235);

        varReplacer4237 = "sendIdentification({}): {}";

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4237, r7, $r14);

     label1:
        $r10 = r7.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r9 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r9.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[])>(r6);

        $r11 = interfaceinvoke $r10.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>($r9);

        return $r11;
    }

    protected abstract boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException;

    protected java.util.List doReadIdentification(org.apache.sshd.common.util.buffer.Buffer, boolean)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, varReplacer4241, varReplacer4243, varReplacer4249, varReplacer4255, varReplacer4257;
        org.apache.sshd.common.util.buffer.Buffer r1;
        byte[] r2;
        byte b2;
        java.lang.IllegalStateException $r3, $r12, $r24, $r31;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r13, $r14, $r15, $r16, $r19, $r25, $r26, $r27, $r32, $r33, $r34, $r35, $r36, $r37, $r40, $r41;
        java.lang.String $r8, $r11, $r17, $r20, $r21, $r28, $r38, $r42, r44, varReplacer4240, varReplacer4242, varReplacer4244, varReplacer4245, varReplacer4246, varReplacer4247, varReplacer4248, varReplacer4250, varReplacer4251, varReplacer4252, varReplacer4254, varReplacer4256;
        java.nio.charset.Charset $r9, $r18, $r22, $r39;
        org.slf4j.Logger $r23, $r30;
        boolean $z0, z2, $z3, z4;
        java.util.ArrayList $r29, r43;
        null_type varReplacer4253;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        z2 := @parameter1: boolean;

        varReplacer4254 = "max-identification-size";

        varReplacer4255 = 16384;

        i0 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)>(r0, varReplacer4254, varReplacer4255);

        r43 = null;

        i1 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        r2 = newarray (byte)[256];

     label01:
        i13 = 0;

        z4 = 0;

     label02:
        $i14 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        if $i14 != 0 goto label03;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i1);

        varReplacer4253 = null;

        return varReplacer4253;

     label03:
        b2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: byte getByte()>();

        if b2 != 0 goto label04;

        $r31 = new java.lang.IllegalStateException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        varReplacer4252 = "Incorrect identification (null characters not allowed) -  at line ";

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4252);

        $i10 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int size(java.util.Collection)>(r43);

        $i11 = $i10 + 1;

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        varReplacer4245 = " character #";

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4245);

        $i12 = i13 + 1;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        varReplacer4250 = " after \'";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4250);

        $r38 = new java.lang.String;

        $r39 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        varReplacer4257 = 0;

        specialinvoke $r38.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, varReplacer4257, i13, $r39);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        varReplacer4256 = "\'";

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4256);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r42);

        throw $r31;

     label04:
        if b2 != 13 goto label05;

        z4 = 1;

        goto label02;

     label05:
        if b2 != 10 goto label06;

        goto label09;

     label06:
        if z4 == 0 goto label07;

        $r12 = new java.lang.IllegalStateException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        varReplacer4246 = "Incorrect identification (bad line ending)  at line ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4246);

        $i7 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int size(java.util.Collection)>(r43);

        $i8 = $i7 + 1;

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        varReplacer4247 = ": ";

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4247);

        $r17 = new java.lang.String;

        $r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        varReplacer4243 = 0;

        specialinvoke $r17.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, varReplacer4243, i13, $r18);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r12;

     label07:
        $i3 = lengthof r2;

        if i13 < $i3 goto label08;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer4240 = "Incorrect identification (line too long):  at line ";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4240);

        $i5 = staticinvoke <org.apache.sshd.common.util.GenericUtils: int size(java.util.Collection)>(r43);

        $i6 = $i5 + 1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        varReplacer4248 = ": ";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4248);

        $r8 = new java.lang.String;

        $r9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        varReplacer4241 = 0;

        specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, varReplacer4241, i13, $r9);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label08:
        $i4 = i13;

        i13 = i13 + 1;

        r2[$i4] = b2;

        goto label02;

     label09:
        $r21 = new java.lang.String;

        $r22 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        varReplacer4249 = 0;

        specialinvoke $r21.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, varReplacer4249, i13, $r22);

        r44 = $r21;

        $r23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r23.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label10;

        $r30 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4251 = "doReadIdentification({}) line=\'{}\'";

        interfaceinvoke $r30.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4251, r0, r44);

     label10:
        if r43 != null goto label11;

        $r29 = new java.util.ArrayList;

        specialinvoke $r29.<java.util.ArrayList: void <init>()>();

        r43 = $r29;

     label11:
        interfaceinvoke r43.<java.util.List: boolean add(java.lang.Object)>(r44);

        if z2 != 0 goto label12;

        varReplacer4242 = "SSH-";

        $z3 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer4242);

        if $z3 == 0 goto label13;

     label12:
        return r43;

     label13:
        $i9 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i9 <= i0 goto label14;

        $r24 = new java.lang.IllegalStateException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        varReplacer4244 = "Incorrect identification (too many header lines): size > ";

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4244);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label14:
        goto label01;
    }

    protected java.util.Map createProposal(java.lang.String)
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.apache.sshd.common.kex.KexProposalOption $r3, $r10, $r16, $r18, $r24, $r26, $r32, $r34, $r36, $r38;
        java.util.List $r4, $r12, $r20, $r28;
        java.lang.Object[] $r5, $r13, $r21, $r29;
        java.util.Collection $r6, $r14, $r22, $r30;
        java.lang.String $r7, r9, r15, r23, r31, varReplacer4258, varReplacer4259, varReplacer4260, varReplacer4261, varReplacer4262, varReplacer4263;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r9 := @parameter0: java.lang.String;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        $r3 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r4 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getKeyExchangeFactories()>();

        $r5 = newarray (java.lang.Object)[0];

        varReplacer4263 = "No KEX factories";

        $r6 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r4, varReplacer4263, $r5);

        $r7 = staticinvoke <org.apache.sshd.common.NamedResource: java.lang.String getNames(java.util.Collection)>($r6);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

        $r10 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption SERVERKEYS>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r9);

        $r12 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCipherFactories()>();

        $r13 = newarray (java.lang.Object)[0];

        varReplacer4259 = "No cipher factories";

        $r14 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r12, varReplacer4259, $r13);

        r15 = staticinvoke <org.apache.sshd.common.NamedResource: java.lang.String getNames(java.util.Collection)>($r14);

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r15);

        $r18 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r15);

        $r20 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getMacFactories()>();

        $r21 = newarray (java.lang.Object)[0];

        varReplacer4262 = "No MAC factories";

        $r22 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r20, varReplacer4262, $r21);

        r23 = staticinvoke <org.apache.sshd.common.NamedResource: java.lang.String getNames(java.util.Collection)>($r22);

        $r24 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r23);

        $r26 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r23);

        $r28 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCompressionFactories()>();

        $r29 = newarray (java.lang.Object)[0];

        varReplacer4258 = "No compression factories";

        $r30 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r28, varReplacer4258, $r29);

        r31 = staticinvoke <org.apache.sshd.common.NamedResource: java.lang.String getNames(java.util.Collection)>($r30);

        $r32 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r31);

        $r34 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r31);

        $r36 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        varReplacer4261 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, varReplacer4261);

        $r38 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        varReplacer4260 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, varReplacer4260);

        return r1;
    }

    protected byte[] sendKexInit(java.util.Map) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r6, $r13, $r16, $r18, $r21;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.util.buffer.Buffer r2;
        int i0, $i1, varReplacer4267, varReplacer4268, varReplacer4269, varReplacer4271, varReplacer4272;
        org.apache.sshd.common.random.Random $r3, $r4, r23;
        byte[] $r5, $r19, r27;
        java.util.List $r7;
        java.lang.Object $r9, $r11;
        java.util.Map r10;
        java.lang.String r12, $r14, $r17, $r20, varReplacer4265, varReplacer4266, varReplacer4270;
        java.lang.Object[] $r15;
        java.lang.Throwable $r22, r24;
        java.util.Iterator r25;
        org.apache.sshd.common.kex.KexProposalOption r26;
        long varReplacer4264;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r10 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r21 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4265 = "sendKexInit({}) Send SSH_MSG_KEXINIT";

        interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer4265, r0);

     label01:
        varReplacer4267 = 20;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer4267);

        i0 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i1 = i0 + 16;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i1);

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        r23 = $r3;

        entermonitor $r3;

     label02:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r5 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer4268 = 16;

        interfaceinvoke $r4.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r5, i0, varReplacer4268);

        exitmonitor r23;

     label03:
        goto label06;

     label04:
        $r22 := @caughtexception;

        r24 = $r22;

        exitmonitor r23;

     label05:
        throw r24;

     label06:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label07;

        $r18 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r19 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer4271 = 16;

        varReplacer4272 = 58;

        $r20 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String toHex(byte[],int,int,char)>($r19, i0, varReplacer4271, varReplacer4272);

        varReplacer4270 = "sendKexInit({}) cookie={}";

        interfaceinvoke $r18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4270, r0, $r20);

     label07:
        $r7 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r25 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r9 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (org.apache.sshd.common.kex.KexProposalOption) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r26);

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z2 == 0 goto label09;

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = r0;

        $r17 = virtualinvoke r26.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r15[1] = $r17;

        $r15[2] = r12;

        varReplacer4266 = "sendKexInit(}|)[{}] {}";

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer4266, $r15);

     label09:
        $r14 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String trimToEmpty(java.lang.String)>(r12);

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>($r14);

        goto label08;

     label10:
        varReplacer4269 = 0;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putBoolean(boolean)>(varReplacer4269);

        varReplacer4264 = 0L;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>(varReplacer4264);

        r27 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] getCompactData()>();

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return r27;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    protected byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer, java.util.Map)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        byte[] r1, r2, r25;
        int $i0, $i1, i2, $i3, $i4, $i5, i7, i8, i10, i11, varReplacer4273, varReplacer4274, varReplacer4275, varReplacer4280, varReplacer4281;
        org.apache.sshd.common.session.helpers.AbstractSession r3;
        org.slf4j.Logger $r4, $r7, $r8, $r9, $r12, $r16, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r5;
        java.lang.Boolean $r6, $r11;
        byte $b6, b9;
        java.lang.Long $r10;
        java.lang.Object $r13;
        org.apache.sshd.common.kex.KexProposalOption r14;
        java.lang.String r15, $r21, $r23, varReplacer4276, varReplacer4277, varReplacer4278, varReplacer4279;
        java.util.Map r17;
        java.lang.Object[] $r19;
        java.util.Iterator r24;
        long l12;

        nop;

        r3 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r17 := @parameter1: java.util.Map;

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i1 = $i0 + 1;

        r2 = newarray (byte)[$i1];

        r2[0] = 20;

        b9 = 6;

        i2 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        varReplacer4273 = 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, varReplacer4273, $i4);

        $i5 = i2 + 16;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i5);

        i10 = b9 + 16;

        $r4 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r22 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4274 = 16;

        varReplacer4275 = 58;

        $r23 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String toHex(byte[],int,int,char)>(r1, i2, varReplacer4274, varReplacer4275);

        varReplacer4278 = "receiveKexInit({}) cookie={}";

        interfaceinvoke $r22.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4278, r3, $r23);

     label1:
        $r5 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r24 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r13 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.sshd.common.kex.KexProposalOption) $r13;

        i11 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        r15 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r16 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r16.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z4 == 0 goto label3;

        $r20 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r19 = newarray (java.lang.Object)[3];

        $r19[0] = r3;

        $r21 = virtualinvoke r14.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r19[1] = $r21;

        $r19[2] = r15;

        varReplacer4276 = "receiveKexInit({})[{}] {}";

        interfaceinvoke $r20.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer4276, $r19);

     label3:
        i7 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i8 = i7 - i11;

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r15);

        i10 = i10 + i8;

        goto label2;

     label4:
        $z1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean getBoolean()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r3.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows> = $r6;

        $r7 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z2 == 0 goto label5;

        $r12 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r11 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        varReplacer4277 = "receiveKexInit({}) first kex packet follows: {}";

        interfaceinvoke $r12.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4277, r3, $r11);

     label5:
        l12 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: long getUInt()>();

        $b6 = l12 cmp 0L;

        if $b6 == 0 goto label6;

        $r8 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label6;

        $r9 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l12);

        varReplacer4279 = "receiveKexInit({}) non-zero reserved value: {}";

        interfaceinvoke $r9.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4279, r3, $r10);

     label6:
        r25 = newarray (byte)[i10];

        varReplacer4280 = 0;

        varReplacer4281 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, varReplacer4280, r25, varReplacer4280, i10);

        return r25;
    }

    protected org.apache.sshd.common.io.IoWriteFuture sendNewKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.io.IoWriteFuture $r3;
        int varReplacer4282, varReplacer4283;
        java.lang.String varReplacer4284;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4284 = "sendNewKeys({}) Send SSH_MSG_NEWKEYS";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer4284, r0);

     label1:
        varReplacer4282 = 21;

        varReplacer4283 = 8;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4282, varReplacer4283);

        $r3 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return $r3;
    }

    protected void receiveNewKeys() throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1, $r3, $r5;
        byte[] r2, r4, $r7, r9, r10, r11, $r39, $r82, $r84, $r88, $r89, r92, r94, r96, r98, r104, r107, r110, r113;
        org.apache.sshd.common.digest.Digest r6;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer r8, $r87;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, $i12, $i13, $i17, $i18, $i21, $i25, $i29, $i33, $i37, $i39, varReplacer4285, varReplacer4288, varReplacer4289, varReplacer4290, varReplacer4292, varReplacer4294, varReplacer4297, varReplacer4298, varReplacer4300, varReplacer4301, varReplacer4304, varReplacer4307, varReplacer4308, varReplacer4314, varReplacer4315;
        org.apache.sshd.common.cipher.Cipher r12, r25, $r34, $r37, $r42, $r43, $r54, $r55;
        org.apache.sshd.common.kex.KexProposalOption $r13, $r17, $r21, $r26, $r30, $r99;
        java.util.List $r14, $r18, $r22, $r27, $r31, $r101;
        java.lang.Object $r15, $r19, $r23, $r24, $r28, $r32, $r81, $r102, $r103;
        org.apache.sshd.common.mac.Mac r16, r29, $r38;
        org.apache.sshd.common.compression.Compression r20, r33, $r36, $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.sshd.common.compression.Compression$Type $r35, $r40;
        long l14, $l15, $l16, varReplacer4286, varReplacer4287, varReplacer4299, varReplacer4302, varReplacer4305, varReplacer4309;
        java.util.concurrent.atomic.AtomicLong $r44, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r58;
        org.slf4j.Logger $r45, $r56, $r83, $r85;
        java.lang.Object[] $r53;
        java.lang.Long $r57;
        org.apache.sshd.common.SshException $r59, $r64, $r70, $r75;
        java.lang.StringBuilder $r60, $r61, $r62, $r65, $r66, $r67, $r71, $r72, $r73, $r76, $r77, $r78;
        java.lang.String $r63, $r68, $r74, $r79, $r86, r100, r106, r108, r109, r112, r114, varReplacer4291, varReplacer4293, varReplacer4295, varReplacer4296, varReplacer4303, varReplacer4306, varReplacer4310, varReplacer4312, varReplacer4313;
        byte $b20, $b22, $b24, $b26, $b28, $b30, $b32, $b34, $b36, $b38;
        org.apache.sshd.common.cipher.Cipher$Mode $r105, $r111;
        null_type varReplacer4311;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r2 = interfaceinvoke $r1.<org.apache.sshd.common.kex.KeyExchange: byte[] getK()>();

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r4 = interfaceinvoke $r3.<org.apache.sshd.common.kex.KeyExchange: byte[] getH()>();

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r6 = interfaceinvoke $r5.<org.apache.sshd.common.kex.KeyExchange: org.apache.sshd.common.digest.Digest getHash()>();

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        if $r7 != null goto label01;

        $r81 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r82 = (byte[]) $r81;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId> = $r82;

        $r83 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r83.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label01;

        $r85 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r84 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        varReplacer4307 = 58;

        $r86 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String toHex(char,byte[])>(varReplacer4307, $r84);

        varReplacer4295 = "receiveNewKeys({}) session ID={}";

        interfaceinvoke $r85.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4295, r0, $r86);

     label01:
        $r87 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r87.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r8 = $r87;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r4);

        varReplacer4300 = 65;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(varReplacer4300);

        $r88 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>($r88);

        i0 = virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        r9 = virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer4314 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4314, i0);

        r10 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r89 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sessionId>;

        $i17 = lengthof $r89;

        $i18 = i0 - $i17;

        i1 = $i18 - 1;

        $b20 = r9[i1];

        $i21 = $b20 + 1;

        $b22 = (byte) $i21;

        r9[i1] = $b22;

        varReplacer4292 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4292, i0);

        r11 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b24 = r9[i1];

        $i25 = $b24 + 1;

        $b26 = (byte) $i25;

        r9[i1] = $b26;

        varReplacer4294 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4294, i0);

        r92 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b28 = r9[i1];

        $i29 = $b28 + 1;

        $b30 = (byte) $i29;

        r9[i1] = $b30;

        varReplacer4308 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4308, i0);

        r94 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b32 = r9[i1];

        $i33 = $b32 + 1;

        $b34 = (byte) $i33;

        r9[i1] = $b34;

        varReplacer4288 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4288, i0);

        r96 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b36 = r9[i1];

        $i37 = $b36 + 1;

        $b38 = (byte) $i37;

        r9[i1] = $b38;

        varReplacer4289 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer4289, i0);

        r98 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r99 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        r100 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r99);

        $r101 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCipherFactories()>();

        $r102 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r101, r100);

        varReplacer4312 = "Unknown s2c cipher: %s";

        $r103 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r102, varReplacer4312, r100);

        r12 = (org.apache.sshd.common.cipher.Cipher) $r103;

        $i39 = interfaceinvoke r12.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r104 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r94, $i39, r6, r2, r4);

        $z4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isServer>;

        if $z4 == 0 goto label02;

        $r105 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

        goto label03;

     label02:
        $r105 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

     label03:
        interfaceinvoke r12.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r105, r104, r11);

        $r13 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        r106 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r13);

        $r14 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getMacFactories()>();

        $r15 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r14, r106);

        r16 = (org.apache.sshd.common.mac.Mac) $r15;

        if r16 != null goto label04;

        $r75 = new org.apache.sshd.common.SshException;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        varReplacer4293 = "Unknown s2c MAC: ";

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4293);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r106);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4315 = 5;

        specialinvoke $r75.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4315, $r79);

        throw $r75;

     label04:
        $i2 = interfaceinvoke r16.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r107 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r98, $i2, r6, r2, r4);

        interfaceinvoke r16.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r107);

        $r17 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        r108 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r17);

        $r18 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCompressionFactories()>();

        $r19 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r18, r108);

        r20 = (org.apache.sshd.common.compression.Compression) $r19;

        if r20 != null goto label05;

        $r70 = new org.apache.sshd.common.SshException;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        varReplacer4303 = "Unknown s2c compression: ";

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4303);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4304 = 6;

        specialinvoke $r70.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4304, $r74);

        throw $r70;

     label05:
        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        r109 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r21);

        $r22 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCipherFactories()>();

        $r23 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r22, r109);

        varReplacer4306 = "Unknown c2s cipher: %s";

        $r24 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r23, varReplacer4306, r109);

        r25 = (org.apache.sshd.common.cipher.Cipher) $r24;

        $i3 = interfaceinvoke r25.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r110 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r92, $i3, r6, r2, r4);

        $z0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isServer>;

        if $z0 == 0 goto label06;

        $r111 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

        goto label07;

     label06:
        $r111 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

     label07:
        interfaceinvoke r25.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r111, r110, r10);

        $r26 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        r112 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r26);

        $r27 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getMacFactories()>();

        $r28 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r27, r112);

        r29 = (org.apache.sshd.common.mac.Mac) $r28;

        if r29 != null goto label08;

        $r64 = new org.apache.sshd.common.SshException;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        varReplacer4291 = "Unknown c2s MAC: ";

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4291);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r112);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4290 = 5;

        specialinvoke $r64.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4290, $r68);

        throw $r64;

     label08:
        $i4 = interfaceinvoke r29.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r113 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r96, $i4, r6, r2, r4);

        interfaceinvoke r29.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r113);

        $r30 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        r114 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r30);

        $r31 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.List getCompressionFactories()>();

        $r32 = staticinvoke <org.apache.sshd.common.NamedFactory: java.lang.Object create(java.util.Collection,java.lang.String)>($r31, r114);

        r33 = (org.apache.sshd.common.compression.Compression) $r32;

        if r33 != null goto label09;

        $r59 = new org.apache.sshd.common.SshException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        varReplacer4313 = "Unknown c2s compression: ";

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4313);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer4297 = 6;

        specialinvoke $r59.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4297, $r63);

        throw $r59;

     label09:
        $z1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isServer>;

        if $z1 == 0 goto label10;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r12;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r16;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r20;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r25;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r29;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r33;

        goto label11;

     label10:
        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r25;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r29;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r33;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r12;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r16;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r20;

     label11:
        $r34 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $i5 = interfaceinvoke $r34.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int outCipherSize> = $i5;

        $r36 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $r35 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Deflater>;

        varReplacer4298 = -1;

        interfaceinvoke $r36.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r35, varReplacer4298);

        $r37 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i6 = interfaceinvoke $r37.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: int inCipherSize> = $i6;

        $r38 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i7 = interfaceinvoke $r38.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        $r39 = newarray (byte)[$i7];

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] inMacResult> = $r39;

        $r41 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r40 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Inflater>;

        varReplacer4285 = -1;

        interfaceinvoke $r41.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r40, varReplacer4285);

        $r42 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        i8 = interfaceinvoke $r42.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        $r43 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        i9 = interfaceinvoke $r43.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i9);

        $i11 = i10 * 8;

        $i12 = $i11 / 4;

        varReplacer4301 = 63;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, varReplacer4301);

        l14 = 1L << $i13;

        $r44 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        varReplacer4310 = "rekey-blocks-limit";

        $l15 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4310, l14);

        virtualinvoke $r44.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l15);

        $r45 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r45.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label12;

        $r56 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r53 = newarray (java.lang.Object)[5];

        $r53[0] = r0;

        $r54 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $r53[1] = $r54;

        $r55 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $r53[2] = $r55;

        $r57 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14);

        $r53[3] = $r57;

        $r58 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        $r53[4] = $r58;

        varReplacer4296 = "receiveNewKeys({}) inCipher={}, outCipher={}, recommended blocks limit={}, actual={}";

        interfaceinvoke $r56.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4296, $r53);

     label12:
        $r46 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        varReplacer4302 = 0L;

        virtualinvoke $r46.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4302);

        $r47 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        varReplacer4287 = 0L;

        virtualinvoke $r47.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4287);

        $r48 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        varReplacer4299 = 0L;

        virtualinvoke $r48.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4299);

        $r49 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        varReplacer4286 = 0L;

        virtualinvoke $r49.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4286);

        $r50 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer4309 = 0L;

        virtualinvoke $r50.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4309);

        $r51 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        varReplacer4305 = 0L;

        virtualinvoke $r51.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer4305);

        $r52 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r52.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l16);

        varReplacer4311 = null;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer4311;

        return;
    }

    protected byte[] resizeKey(byte[], int, org.apache.sshd.common.digest.Digest, byte[], byte[]) throws java.lang.Exception
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, varReplacer4316, varReplacer4317, varReplacer4318, varReplacer4319;
        byte[] r0, r1, $r3, r4, r5, r8;
        org.apache.sshd.common.digest.Digest r2;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r6;
        org.apache.sshd.common.session.helpers.AbstractSession r7;
        org.apache.sshd.common.util.buffer.Buffer r9;

        nop;

        r7 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r8 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.sshd.common.digest.Digest;

        r0 := @parameter3: byte[];

        r1 := @parameter4: byte[];

        r9 = null;

     label1:
        $i1 = lengthof r8;

        if i0 <= $i1 goto label3;

        if r9 != null goto label2;

        $r6 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r6.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r9 = $r6;

     label2:
        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r0);

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r1);

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r8);

        $r3 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i2 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        varReplacer4316 = 0;

        interfaceinvoke r2.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>($r3, varReplacer4316, $i2);

        r4 = interfaceinvoke r2.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $i4 = lengthof r8;

        $i3 = lengthof r4;

        $i5 = $i4 + $i3;

        r5 = newarray (byte)[$i5];

        $i6 = lengthof r8;

        varReplacer4318 = 0;

        varReplacer4319 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, varReplacer4318, r5, varReplacer4318, $i6);

        $i8 = lengthof r8;

        $i7 = lengthof r4;

        varReplacer4317 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, varReplacer4317, r5, $i8, $i7);

        r8 = r5;

        r9 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: org.apache.sshd.common.util.buffer.Buffer clear(org.apache.sshd.common.util.buffer.Buffer)>(r9);

        goto label1;

     label3:
        return r8;
    }

    public void disconnect(int, java.lang.String) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.Object[] $r1;
        int i0, $i1, $i2, varReplacer4322;
        org.slf4j.Logger $r2;
        java.lang.String $r3, r4, varReplacer4320, varReplacer4321, varReplacer4323;
        org.apache.sshd.common.util.buffer.Buffer r5;
        long $l3, $l4, l5;
        java.util.concurrent.TimeUnit $r6;
        org.apache.sshd.common.io.IoWriteFuture $r7;
        org.apache.sshd.common.future.SshFutureListener $r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r3 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r1[1] = $r3;

        $r1[2] = r4;

        varReplacer4323 = "Disconnecting({}): {} - {}";

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>(varReplacer4323, $r1);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 + 16;

        varReplacer4322 = 1;

        r5 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4322, $i2);

        $l3 = (long) i0;

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l3);

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r4);

        varReplacer4321 = "";

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(varReplacer4321);

        $l4 = <org.apache.sshd.common.FactoryManager: long DEFAULT_DISCONNECT_TIMEOUT>;

        varReplacer4320 = "disconnect-timeout";

        l5 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4320, $l4);

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r7 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)>(r5, l5, $r6);

        $r8 = staticinvoke <org.apache.sshd.common.session.helpers.AbstractSession$lambda_disconnect_2__115: org.apache.sshd.common.future.SshFutureListener bootstrap$(org.apache.sshd.common.session.helpers.AbstractSession,int,java.lang.String)>(r0, i0, r4);

        interfaceinvoke $r7.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r8);

        return;
    }

    protected org.apache.sshd.common.io.IoWriteFuture notImplemented() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, $l1;
        org.apache.sshd.common.io.IoWriteFuture $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long seqi>;

        $l1 = $l0 - 1L;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long)>($l1);

        return $r1;
    }

    protected org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        long l0;
        org.apache.sshd.common.io.IoWriteFuture $r2;
        int varReplacer4324, varReplacer4325;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        l0 := @parameter0: long;

        varReplacer4324 = 3;

        varReplacer4325 = 8;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer4324, varReplacer4325);

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>(l0);

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        return $r2;
    }

    protected java.util.Map negotiate()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        java.util.Map $r2, r3, $r4, r5, r8, $r10;
        java.util.EnumMap $r6, r7;
        java.util.List $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r11, $r13, $r15, $r19, $r51;
        org.apache.sshd.common.kex.KexProposalOption r12, $r45, $r48;
        java.lang.String r14, r16, $r26, $r35, $r38, r50, r52, r58, r59, r60, varReplacer4326, varReplacer4328, varReplacer4329, varReplacer4330, varReplacer4331, varReplacer4334, varReplacer4335, varReplacer4336, varReplacer4337, varReplacer4338, varReplacer4339;
        java.lang.String[] r17, r18, r56, r57;
        org.slf4j.Logger $r20, $r22, $r46, $r47;
        java.lang.StringBuilder $r21, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r39, $r40, $r41, $r42, $r43, $r44;
        java.lang.IllegalStateException $r49;
        int i0, i1, i2, i3, varReplacer4327, varReplacer4332;
        java.lang.Throwable $r54, r61;
        java.util.Iterator r55;
        null_type varReplacer4333;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map clientProposal>;

        r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map serverProposal>;

        r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

        interfaceinvoke r1.<org.apache.sshd.common.session.SessionListener: void sessionNegotiationStart(org.apache.sshd.common.session.Session,java.util.Map,java.util.Map)>(r0, r3, r5);

        $r6 = new java.util.EnumMap;

        specialinvoke $r6.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r7 = $r6;

        r8 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r7);

     label01:
        $r9 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r55 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r11 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.sshd.common.kex.KexProposalOption) $r11;

        $r13 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r14 = (java.lang.String) $r13;

        $r15 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r16 = (java.lang.String) $r15;

        varReplacer4332 = 44;

        r17 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r14, varReplacer4332);

        varReplacer4327 = 44;

        r18 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r16, varReplacer4327);

        r56 = r17;

        i1 = lengthof r56;

        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

        r50 = r56[i2];

        r57 = r18;

        i0 = lengthof r57;

        i3 = 0;

     label04:
        if i3 >= i0 goto label06;

        r52 = r57[i3];

        $z5 = virtualinvoke r50.<java.lang.String: boolean equals(java.lang.Object)>(r52);

        if $z5 == 0 goto label05;

        interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r50);

        goto label06;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        $r51 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r58 = (java.lang.String) $r51;

        if r58 == null goto label07;

        goto label08;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        $r19 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r59 = (java.lang.String) $r19;

        if r59 != null goto label12;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        varReplacer4329 = "Unable to negotiate key exchange for ";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4329);

        $r38 = virtualinvoke r12.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        varReplacer4328 = " (client: ";

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4328);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        varReplacer4339 = " / server: ";

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4339);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        varReplacer4326 = ")";

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4326);

        r60 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        $z2 = virtualinvoke $r45.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r12);

        if $z2 != 0 goto label09;

        $r48 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        $z4 = virtualinvoke $r48.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r12);

        if $z4 == 0 goto label10;

     label09:
        $r46 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r46.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label11;

        $r47 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4337 = "negotiate({}) {}";

        interfaceinvoke $r47.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4337, r0, r60);

        goto label11;

     label10:
        $r49 = new java.lang.IllegalStateException;

        specialinvoke $r49.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r60);

        throw $r49;

     label11:
        goto label13;

     label12:
        $r20 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label13;

        $r22 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        varReplacer4334 = "negotiate(";

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4334);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4335 = ")[";

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4335);

        $r26 = virtualinvoke r12.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        varReplacer4338 = "] guess=";

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4338);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        varReplacer4331 = " (client: ";

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4331);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        varReplacer4336 = " / server: ";

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4336);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        varReplacer4330 = ")";

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4330);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void trace(java.lang.String)>($r35);

     label13:
        goto label02;

     label14:
        goto label16;

     label15:
        $r54 := @caughtexception;

        r61 = $r54;

        interfaceinvoke r1.<org.apache.sshd.common.session.SessionListener: void sessionNegotiationEnd(org.apache.sshd.common.session.Session,java.util.Map,java.util.Map,java.util.Map,java.lang.Throwable)>(r0, r3, r5, r8, r61);

        throw r61;

     label16:
        varReplacer4333 = null;

        interfaceinvoke r1.<org.apache.sshd.common.session.SessionListener: void sessionNegotiationEnd(org.apache.sshd.common.session.Session,java.util.Map,java.util.Map,java.util.Map,java.lang.Throwable)>(r0, r3, r5, r8, varReplacer4333);

        $r10 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map setNegotiationResult(java.util.Map)>(r7);

        return $r10;

        catch java.lang.RuntimeException from label01 to label14 with label15;
        catch java.lang.Error from label01 to label14 with label15;
    }

    protected java.util.Map setNegotiationResult(java.util.Map)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.Map $r1, r2, $r3, r4, $r5, $r23;
        boolean $z0, $z1;
        org.slf4j.Logger $r6, $r9, $r17;
        java.lang.Object[] $r7, $r15;
        org.apache.sshd.common.kex.KexProposalOption $r8, $r11, $r13, $r16, $r19, $r21;
        java.lang.Object $r10, $r12, $r14, $r18, $r20, $r22;
        java.lang.Throwable $r24, r25;
        java.lang.String varReplacer4340, varReplacer4341;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r4 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r23 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r23.<java.util.Map: void clear()>();

     label2:
        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>(r4);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r24 := @caughtexception;

        r25 = $r24;

        exitmonitor r2;

     label5:
        throw r25;

     label6:
        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label7;

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r7 = newarray (java.lang.Object)[4];

        $r7[0] = r0;

        $r8 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        $r10 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r7[1] = $r10;

        $r11 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        $r12 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r7[2] = $r12;

        $r13 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r7[3] = $r14;

        varReplacer4340 = "setNegotiationResult({}) Kex: server->client {} {} {}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4340, $r7);

        $r17 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r0;

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        $r18 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r15[1] = $r18;

        $r19 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        $r20 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r15[2] = $r20;

        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        $r22 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r15[3] = $r22;

        varReplacer4341 = "setNegotiationResult({}) Kex: client->server {} {} {}";

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4341, $r15);

     label7:
        return r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void requestSuccess(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        byte[] $r1;
        int $i0, $i1;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer r2;
        org.apache.sshd.common.session.helpers.AbstractSession r3;
        java.util.concurrent.atomic.AtomicReference $r4, r5, $r6, $r7;
        java.lang.Throwable $r8, r9;

        nop;

        r3 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        r2 = staticinvoke <org.apache.sshd.common.util.buffer.ByteArrayBuffer: org.apache.sshd.common.util.buffer.ByteArrayBuffer getCompactClone(byte[],int,int)>($r1, $i0, $i1);

        $r4 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r5 = $r4;

        entermonitor $r4;

     label1:
        $r6 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        virtualinvoke r3.<org.apache.sshd.common.session.helpers.AbstractSession: void resetIdleTimeout()>();

        $r7 = r3.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r5;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r9 = $r8;

        exitmonitor r5;

     label4:
        throw r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void requestFailure(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r4, $r5;
        java.lang.Object $r3;
        java.lang.Throwable $r6, r7;
        org.apache.sshd.common.util.buffer.Buffer r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r8 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r3 = <org.apache.sshd.common.util.GenericUtils: java.lang.Object NULL>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void resetIdleTimeout()>();

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        exitmonitor r2;

     label4:
        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object getAttribute(org.apache.sshd.common.AttributeStore$AttributeKey)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.AttributeStore$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String varReplacer4342;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.AttributeStore$AttributeKey;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map attributes>;

        varReplacer4342 = "No key";

        $r3 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, varReplacer4342);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        return $r4;
    }

    public java.lang.Object setAttribute(org.apache.sshd.common.AttributeStore$AttributeKey, java.lang.Object)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.AttributeStore$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3, r4, $r5, $r6;
        java.lang.String varReplacer4343, varReplacer4344;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.AttributeStore$AttributeKey;

        r4 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map attributes>;

        varReplacer4344 = "No key";

        $r3 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, varReplacer4344);

        varReplacer4343 = "No value";

        $r5 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r4, varReplacer4343);

        $r6 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        return $r6;
    }

    public java.lang.Object removeAttribute(org.apache.sshd.common.AttributeStore$AttributeKey)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.AttributeStore$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3, $r4;
        java.lang.String varReplacer4345;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.AttributeStore$AttributeKey;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map attributes>;

        varReplacer4345 = "No key";

        $r3 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, varReplacer4345);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        return $r4;
    }

    public java.lang.Object resolveAttribute(org.apache.sshd.common.AttributeStore$AttributeKey)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.AttributeStore$AttributeKey r1;
        java.lang.Object $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.AttributeStore$AttributeKey;

        $r2 = staticinvoke <org.apache.sshd.common.AttributeStore: java.lang.Object resolveAttribute(org.apache.sshd.common.session.Session,org.apache.sshd.common.AttributeStore$AttributeKey)>(r0, r1);

        return $r2;
    }

    public java.lang.String getUsername()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String username>;

        return $r1;
    }

    public void setUsername(java.lang.String)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.String r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String username> = r1;

        return;
    }

    public java.lang.Object getLock()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.Object $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object lock>;

        return $r1;
    }

    public org.apache.sshd.common.session.ReservedSessionMessagesHandler getReservedSessionMessagesHandler()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler $r1, $r3, $r5;
        org.apache.sshd.common.FactoryManager $r2;
        java.lang.Object $r4;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler reservedSessionMessagesHandler>;

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        $r3 = interfaceinvoke $r2.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.session.ReservedSessionMessagesHandler getReservedSessionMessagesHandler()>();

        $r4 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.Object resolveEffectiveProvider(java.lang.Class,java.lang.Object,java.lang.Object)>(class "Lorg/apache/sshd/common/session/ReservedSessionMessagesHandler;", $r1, $r3);

        $r5 = (org.apache.sshd.common.session.ReservedSessionMessagesHandler) $r4;

        return $r5;
    }

    public void setReservedSessionMessagesHandler(org.apache.sshd.common.session.ReservedSessionMessagesHandler)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.ReservedSessionMessagesHandler r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.ReservedSessionMessagesHandler;

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.ReservedSessionMessagesHandler reservedSessionMessagesHandler> = r1;

        return;
    }

    public void addSessionListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.SessionListener r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.slf4j.Logger $r4, $r5, $r6;
        java.lang.String varReplacer4346, varReplacer4347, varReplacer4348, varReplacer4349;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.session.SessionListener;

        varReplacer4346 = "addSessionListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer4346, r1);

        $z0 = virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r6 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4347 = "addSessionListener({})[{}] ignore registration while session is closing";

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4347, r1, r0);

        return;

     label1:
        $r3 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r5 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4349 = "addSessionListener({})[{}] registered";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4349, r1, r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4348 = "addSessionListener({})[{}] ignored duplicate";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4348, r1, r0);

     label3:
        return;
    }

    public void removeSessionListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        java.util.Collection $r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r4;
        java.lang.String varReplacer4350, varReplacer4351;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.SessionListener;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection sessionListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4351 = "removeSessionListener({})[{}] removed";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4351, r0, r1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4350 = "removeSessionListener({})[{}] not registered";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4350, r0, r1);

     label2:
        return;
    }

    public org.apache.sshd.common.session.SessionListener getSessionListenerProxy()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy>;

        return $r1;
    }

    public void addChannelListener(org.apache.sshd.common.channel.ChannelListener)
    {
        org.apache.sshd.common.channel.ChannelListener r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.slf4j.Logger $r4, $r5, $r6;
        java.lang.String varReplacer4352, varReplacer4353, varReplacer4354, varReplacer4355;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.channel.ChannelListener;

        varReplacer4352 = "addChannelListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer4352, r1);

        $z0 = virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r6 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4353 = "addChannelListener({})[{}] ignore registration while session is closing";

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4353, r1, r0);

        return;

     label1:
        $r3 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r5 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4355 = "addChannelListener({})[{}] registered";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4355, r1, r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4354 = "addChannelListener({})[{}] ignored duplicate";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4354, r1, r0);

     label3:
        return;
    }

    public void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.channel.ChannelListener r1;
        java.util.Collection $r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r4;
        java.lang.String varReplacer4356, varReplacer4357;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.channel.ChannelListener;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection channelListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4357 = "removeChannelListener({})[{}] removed";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4357, r0, r1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4356 = "removeChannelListener({})[{}] not registered";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4356, r0, r1);

     label2:
        return;
    }

    public org.apache.sshd.common.channel.ChannelListener getChannelListenerProxy()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.channel.ChannelListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.channel.ChannelListener channelListenerProxy>;

        return $r1;
    }

    public org.apache.sshd.common.forward.PortForwardingEventListener getPortForwardingEventListenerProxy()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.forward.PortForwardingEventListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.forward.PortForwardingEventListener tunnelListenerProxy>;

        return $r1;
    }

    public void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)
    {
        org.apache.sshd.common.forward.PortForwardingEventListener r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.slf4j.Logger $r4, $r5, $r6;
        java.lang.String varReplacer4358, varReplacer4359, varReplacer4360, varReplacer4361;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.forward.PortForwardingEventListener;

        varReplacer4361 = "addPortForwardingEventListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer4361, r1);

        $z0 = virtualinvoke r1.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r6 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4358 = "addPortForwardingEventListener({})[{}] ignore registration while session is closing";

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4358, r1, r0);

        return;

     label1:
        $r3 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection tunnelListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r5 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4360 = "addPortForwardingEventListener({})[{}] registered";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4360, r1, r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4359 = "addPortForwardingEventListener({})[{}] ignored duplicate";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4359, r1, r0);

     label3:
        return;
    }

    public void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)
    {
        org.apache.sshd.common.forward.PortForwardingEventListener r0;
        org.apache.sshd.common.session.helpers.AbstractSession r1;
        java.util.Collection $r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r4;
        java.lang.String varReplacer4362, varReplacer4363;

        nop;

        r1 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.forward.PortForwardingEventListener;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Collection tunnelListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r4 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4363 = "removePortForwardingEventListener({})[{}] removed";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4363, r1, r0);

        goto label3;

     label2:
        $r3 = r1.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4362 = "removePortForwardingEventListener({})[{}] not registered";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4362, r1, r0);

     label3:
        return;
    }

    protected void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event) throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        org.apache.sshd.common.session.SessionListener$Event r2;
        java.lang.Throwable $r3, r4, r5;
        org.slf4j.Logger $r6, $r7, $r21, $r29;
        boolean $z0, $z1, $z2, $z3;
        java.io.IOException $r8, $r19;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r16, $r20, $r22, $r23, $r24, $r25, $r26;
        java.lang.Class $r11, $r30;
        java.lang.String $r12, $r15, $r17, $r27, $r31, $r32, varReplacer4364, varReplacer4365, varReplacer4366, varReplacer4367, varReplacer4368, varReplacer4369;
        java.lang.RuntimeException $r18;
        java.lang.Object[] $r28;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.session.SessionListener$Event;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

     label1:
        interfaceinvoke r1.<org.apache.sshd.common.session.SessionListener: void sessionEvent(org.apache.sshd.common.session.Session,org.apache.sshd.common.session.SessionListener$Event)>(r0, r2);

     label2:
        goto label8;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        r5 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.Throwable peelException(java.lang.Throwable)>(r4);

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r29 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r28 = newarray (java.lang.Object)[4];

        $r28[0] = r0;

        $r28[1] = r2;

        $r30 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getSimpleName()>();

        $r28[2] = $r31;

        $r32 = virtualinvoke r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r28[3] = $r32;

        varReplacer4369 = "sendSessionEvent({})[{}] failed ({}) to inform listeners: {}";

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4369, $r28);

     label4:
        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label5;

        $r21 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        varReplacer4366 = "sendSessionEvent(";

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4366);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer4368 = ")[";

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4368);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        varReplacer4364 = "] listener inform details";

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4364);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r27, r5);

     label5:
        $z2 = r5 instanceof java.io.IOException;

        if $z2 == 0 goto label6;

        $r19 = (java.io.IOException) r5;

        throw $r19;

     label6:
        $z3 = r5 instanceof java.lang.RuntimeException;

        if $z3 == 0 goto label7;

        $r18 = (java.lang.RuntimeException) r5;

        throw $r18;

     label7:
        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        varReplacer4367 = "Failed (";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4367);

        $r11 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        varReplacer4365 = ") to send session event: ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4365);

        $r15 = virtualinvoke r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r17, r5);

        throw $r8;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.sshd.common.future.KeyExchangeFuture reExchangeKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r2, $r4;
        java.lang.Object $r3, $r5, $r6;
        org.apache.sshd.common.future.KeyExchangeFuture $r7;
        java.lang.String varReplacer4370;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()>();

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        varReplacer4370 = "No current KEX future on state=%s";

        $r6 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r3, varReplacer4370, $r5);

        $r7 = (org.apache.sshd.common.future.KeyExchangeFuture) $r6;

        return $r7;
    }

    protected org.apache.sshd.common.future.KeyExchangeFuture checkRekey() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        boolean $z0;
        org.apache.sshd.common.future.KeyExchangeFuture $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isRekeyRequired()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    protected org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.kex.KexState $r1, $r2;
        java.util.concurrent.atomic.AtomicReference $r3, $r8, $r16;
        boolean $z0, $z1;
        org.slf4j.Logger $r4, $r15, $r17;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture $r6, r7, r10, r11;
        java.lang.Object $r9, r13, $r18;
        org.apache.sshd.common.SshException $r14;
        java.lang.Throwable $r19, r20;
        java.lang.String varReplacer4371, varReplacer4372, varReplacer4373;
        null_type varReplacer4374, varReplacer4375;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 != 0 goto label2;

        $r15 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r15.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r17 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r16 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r18 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        varReplacer4372 = "requestNewKeysExchange({}) KEX state not DONE: {}";

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4372, r0, $r18);

     label1:
        varReplacer4375 = null;

        return varReplacer4375;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4371 = "requestNewKeysExchange({}) Initiating key re-exchange";

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>(varReplacer4371, r0);

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sendKexInit()>();

        $r6 = new org.apache.sshd.common.future.DefaultKeyExchangeFuture;

        varReplacer4374 = null;

        specialinvoke $r6.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void <init>(java.lang.Object)>(varReplacer4374);

        r7 = $r6;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(r7);

        r10 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r9;

        if r10 == null goto label8;

        r11 = r10;

        entermonitor r10;

     label3:
        r13 = virtualinvoke r10.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r13 != null goto label4;

        $r14 = new org.apache.sshd.common.SshException;

        varReplacer4373 = "New KEX started while previous one still ongoing";

        specialinvoke $r14.<org.apache.sshd.common.SshException: void <init>(java.lang.String)>(varReplacer4373);

        virtualinvoke r10.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r14);

     label4:
        exitmonitor r11;

     label5:
        goto label8;

     label6:
        $r19 := @caughtexception;

        r20 = $r19;

        exitmonitor r11;

     label7:
        throw r20;

     label8:
        return r7;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected boolean isRekeyRequired()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.kex.KexState r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int varReplacer4376;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.kex.KexState) $r2;

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $z0 = virtualinvoke $r4.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        varReplacer4376 = 0;

        return varReplacer4376;

     label1:
        $z1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isRekeyTimeIntervalExceeded()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isRekeyPacketCountsExceeded()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isRekeyBlocksCountExceeded()>();

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isRekeyDataSizeExceeded()>();

        if $z4 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    protected boolean isRekeyTimeIntervalExceeded()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, l2, $l3, l4, $l5, $l7, $l8;
        byte $b1, $b6;
        java.util.concurrent.atomic.AtomicLong $r1, $r5;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.util.Date $r4, $r7;
        java.lang.Long $r8, $r9;
        int varReplacer4377;
        java.lang.String varReplacer4378;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer4377 = 0;

        return varReplacer4377;

     label1:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = l2 - $l3;

        $l5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval>;

        $b6 = l4 cmp $l5;

        if $b6 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 == 0 goto label4;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[5];

        $r3[0] = r0;

        $r4 = new java.util.Date;

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l7 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l7);

        $r3[1] = $r4;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>(long)>(l2);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r3[3] = $r8;

        $l8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyInterval>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $r3[4] = $r9;

        varReplacer4378 = "isRekeyTimeIntervalExceeded({}) re-keying: last={}, now={}, diff={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4378, $r3);

     label4:
        return z0;
    }

    protected boolean isRekeyPacketCountsExceeded()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, $l2, $l3, $l5, $l6, $l7;
        byte $b1, $b4, $b8;
        java.util.concurrent.atomic.AtomicLong $r1, $r4, $r5, $r8;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.lang.Long $r7;
        java.lang.String varReplacer4379;
        int varReplacer4380;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer4380 = 0;

        return varReplacer4380;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets>;

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label2;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        $l6 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets>;

        $b8 = $l6 cmp $l7;

        if $b8 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        $r3[1] = $r4;

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        $r3[2] = $r5;

        $l5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekyPackets>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r3[3] = $r7;

        varReplacer4379 = "isRekeyPacketCountsExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4379, $r3);

     label5:
        return z0;
    }

    protected boolean isRekeyDataSizeExceeded()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, $l2, $l3, $l5, $l6, $l7;
        byte $b1, $b4, $b8;
        java.util.concurrent.atomic.AtomicLong $r1, $r4, $r5, $r8;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.lang.Long $r7;
        java.lang.String varReplacer4381;
        int varReplacer4382;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer4382 = 0;

        return varReplacer4382;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes>;

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label2;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $l6 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes>;

        $b8 = $l6 cmp $l7;

        if $b8 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $r3[1] = $r4;

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $r3[2] = $r5;

        $l5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long maxRekeyBytes>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r3[3] = $r7;

        varReplacer4381 = "isRekeyDataSizeExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4381, $r3);

     label5:
        return z0;
    }

    protected boolean isRekeyBlocksCountExceeded()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r5, $r6, $r9;
        long l0, $l2, $l4;
        byte $b1, $b3, $b5;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r3, $r7;
        java.lang.Object[] $r4;
        java.lang.Long $r8;
        int varReplacer4383;
        java.lang.String varReplacer4384;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer4383 = 0;

        return varReplacer4383;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l2 cmp l0;

        if $b3 > 0 goto label2;

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        $l4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b5 = $l4 cmp l0;

        if $b5 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r3 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r7 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = r0;

        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        $r4[1] = $r5;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        $r4[2] = $r6;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4[3] = $r8;

        varReplacer4384 = "isRekeyBlocksCountExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4384, $r4);

     label5:
        return z0;
    }

    protected byte[] sendKexInit() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.lang.String r1, $r7, varReplacer4386, varReplacer4388;
        boolean $z0, $z1;
        java.util.Map r2;
        byte[] r3;
        org.slf4j.Logger $r4, $r6;
        java.lang.Object[] $r5;
        org.apache.sshd.common.SshException $r8;
        int varReplacer4385, varReplacer4387;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String resolveAvailableSignaturesProposal()>();

        $z0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new org.apache.sshd.common.SshException;

        varReplacer4387 = 9;

        varReplacer4388 = "sendKexInit() no resolved signatures available";

        specialinvoke $r8.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer4387, varReplacer4388);

        throw $r8;

     label1:
        r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.Map createProposal(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] sendKexInit(java.util.Map)>(r2);

        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r0;

        $r5[1] = r2;

        varReplacer4385 = 58;

        $r7 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String toHex(char,byte[])>(varReplacer4385, r3);

        $r5[2] = $r7;

        varReplacer4386 = "sendKexInit({}) proposal={} seed: {}";

        interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer4386, $r5);

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void setKexSeed(byte[])>(r3);

        return r3;
    }

    protected abstract transient void setKexSeed(byte[]);

    protected java.lang.String resolveAvailableSignaturesProposal()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)>($r1);

        return $r2;
    }

    protected abstract java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager);

    protected abstract void checkKeys() throws java.io.IOException;

    protected void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.apache.sshd.common.util.buffer.Buffer r3;
        byte[] r4;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        r4 = virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)>(r3, r1);

        virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: void receiveKexInit(java.util.Map,byte[])>(r1, r4);

        return;
    }

    protected abstract void receiveKexInit(java.util.Map, byte[]) throws java.io.IOException;

    protected java.util.Map mergeProposals(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1, r2;
        boolean $z0, $z1;
        java.lang.Throwable $r4, r5;
        org.apache.sshd.common.session.helpers.AbstractSession r6;

        nop;

        r6 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        if r0 != r1 goto label1;

        return r1;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        interfaceinvoke r0.<java.util.Map: void clear()>();

     label3:
        $z1 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.util.Map)>(r1);

        if $z1 == 0 goto label5;

        exitmonitor r2;

     label4:
        return r1;

     label5:
        interfaceinvoke r0.<java.util.Map: void putAll(java.util.Map)>(r1);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r4 := @caughtexception;

        r5 = $r4;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return r1;

        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void checkForTimeouts() throws java.io.IOException
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        boolean $z0, $z1, $z2;
        long l0, $l1, $l2;
        java.lang.Object $r1, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus r2, $r3, $r11;
        org.slf4j.Logger $r4, $r8, $r9;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.lang.String $r7, varReplacer4389, varReplacer4390;
        org.apache.sshd.common.util.Pair r10;
        int varReplacer4391;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean isClosing()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4389 = "checkForTimeouts({}) session closing";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer4389, r0);

        return;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: long getAuthTimeout()>();

        r10 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.Pair checkAuthenticationTimeout(long,long)>(l0, $l1);

        if r10 != null goto label2;

        $l2 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: long getIdleTimeout()>();

        r10 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.util.Pair checkIdleTimeout(long,long)>(l0, $l2);

     label2:
        if r10 != null goto label3;

        $r11 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        goto label4;

     label3:
        $r1 = virtualinvoke r10.<org.apache.sshd.common.util.Pair: java.lang.Object getFirst()>();

        $r11 = (org.apache.sshd.common.session.Session$TimeoutStatus) $r1;

     label4:
        r2 = $r11;

        if r2 == null goto label5;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        $z1 = virtualinvoke $r3.<org.apache.sshd.common.session.Session$TimeoutStatus: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label6;

     label5:
        return;

     label6:
        $r4 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label7;

        $r8 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        varReplacer4390 = "checkForTimeouts({}) disconnect - reason={}";

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4390, r0, r2);

     label7:
        $r5 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        $r6 = virtualinvoke r10.<org.apache.sshd.common.util.Pair: java.lang.Object getSecond()>();

        $r7 = (java.lang.String) $r6;

        varReplacer4391 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer4391, $r7);

        return;
    }

    protected org.apache.sshd.common.util.Pair checkAuthenticationTimeout(long, long)
    {
        long l0, $l1, l2, l3;
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        boolean $z0;
        byte $b4, $b5;
        org.apache.sshd.common.util.Pair $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;
        java.lang.String $r7, varReplacer4392, varReplacer4393;
        null_type varReplacer4394;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        l0 := @parameter0: long;

        l3 := @parameter1: long;

        $l1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long authTimeoutStart>;

        l2 = l0 - $l1;

        $z0 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: boolean authed>;

        if $z0 != 0 goto label1;

        $b4 = l3 cmp 0L;

        if $b4 <= 0 goto label1;

        $b5 = l2 cmp l3;

        if $b5 <= 0 goto label1;

        $r1 = new org.apache.sshd.common.util.Pair;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus AuthTimeout>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer4392 = "Session has timed out waiting for authentication after ";

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4392);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        varReplacer4393 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4393);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r7);

        return $r1;

     label1:
        varReplacer4394 = null;

        return varReplacer4394;
    }

    protected org.apache.sshd.common.util.Pair checkIdleTimeout(long, long)
    {
        long l0, $l1, l2, l3;
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        byte $b4, $b5;
        org.apache.sshd.common.util.Pair $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;
        java.lang.String $r7, varReplacer4395, varReplacer4396;
        null_type varReplacer4397;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        l0 := @parameter0: long;

        l3 := @parameter1: long;

        $l1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: long idleTimeoutStart>;

        l2 = l0 - $l1;

        $b4 = l3 cmp 0L;

        if $b4 <= 0 goto label1;

        $b5 = l2 cmp l3;

        if $b5 <= 0 goto label1;

        $r1 = new org.apache.sshd.common.util.Pair;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus IdleTimeout>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer4395 = "User session has timed out idling after ";

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4395);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        varReplacer4396 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4396);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r7);

        return $r1;

     label1:
        varReplacer4397 = null;

        return varReplacer4397;
    }

    public void resetIdleTimeout()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.helpers.AbstractSession: long idleTimeoutStart> = $l0;

        return;
    }

    public org.apache.sshd.common.session.Session$TimeoutStatus getTimeoutStatus()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (org.apache.sshd.common.session.Session$TimeoutStatus) $r2;

        return $r3;
    }

    public long getAuthTimeout()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, $l1;
        java.lang.String varReplacer4398;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = <org.apache.sshd.common.FactoryManager: long DEFAULT_AUTH_TIMEOUT>;

        varReplacer4398 = "auth-timeout";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4398, $l0);

        return $l1;
    }

    public long getIdleTimeout()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        long $l0, $l1;
        java.lang.String varReplacer4399;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        $l0 = <org.apache.sshd.common.FactoryManager: long DEFAULT_IDLE_TIMEOUT>;

        varReplacer4399 = "idle-timeout";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer4399, $l0);

        return $l1;
    }

    public java.lang.String toString()
    {
        org.apache.sshd.common.session.helpers.AbstractSession r0;
        org.apache.sshd.common.io.IoSession r1;
        java.net.SocketAddress r2, $r14;
        java.lang.StringBuilder $r3, $r6, $r7, $r9, $r10, $r11, $r12;
        java.lang.Class $r4;
        java.lang.String $r5, $r8, $r13, varReplacer4400, varReplacer4401, varReplacer4402;

        nop;

        r0 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.io.IoSession getIoSession()>();

        if r1 != null goto label1;

        $r14 = null;

        goto label2;

     label1:
        $r14 = interfaceinvoke r1.<org.apache.sshd.common.io.IoSession: java.net.SocketAddress getRemoteAddress()>();

     label2:
        r2 = $r14;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        varReplacer4401 = "[";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4401);

        $r8 = virtualinvoke r0.<org.apache.sshd.common.session.helpers.AbstractSession: java.lang.String getUsername()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        varReplacer4402 = "@";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4402);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        varReplacer4400 = "]";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4400);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public void lambda$disconnect$2(int, java.lang.String, org.apache.sshd.common.io.IoWriteFuture)
    {
        org.apache.sshd.common.io.IoWriteFuture r0;
        java.lang.Throwable r1;
        org.apache.sshd.common.session.helpers.AbstractSession r2;
        org.slf4j.Logger $r3, $r5, $r7, $r16, $r23;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r12, $r13;
        int i0, varReplacer4408;
        java.lang.String $r11, $r14, $r18, $r19, r20, $r21, $r24, varReplacer4403, varReplacer4404, varReplacer4405, varReplacer4406, varReplacer4407;
        java.lang.Object[] $r15, $r22;
        java.lang.Class $r17;

        nop;

        r2 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        i0 := @parameter0: int;

        r20 := @parameter1: java.lang.String;

        r0 := @parameter2: org.apache.sshd.common.io.IoWriteFuture;

        r1 = interfaceinvoke r0.<org.apache.sshd.common.io.IoWriteFuture: java.lang.Throwable getException()>();

        $r3 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        if r1 != null goto label1;

        $r23 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r2;

        $r24 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r22[1] = $r24;

        $r22[2] = r20;

        varReplacer4406 = "disconnect({}) operation successfully completed for reason={} [{}]";

        interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4406, $r22);

        goto label2;

     label1:
        $r16 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[5];

        $r15[0] = r2;

        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getSimpleName()>();

        $r15[1] = $r18;

        $r19 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r15[2] = $r19;

        $r15[3] = r20;

        $r21 = virtualinvoke r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15[4] = $r21;

        varReplacer4404 = "disconnect({}) operation failed ({}) for reason={} [{}]: {}";

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer4404, $r15);

     label2:
        if r1 == null goto label3;

        $r5 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer4403 = "disconnect(";

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4403);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        varReplacer4407 = ") reason=";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4407);

        $r11 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        varReplacer4405 = " failure details";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4405);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r14, r1);

     label3:
        varReplacer4408 = 1;

        virtualinvoke r2.<org.apache.sshd.common.session.helpers.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer4408);

        return;
    }

    public static void lambda$writePacket$1(java.util.concurrent.ScheduledFuture, org.apache.sshd.common.io.IoWriteFuture)
    {
        java.util.concurrent.ScheduledFuture r0;
        org.apache.sshd.common.io.IoWriteFuture r1;
        int varReplacer4409;

        nop;

        r0 := @parameter0: java.util.concurrent.ScheduledFuture;

        r1 := @parameter1: org.apache.sshd.common.io.IoWriteFuture;

        varReplacer4409 = 0;

        interfaceinvoke r0.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(varReplacer4409);

        return;
    }

    public void lambda$writePacket$0(long, java.util.concurrent.TimeUnit, org.apache.sshd.common.future.DefaultSshFuture)
    {
        java.util.concurrent.TimeoutException $r0, r8;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;
        long l0;
        java.util.concurrent.TimeUnit r5;
        java.lang.String $r7, $r13, varReplacer4410, varReplacer4411, varReplacer4412;
        org.apache.sshd.common.session.helpers.AbstractSession r9;
        org.slf4j.Logger $r10, $r12;
        boolean $z0;
        org.apache.sshd.common.future.DefaultSshFuture r11;

        nop;

        r9 := @this: org.apache.sshd.common.session.helpers.AbstractSession;

        l0 := @parameter0: long;

        r5 := @parameter1: java.util.concurrent.TimeUnit;

        r11 := @parameter2: org.apache.sshd.common.future.DefaultSshFuture;

        $r0 = new java.util.concurrent.TimeoutException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        varReplacer4411 = "Timeout writing packet: ";

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4411);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        varReplacer4410 = " ";

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer4410);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r7);

        r8 = $r0;

        $r10 = r9.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r12 = r9.<org.apache.sshd.common.session.helpers.AbstractSession: org.slf4j.Logger log>;

        $r13 = virtualinvoke r8.<java.lang.Throwable: java.lang.String getMessage()>();

        varReplacer4412 = "writePacket({}): {}";

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer4412, r9, $r13);

     label1:
        virtualinvoke r11.<org.apache.sshd.common.future.DefaultSshFuture: void setValue(java.lang.Object)>(r8);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        nop;

        $r0 = class "Lorg/apache/sshd/common/session/helpers/AbstractSession;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.sshd.common.session.helpers.AbstractSession: boolean $assertionsDisabled> = $z1;

        return;
    }
}
