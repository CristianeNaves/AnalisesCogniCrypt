public abstract class org.apache.sshd.common.session.AbstractSession extends org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable implements org.apache.sshd.common.session.Session
{
    public static final java.lang.String DEFAULT_SSH_VERSION_PREFIX;
    public static final java.lang.String SESSION;
    protected final boolean isServer;
    protected final org.apache.sshd.common.FactoryManager factoryManager;
    protected final org.apache.sshd.common.io.IoSession ioSession;
    protected final org.apache.sshd.common.random.Random random;
    protected boolean authed;
    protected java.lang.String username;
    protected final java.util.List listeners;
    protected final org.apache.sshd.common.session.SessionListener sessionListenerProxy;
    protected byte[] sessionId;
    protected java.lang.String serverVersion;
    protected java.lang.String clientVersion;
    protected final java.util.Map serverProposal;
    protected final java.util.Map clientProposal;
    protected final java.util.Map negotiationResult;
    protected byte[] i_c;
    protected byte[] i_s;
    protected org.apache.sshd.common.kex.KeyExchange kex;
    protected final java.util.concurrent.atomic.AtomicReference kexState;
    protected org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture;
    protected org.apache.sshd.common.cipher.Cipher outCipher;
    protected org.apache.sshd.common.cipher.Cipher inCipher;
    protected int outCipherSize;
    protected int inCipherSize;
    protected org.apache.sshd.common.mac.Mac outMac;
    protected org.apache.sshd.common.mac.Mac inMac;
    protected byte[] inMacResult;
    protected org.apache.sshd.common.compression.Compression outCompression;
    protected org.apache.sshd.common.compression.Compression inCompression;
    protected long seqi;
    protected long seqo;
    protected org.apache.sshd.common.util.buffer.Buffer decoderBuffer;
    protected org.apache.sshd.common.util.buffer.Buffer uncompressBuffer;
    protected int decoderState;
    protected int decoderLength;
    protected final java.lang.Object encodeLock;
    protected final java.lang.Object decodeLock;
    protected final java.lang.Object requestLock;
    protected final java.util.concurrent.atomic.AtomicReference requestResult;
    protected final java.util.Map attributes;
    protected long authTimeoutTimestamp;
    protected long idleTimeoutTimestamp;
    protected long authTimeoutMs;
    protected long idleTimeoutMs;
    protected long disconnectTimeoutMs;
    protected final java.util.concurrent.atomic.AtomicReference timeoutStatus;
    protected final java.util.concurrent.atomic.AtomicLong inPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong outPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong inBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong outBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong lastKeyTimeValue;
    protected final java.util.Queue pendingPackets;
    protected org.apache.sshd.common.Service currentService;
    static final boolean $assertionsDisabled;

    public void <init>(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.util.EnumMap $r2, $r3, $r4;
        java.util.concurrent.atomic.AtomicReference $r5, $r11, $r16;
        org.apache.sshd.common.kex.KexState $r6;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r7;
        java.lang.Object $r8, $r9, $r10, $r26, $r35;
        java.util.concurrent.ConcurrentHashMap $r12;
        java.util.concurrent.TimeUnit $r13, $r14, $r15;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, varReplacer2555, varReplacer2559, varReplacer2561, varReplacer2562, varReplacer2563, varReplacer2564, varReplacer2566, varReplacer2567;
        org.apache.sshd.common.session.Session$TimeoutStatus $r17;
        java.util.concurrent.atomic.AtomicLong $r18, $r19, $r20, $r21, $r22;
        java.util.LinkedList $r23;
        boolean z0;
        org.apache.sshd.common.FactoryManager r24, $r27;
        java.lang.Object[] $r25;
        org.apache.sshd.common.io.IoSession r28;
        java.lang.Class $r29;
        java.lang.ClassLoader $r30;
        java.util.List $r31;
        java.util.EventListener $r32;
        org.apache.sshd.common.session.SessionListener $r33;
        org.apache.sshd.common.Factory $r34;
        org.apache.sshd.common.random.Random $r36;
        int varReplacer2556, varReplacer2560;
        java.lang.String varReplacer2557, varReplacer2558, varReplacer2565, varReplacer2568;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        r24 := @parameter1: org.apache.sshd.common.FactoryManager;

        r28 := @parameter2: org.apache.sshd.common.io.IoSession;

        specialinvoke r0.<org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners> = $r1;

        $r2 = new java.util.EnumMap;

        specialinvoke $r2.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map serverProposal> = $r2;

        $r3 = new java.util.EnumMap;

        specialinvoke $r3.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map clientProposal> = $r3;

        $r4 = new java.util.EnumMap;

        specialinvoke $r4.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        $r6 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState UNKNOWN>;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r6);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState> = $r5;

        varReplacer2560 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = varReplacer2560;

        varReplacer2556 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = varReplacer2556;

        $r7 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r7.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock> = $r9;

        $r10 = new java.lang.Object;

        specialinvoke $r10.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock> = $r10;

        $r11 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult> = $r11;

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes> = $r12;

        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        varReplacer2562 = 2L;

        $l0 = virtualinvoke $r13.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer2562);

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs> = $l0;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        varReplacer2561 = 10L;

        $l1 = virtualinvoke $r14.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer2561);

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs> = $l1;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        varReplacer2555 = 10L;

        $l2 = virtualinvoke $r15.<java.util.concurrent.TimeUnit: long toMillis(long)>(varReplacer2555);

        r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs> = $l2;

        $r16 = new java.util.concurrent.atomic.AtomicReference;

        $r17 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r17);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus> = $r16;

        $r18 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer2566 = 0L;

        specialinvoke $r18.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer2566);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount> = $r18;

        $r19 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer2567 = 0L;

        specialinvoke $r19.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer2567);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer2564 = 0L;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer2564);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount> = $r20;

        $r21 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer2563 = 0L;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer2563);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount> = $r21;

        $r22 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer2559 = 0L;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer2559);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue> = $r22;

        $r23 = new java.util.LinkedList;

        specialinvoke $r23.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets> = $r23;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer> = z0;

        $r25 = <org.apache.sshd.common.util.GenericUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        varReplacer2557 = "No factory manager provided";

        $r26 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r24, varReplacer2557, $r25);

        $r27 = (org.apache.sshd.common.FactoryManager) $r26;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager> = $r27;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession> = r28;

        $r29 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r31 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        $r32 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/session/SessionListener;", $r30, $r31);

        $r33 = (org.apache.sshd.common.session.SessionListener) $r32;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy> = $r33;

        $r34 = interfaceinvoke r24.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.Factory getRandomFactory()>();

        $r35 = interfaceinvoke $r34.<org.apache.sshd.common.Factory: java.lang.Object create()>();

        $r36 = (org.apache.sshd.common.random.Random) $r35;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random> = $r36;

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        varReplacer2568 = "auth-timeout";

        $l4 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer2568, $l3);

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs> = $l4;

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $l7 = $l5 + $l6;

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutTimestamp> = $l7;

        $l8 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        varReplacer2565 = "idle-timeout";

        $l9 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer2565, $l8);

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs> = $l9;

        $l10 = r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs>;

        varReplacer2558 = "disconnect-timeout";

        $l11 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getLongProperty(java.lang.String,long)>(varReplacer2558, $l10);

        r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs> = $l11;

        return;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession $r1;
        int varReplacer2569;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        varReplacer2569 = 0;

        $r1 = staticinvoke <org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession,boolean)>(r0, varReplacer2569);

        return $r1;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession, boolean)
    {
        org.apache.sshd.common.io.IoSession r0;
        java.lang.Object $r1;
        org.apache.sshd.common.session.AbstractSession r2;
        boolean z0;
        java.lang.IllegalStateException $r3;
        java.lang.String varReplacer2570, varReplacer2571;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        z0 := @parameter1: boolean;

        varReplacer2570 = "org.apache.sshd.session";

        $r1 = interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object getAttribute(java.lang.Object)>(varReplacer2570);

        r2 = (org.apache.sshd.common.session.AbstractSession) $r1;

        if r2 != null goto label1;

        if z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        varReplacer2571 = "No session available";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2571);

        throw $r3;

     label1:
        return r2;
    }

    public static void attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.String varReplacer2572;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        r1 := @parameter1: org.apache.sshd.common.session.AbstractSession;

        varReplacer2572 = "org.apache.sshd.session";

        interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object setAttribute(java.lang.Object,java.lang.Object)>(varReplacer2572, r1);

        return;
    }

    public java.lang.String getServerVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        return $r1;
    }

    public java.lang.String getClientVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        return $r1;
    }

    public org.apache.sshd.common.kex.KeyExchange getKex()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        return $r1;
    }

    public byte[] getSessionId()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte[] $r1, $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $z0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

     label2:
        return $r4;
    }

    public org.apache.sshd.common.io.IoSession getIoSession()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.io.IoSession $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        return $r1;
    }

    public org.apache.sshd.common.FactoryManager getFactoryManager()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        return $r1;
    }

    public java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)
    {
        org.apache.sshd.common.kex.KexProposalOption r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.util.Map $r2, r3, $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7, r8;
        null_type varReplacer2573;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.kex.KexProposalOption;

        if r0 != null goto label1;

        varReplacer2573 = null;

        return varReplacer2573;

     label1:
        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        r3 = $r2;

        entermonitor $r2;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (java.lang.String) $r5;

        exitmonitor r3;

     label3:
        return $r6;

     label4:
        $r7 := @caughtexception;

        r8 = $r7;

        exitmonitor r3;

     label5:
        throw r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isAuthenticated()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        return $z0;
    }

    public void setAuthenticated() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener$Event $r1;
        int varReplacer2574;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer2574 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean authed> = varReplacer2574;

        $r1 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event Authenticated>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.session.SessionListener$Event)>($r1);

        return;
    }

    public void messageReceived(org.apache.sshd.common.util.Readable) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Readable r3;
        org.apache.sshd.common.util.buffer.Buffer $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;
        java.lang.Throwable $r9, r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Readable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r4.<org.apache.sshd.common.util.buffer.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r3);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        if $r5 == null goto label2;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        if $r8 != null goto label5;

     label2:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r7.<org.apache.sshd.common.util.buffer.Buffer: void compact()>();

        goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void decode()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r10 = $r9;

        exitmonitor r2;

     label8:
        throw r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void handleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.buffer.Buffer r3;
        java.lang.Throwable $r4, r5;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r3);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r5 = $r4;

        exitmonitor r2;

     label4:
        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        int i0, $i1, $i2, i3;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.String r2, $r15, varReplacer2575, varReplacer2576, varReplacer2577, varReplacer2578;
        org.slf4j.Logger $r3, $r4, $r6, $r7, $r9;
        boolean $z0, $z1, $z2, z3;
        java.lang.Boolean $r5;
        java.lang.Integer $r8;
        org.apache.sshd.common.Service $r10, $r16;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        org.apache.sshd.common.kex.KexState $r17, $r19;
        org.apache.sshd.common.kex.KeyExchange $r18;
        java.util.concurrent.atomic.AtomicReference $r20;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int getUByte()>();

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label09;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label09;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label09;
            case 15: goto label09;
            case 16: goto label09;
            case 17: goto label09;
            case 18: goto label09;
            case 19: goto label09;
            case 20: goto label07;
            case 21: goto label08;
            default: goto label09;
        };

     label01:
        specialinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label12;

     label02:
        $r9 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2577 = "Received SSH_MSG_IGNORE";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2577);

        goto label12;

     label03:
        i3 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        $r6 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label12;

        $r7 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        varReplacer2575 = "Received SSH_MSG_UNIMPLEMENTED #{}";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer2575, $r8);

        goto label12;

     label04:
        z3 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean getBoolean()>();

        r2 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label12;

        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        varReplacer2576 = "Received SSH_MSG_DEBUG (display={}) \'{}\'";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer2576, $r5, r2);

        goto label12;

     label05:
        specialinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label12;

     label06:
        specialinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleServiceAccept()>();

        goto label12;

     label07:
        specialinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label12;

     label08:
        specialinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleNewKeys(int)>(i0);

        goto label12;

     label09:
        if i0 < 30 goto label10;

        if i0 > 49 goto label10;

        $r17 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r17);

        $i1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i2 = $i1 - 1;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i2);

        $r18 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $z2 = interfaceinvoke $r18.<org.apache.sshd.common.kex.KeyExchange: boolean next(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        if $z2 == 0 goto label12;

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void checkKeys()>();

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void sendNewKeys()>();

        $r20 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r19 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke $r20.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r19);

        goto label12;

     label10:
        $r10 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r10 == null goto label11;

        $r16 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        interfaceinvoke $r16.<org.apache.sshd.common.Service: void process(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        goto label12;

     label11:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        varReplacer2578 = "Unsupported command ";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2578);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label12:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return;
    }

    private void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        int i0, varReplacer2579;
        java.lang.String r1, varReplacer2580;
        org.apache.sshd.common.session.AbstractSession r2;
        org.slf4j.Logger $r3, $r5;
        boolean $z0;
        java.lang.Integer $r6;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = r2.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r2.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        varReplacer2580 = "Received SSH_MSG_DISCONNECT (reason={}, msg={})";

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer2580, $r6, r1);

     label1:
        varReplacer2579 = 1;

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer2579);

        return;
    }

    private void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.util.buffer.Buffer r0, r19;
        java.lang.String r1, $r13, $r17, varReplacer2581, varReplacer2583, varReplacer2585, varReplacer2586, varReplacer2588;
        org.apache.sshd.common.session.AbstractSession r2;
        org.slf4j.Logger $r3, $r5, $r9;
        org.apache.sshd.common.kex.KexState $r4;
        java.lang.Exception $r7, r18;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14, $r15, $r16;
        int varReplacer2582, varReplacer2584, varReplacer2587;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = r2.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2588 = "Received SSH_MSG_SERVICE_REQUEST \'{}\'";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer2588, r1);

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer2584 = 5;

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer2584, $r4);

     label1:
        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: void startService(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r18 = $r7;

        $r9 = r2.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2583 = "Service ";

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2583);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer2585 = " rejected";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2585);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r13, r18);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        varReplacer2581 = "Bad service request: ";

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2581);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer2587 = 7;

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer2587, $r17);

        return;

     label4:
        $r5 = r2.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2586 = "Accepted service {}";

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer2586, r1);

        varReplacer2582 = 6;

        r19 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer2582);

        virtualinvoke r19.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r1);

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r19);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void handleServiceAccept() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;
        org.apache.sshd.common.kex.KexState $r2;
        java.lang.String varReplacer2589;
        int varReplacer2590;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2589 = "Received SSH_MSG_SERVICE_ACCEPT";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2589);

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer2590 = 6;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer2590, $r2);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void serviceAccept()>();

        return;
    }

    private void handleKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.kex.KexState $r3, $r4, $r6, $r7;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        boolean $z0, $z1;
        java.util.Map r9;
        org.apache.sshd.common.kex.KexProposalOption $r10;
        java.lang.Object $r11, $r15, $r16;
        java.lang.String r12, $r19, $r23, varReplacer2591, varReplacer2592, varReplacer2593;
        org.apache.sshd.common.FactoryManager $r13;
        java.util.List $r14;
        org.apache.sshd.common.kex.KeyExchange $r17, $r20;
        java.nio.charset.Charset $r18, $r22;
        byte[] $r21, $r24, $r25, $r26;
        org.apache.sshd.common.session.SessionListener$Event $r27;
        java.lang.IllegalStateException $r28;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2592 = "Received SSH_MSG_KEXINIT";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2592);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r3 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit()>();

        goto label2;

     label1:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r7 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $r6 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z1 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z1 != 0 goto label2;

        $r28 = new java.lang.IllegalStateException;

        varReplacer2591 = "Received SSH_MSG_KEXINIT while key exchange is running";

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2591);

        throw $r28;

     label2:
        r9 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiate()>();

        $r10 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r11 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r14 = interfaceinvoke $r13.<org.apache.sshd.common.FactoryManager: java.util.List getKeyExchangeFactories()>();

        $r15 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r14, r12);

        varReplacer2593 = "Unknown negotiated KEX algorithm: %s";

        $r16 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r15, varReplacer2593, r12);

        $r17 = (org.apache.sshd.common.kex.KeyExchange) $r16;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex> = $r17;

        $r20 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        $r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r21 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r18);

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        $r22 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r24 = virtualinvoke $r23.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r22);

        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] i_s>;

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] i_c>;

        interfaceinvoke $r20.<org.apache.sshd.common.kex.KeyExchange: void init(org.apache.sshd.common.session.AbstractSession,byte[],byte[],byte[],byte[])>(r0, $r21, $r24, $r26, $r25);

        $r27 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KexCompleted>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.session.SessionListener$Event)>($r27);

        return;
    }

    private void handleNewKeys(int) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r11;
        int i0;
        org.apache.sshd.common.kex.KexState $r2, $r7;
        org.apache.sshd.common.future.DefaultSshFuture $r3, $r22;
        org.apache.sshd.common.session.SessionListener$Event $r4;
        java.util.Queue $r5, $r6, $r14, r29;
        boolean $z0;
        java.util.concurrent.atomic.AtomicReference $r8;
        java.lang.Object $r9, $r10, $r12, r13, $r15, r30;
        org.apache.sshd.common.session.PendingWriteFuture $r16, r17;
        org.apache.sshd.common.util.buffer.Buffer $r18;
        org.apache.sshd.common.io.IoWriteFuture $r19;
        java.lang.Boolean $r21;
        java.lang.Throwable $r23, r24, $r25, r26, $r27, r28;
        java.lang.String varReplacer2594, varReplacer2595;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2594 = "Received SSH_MSG_NEWKEYS";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2594);

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r2);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void receiveNewKeys()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        if $r3 == null goto label01;

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        $r21 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r22.<org.apache.sshd.common.future.DefaultSshFuture: void setValue(java.lang.Object)>($r21);

     label01:
        $r4 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KeyEstablished>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendEvent(org.apache.sshd.common.session.SessionListener$Event)>($r4);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r29 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z0 = interfaceinvoke $r6.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2595 = "Dequeing pending packets";

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2595);

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r13 = $r12;

        entermonitor $r12;

     label03:
        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $r15 = interfaceinvoke $r14.<java.util.Queue: java.lang.Object poll()>();

        $r16 = (org.apache.sshd.common.session.PendingWriteFuture) $r15;

        r17 = $r16;

        if $r16 == null goto label04;

        $r18 = virtualinvoke r17.<org.apache.sshd.common.session.PendingWriteFuture: org.apache.sshd.common.util.buffer.Buffer getBuffer()>();

        $r19 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>($r18);

        interfaceinvoke $r19.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>(r17);

        goto label03;

     label04:
        exitmonitor r13;

     label05:
        goto label08;

     label06:
        $r27 := @caughtexception;

        r28 = $r27;

        exitmonitor r13;

     label07:
        throw r28;

     label08:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r7 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r7);

        exitmonitor r29;

     label09:
        goto label12;

     label10:
        $r25 := @caughtexception;

        r26 = $r25;

        exitmonitor r29;

     label11:
        throw r26;

     label12:
        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r30 = $r9;

        entermonitor $r9;

     label13:
        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        virtualinvoke $r10.<java.lang.Object: void notifyAll()>();

        exitmonitor r30;

     label14:
        goto label17;

     label15:
        $r23 := @caughtexception;

        r24 = $r23;

        exitmonitor r30;

     label16:
        throw r24;

     label17:
        return;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    protected void validateKexState(int, org.apache.sshd.common.kex.KexState)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.kex.KexState r3, r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0;
        java.lang.String $r13, varReplacer2596, varReplacer2597, varReplacer2598;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.sshd.common.kex.KexState;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.kex.KexState) $r2;

        $z0 = virtualinvoke r4.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2596 = "Received KEX command=";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2596);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        varReplacer2597 = " while in state=";

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2597);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer2598 = " instead of ";

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2598);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label1:
        return;
    }

    public void exceptionCaught(java.lang.Throwable)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r15;
        boolean $z0, $z1, $z2;
        java.lang.Throwable r2, $r7, $r14, r16, r17;
        org.slf4j.Logger $r3, $r8, $r10;
        org.apache.sshd.common.SshException $r5;
        java.lang.String $r6, $r13, varReplacer2599, varReplacer2600;
        java.lang.StringBuilder $r9, $r11, $r12;
        int i0, varReplacer2601;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r15 = $r1;

        entermonitor $r1;

     label01:
        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isClosing()>();

        if $z0 == 0 goto label03;

        exitmonitor r15;

     label02:
        return;

     label03:
        exitmonitor r15;

     label04:
        goto label07;

     label05:
        $r14 := @caughtexception;

        r16 = $r14;

        exitmonitor r15;

     label06:
        throw r16;

     label07:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2600 = "Exception caught";

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>(varReplacer2600, r2);

        $z1 = r2 instanceof org.apache.sshd.common.SshException;

        if $z1 == 0 goto label12;

        $r5 = (org.apache.sshd.common.SshException) r2;

        i0 = virtualinvoke $r5.<org.apache.sshd.common.SshException: int getDisconnectCode()>();

        if i0 <= 0 goto label12;

     label08:
        $r6 = virtualinvoke r2.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(i0, $r6);

     label09:
        goto label11;

     label10:
        $r7 := @caughtexception;

        r17 = $r7;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label11;

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        varReplacer2599 = "Exception while disconnect with code=";

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2599);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r13, r17);

     label11:
        return;

     label12:
        varReplacer2601 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer2601);

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    protected org.apache.sshd.common.Closeable getInnerCloseable()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.CloseableUtils$Builder $r1, $r3, $r5;
        org.apache.sshd.common.Service[] $r2;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.Closeable $r6;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.CloseableUtils$Builder builder()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service[] getServices()>();

        $r3 = virtualinvoke $r1.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.util.CloseableUtils$Builder parallel(org.apache.sshd.common.Closeable[])>($r2);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = virtualinvoke $r3.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.util.CloseableUtils$Builder close(org.apache.sshd.common.Closeable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.sshd.common.util.CloseableUtils$Builder: org.apache.sshd.common.Closeable build()>();

        return $r6;
    }

    protected void doCloseImmediately()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        specialinvoke r0.<org.apache.sshd.common.util.CloseableUtils$AbstractInnerCloseable: void doCloseImmediately()>();

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy>;

        interfaceinvoke $r1.<org.apache.sshd.common.session.SessionListener: void sessionClosed(org.apache.sshd.common.session.Session)>(r0);

        return;
    }

    protected org.apache.sshd.common.Service[] getServices()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Service $r1, $r2;
        org.apache.sshd.common.Service[] $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r1 == null goto label1;

        $r3 = newarray (org.apache.sshd.common.Service)[1];

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        $r3[0] = $r2;

        goto label2;

     label1:
        $r3 = newarray (org.apache.sshd.common.Service)[0];

     label2:
        return $r3;
    }

    public org.apache.sshd.common.Service getService(java.lang.Class)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Service[] r1;
        int i0, i1;
        java.lang.IllegalStateException $r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.Class r5;
        java.lang.String $r6, $r8, varReplacer2602;
        org.apache.sshd.common.Service r9, $r11;
        boolean $z0;
        java.lang.Object $r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r5 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service[] getServices()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r9 = r1[i1];

        $z0 = virtualinvoke r5.<java.lang.Class: boolean isInstance(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r5.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r9);

        $r11 = (org.apache.sshd.common.Service) $r10;

        return $r11;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer2602 = "Attempted to access unknown service ";

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2602);

        $r6 = virtualinvoke r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r8;
        org.apache.sshd.common.kex.KexState $r2, $r9;
        java.lang.Object $r3, $r10;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.util.buffer.Buffer r4;
        byte[] $r5;
        int $i0;
        java.util.Queue $r6, r7, $r11, $r14;
        org.apache.sshd.common.session.PendingWriteFuture $r12, r13;
        org.slf4j.Logger $r15;
        java.lang.Throwable $r17, r18, $r19, r20;
        byte b1;
        org.apache.sshd.common.io.IoWriteFuture r21;
        java.lang.String varReplacer2603;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z0 = virtualinvoke $r2.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label08;

        $r5 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        b1 = $r5[$i0];

        if b1 <= 49 goto label08;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r7 = $r6;

        entermonitor $r6;

     label01:
        $r9 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r10 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z1 = virtualinvoke $r9.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label04;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z2 = interfaceinvoke $r11.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label02;

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2603 = "Start flagging packets as pending until key exchange is done";

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2603);

     label02:
        $r12 = new org.apache.sshd.common.session.PendingWriteFuture;

        specialinvoke $r12.<org.apache.sshd.common.session.PendingWriteFuture: void <init>(org.apache.sshd.common.util.buffer.Buffer)>(r4);

        r13 = $r12;

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        interfaceinvoke $r14.<java.util.Queue: boolean add(java.lang.Object)>(r13);

        exitmonitor r7;

     label03:
        return r13;

     label04:
        exitmonitor r7;

     label05:
        goto label08;

     label06:
        $r19 := @caughtexception;

        r20 = $r19;

        exitmonitor r7;

     label07:
        throw r20;

     label08:
        r21 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>(r4);

     label09:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return r21;

     label10:
        $r17 := @caughtexception;

        r18 = $r17;

     label11:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        throw r18;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        org.apache.sshd.common.io.IoWriteFuture r2;
        org.apache.sshd.common.future.DefaultSshFuture r3;
        org.apache.sshd.common.FactoryManager $r4;
        java.util.concurrent.ScheduledExecutorService r5;
        org.apache.sshd.common.session.AbstractSession$1 $r6;
        long l0;
        java.util.concurrent.TimeUnit r7;
        java.util.concurrent.ScheduledFuture r8;
        org.apache.sshd.common.session.AbstractSession$2 $r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        r3 = (org.apache.sshd.common.future.DefaultSshFuture) r2;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        r5 = interfaceinvoke $r4.<org.apache.sshd.common.FactoryManager: java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()>();

        $r6 = new org.apache.sshd.common.session.AbstractSession$1;

        specialinvoke $r6.<org.apache.sshd.common.session.AbstractSession$1: void <init>(org.apache.sshd.common.session.AbstractSession,long,java.util.concurrent.TimeUnit,org.apache.sshd.common.future.DefaultSshFuture)>(r0, l0, r7, r3);

        r8 = interfaceinvoke r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r6, l0, r7);

        $r9 = new org.apache.sshd.common.session.AbstractSession$2;

        specialinvoke $r9.<org.apache.sshd.common.session.AbstractSession$2: void <init>(org.apache.sshd.common.session.AbstractSession,java.util.concurrent.ScheduledFuture)>(r0, r8);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultSshFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r9);

        return r2;
    }

    protected org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.buffer.Buffer r3;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.io.IoWriteFuture $r5;
        java.lang.Throwable $r6, r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: void encode(org.apache.sshd.common.util.buffer.Buffer)>(r3);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = interfaceinvoke $r4.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>(r3);

        exitmonitor r2;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        exitmonitor r2;

     label4:
        throw r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2, $r8;
        java.util.concurrent.atomic.AtomicReference $r3, $r6, $r7, r18;
        org.apache.sshd.common.util.buffer.Buffer r4, $r9;
        java.lang.Throwable $r10, r11, $r12, $r14, $r16, r17, r19;
        java.io.InterruptedIOException $r13, $r15;
        java.lang.String varReplacer2604;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r18 = $r3;

        entermonitor $r3;

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r4);

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r9 = (org.apache.sshd.common.util.buffer.Buffer) $r8;

        exitmonitor r18;

     label3:
        exitmonitor r2;

     label4:
        return $r9;

     label5:
        $r16 := @caughtexception;

        r17 = $r16;

        exitmonitor r18;

     label6:
        throw r17;

     label7:
        $r12 := @caughtexception;

        r19 = $r12;

        $r13 = new java.io.InterruptedIOException;

        varReplacer2604 = "Interrupted while waiting for request result";

        specialinvoke $r13.<java.io.InterruptedIOException: void <init>(java.lang.String)>(varReplacer2604);

        $r14 = virtualinvoke $r13.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(r19);

        $r15 = (java.io.InterruptedIOException) $r14;

        throw $r15;

     label8:
        $r10 := @caughtexception;

        r11 = $r10;

        exitmonitor r2;

     label9:
        throw r11;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.InterruptedException from label1 to label3 with label7;
        catch java.lang.InterruptedException from label5 to label7 with label7;
        catch java.lang.Throwable from label1 to label4 with label8;
        catch java.lang.Throwable from label5 to label9 with label8;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte b0;
        org.apache.sshd.common.util.buffer.Buffer $r1;
        int varReplacer2605;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b0 := @parameter0: byte;

        varReplacer2605 = 0;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(b0, varReplacer2605);

        return $r1;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte, int)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, i8, i9, i10, varReplacer2606, varReplacer2607, varReplacer2608, varReplacer2609;
        org.apache.sshd.common.mac.Mac $r1, $r4;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r2, $r5, r6;
        byte[] $r3;
        byte b5;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b5 := @parameter0: byte;

        i7 := @parameter1: int;

        if i7 > 0 goto label1;

        $r5 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r5.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r6 = $r5;

        goto label4;

     label1:
        i0 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i8 = i7 + 5;

        $i2 = neg i8;

        $i1 = i0 - 1;

        i9 = $i2 & $i1;

        if i9 >= i0 goto label2;

        i9 = i9 + i0;

     label2:
        $i3 = i8 + i9;

        i10 = $i3 - 4;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r1 == null goto label3;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $i6 = interfaceinvoke $r4.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i10 = i10 + $i6;

     label3:
        $r2 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        varReplacer2606 = 256;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(i10, varReplacer2606);

        $r3 = newarray (byte)[$i4];

        varReplacer2608 = 0;

        specialinvoke $r2.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[],boolean)>($r3, varReplacer2608);

        r6 = $r2;

     label4:
        varReplacer2607 = 5;

        virtualinvoke r6.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(varReplacer2607);

        varReplacer2609 = 5;

        virtualinvoke r6.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer2609);

        virtualinvoke r6.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(b5);

        return r6;
    }

    private void encode(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        int $i0, $i1, i2, i3, i4, $i5, $i8, $i9, $i10, $i11, $i12, $i19, i20, i21, $i22, i25, i26, $i27, $i28, i29, i30, varReplacer2611;
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r19, $r22;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.compression.Compression $r2, $r17, $r18;
        long $l6, $l13, $l14, $l15, $l17, $l23, $l24;
        byte $b7;
        org.apache.sshd.common.random.Random $r3;
        byte[] $r4, $r10, $r14, $r16;
        org.apache.sshd.common.mac.Mac $r5, $r11, $r12, $r13, $r15;
        org.apache.sshd.common.cipher.Cipher $r6, $r9;
        java.util.concurrent.atomic.AtomicLong $r7, $r8;
        java.lang.Long $r20;
        java.lang.String $r21, varReplacer2610, varReplacer2612;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r23, r28;
        java.lang.Exception $r24, r30;
        org.apache.sshd.common.SshException $r25, $r26, r29;
        org.apache.sshd.common.util.buffer.Buffer r27;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r27 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

     label01:
        $i0 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i0 >= 5 goto label02;

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2612 = "Performance cost: when sending a packet, ensure that 5 bytes are available in front of the buffer";

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String)>(varReplacer2612);

        $r23 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r23.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r28 = $r23;

        varReplacer2611 = 5;

        virtualinvoke r28.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer2611);

        virtualinvoke r28.<org.apache.sshd.common.util.buffer.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r27);

        r27 = r28;

     label02:
        i25 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i1 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i2 = $i1 - 5;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label03;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $l24 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l24);

        $r21 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        varReplacer2610 = "Sending packet #{}: {}";

        interfaceinvoke $r19.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer2610, $r20, $r21);

     label03:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        if $r2 == null goto label05;

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label04;

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $z2 = interfaceinvoke $r18.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z2 != 0 goto label05;

     label04:
        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        interfaceinvoke $r17.<org.apache.sshd.common.compression.Compression: void compress(org.apache.sshd.common.util.buffer.Buffer)>(r27);

        i25 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

     label05:
        i3 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i4 = i25;

        i26 = i25 + 5;

        $i27 = neg i26;

        $i28 = i3 - 1;

        i29 = $i27 & $i28;

        if i29 >= i3 goto label06;

        i29 = i29 + i3;

     label06:
        $i5 = i26 + i29;

        i30 = $i5 - 4;

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(i2);

        $l6 = (long) i30;

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l6);

        $b7 = (byte) i29;

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>($b7);

        $i8 = i2 + i4;

        $i9 = $i8 + 5;

        $i10 = $i9 + i29;

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i10);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r4 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i11 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i12 = $i11 - i29;

        interfaceinvoke $r3.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r4, $i12, i29);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r5 == null goto label07;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        i20 = interfaceinvoke $r11.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i21 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i22 = i21 + i20;

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i22);

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $l23 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        interfaceinvoke $r12.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l23);

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r14 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r13.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>($r14, i2, i21);

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r16 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r15.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r16, i21);

     label07:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        if $r6 == null goto label08;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $r10 = virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i19 = i30 + 4;

        interfaceinvoke $r9.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r10, i2, $i19);

     label08:
        $l13 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $l14 = $l13 + 1L;

        $l15 = $l14 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqo> = $l15;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $l17 = (long) i30;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l17);

        virtualinvoke r27.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i2);

     label09:
        goto label12;

     label10:
        $r26 := @caughtexception;

        r29 = $r26;

        throw r29;

     label11:
        $r24 := @caughtexception;

        r30 = $r24;

        $r25 = new org.apache.sshd.common.SshException;

        specialinvoke $r25.<org.apache.sshd.common.SshException: void <init>(java.lang.Throwable)>(r30);

        throw $r25;

     label12:
        return;

        catch org.apache.sshd.common.SshException from label01 to label09 with label10;
        catch java.lang.Exception from label01 to label09 with label11;
    }

    protected void decode() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int $i0, i1, $i2, $i3, $i4, i8, i9, $i10, $i11, $i12, $i14, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, varReplacer2614, varReplacer2617, varReplacer2618, varReplacer2619, varReplacer2620, varReplacer2621, varReplacer2623, varReplacer2624;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.sshd.common.mac.Mac $r1, $r6, $r28, $r29, $r31, $r35;
        org.apache.sshd.common.util.buffer.Buffer $r2, $r3, $r7, $r8, $r10, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r36, $r38, $r40, $r41, $r49, $r52, r54;
        byte[] r4, $r30, $r32, $r51;
        org.apache.sshd.common.cipher.Cipher $r5, $r34, $r39, $r50;
        long $l5, $l6, $l7, $l15, $l20, $l26;
        org.apache.sshd.common.compression.Compression $r9, $r25, $r27;
        java.util.concurrent.atomic.AtomicLong $r11, $r12;
        org.slf4j.Logger $r16, $r42, $r55;
        java.lang.Long $r17;
        java.lang.String $r18, $r43, $r48, varReplacer2613, varReplacer2615, varReplacer2616, varReplacer2622;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r26;
        org.apache.sshd.common.SshException $r33, $r44;
        java.lang.AssertionError $r37, $r53;
        java.lang.StringBuilder $r45, $r46, $r47;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

     label01:
        $i45 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i45 != 0 goto label06;

        $z4 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z4 != 0 goto label02;

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i44 = virtualinvoke $r52.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i44 == 0 goto label02;

        $r53 = new java.lang.AssertionError;

        specialinvoke $r53.<java.lang.AssertionError: void <init>()>();

        throw $r53;

     label02:
        $r38 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i37 = virtualinvoke $r38.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i38 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        if $i37 <= $i38 goto label18;

        $r39 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r39 == null goto label03;

        $r50 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $r49 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r51 = virtualinvoke $r49.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i43 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        varReplacer2614 = 0;

        interfaceinvoke $r50.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r51, varReplacer2614, $i43);

     label03:
        $r40 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i39 = virtualinvoke $r40.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength> = $i39;

        $i40 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i40 < 5 goto label04;

        $i42 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i42 <= 262144 goto label05;

     label04:
        $r42 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r41 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r43 = virtualinvoke $r41.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        varReplacer2616 = "Error decoding packet (invalid length) {}";

        interfaceinvoke $r42.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>(varReplacer2616, $r43);

        $r44 = new org.apache.sshd.common.SshException;

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        varReplacer2613 = "Invalid packet length: ";

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2613);

        $i41 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i41);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer2623 = 2;

        specialinvoke $r44.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer2623, $r48);

        throw $r44;

     label05:
        varReplacer2617 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer2617;

        goto label01;

     label06:
        $i0 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i0 != 1 goto label01;

        $z0 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i36 = virtualinvoke $r36.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i36 == 4 goto label07;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label07:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r1 == null goto label08;

        $r35 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i46 = interfaceinvoke $r35.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        goto label09;

     label08:
        $i46 = 0;

     label09:
        i1 = $i46;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i2 = virtualinvoke $r2.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i3 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i4 = $i3 + i1;

        if $i2 < $i4 goto label18;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        r4 = virtualinvoke $r3.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r5 == null goto label10;

        $r34 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i35 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        $i31 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i33 = $i31 + 4;

        $i32 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        $i34 = $i33 - $i32;

        interfaceinvoke $r34.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>(r4, $i35, $i34);

     label10:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r6 == null goto label11;

        $r28 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $l26 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        interfaceinvoke $r28.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l26);

        $r29 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i27 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i28 = $i27 + 4;

        varReplacer2620 = 0;

        interfaceinvoke $r29.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>(r4, varReplacer2620, $i28);

        $r31 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $r30 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        varReplacer2618 = 0;

        interfaceinvoke $r31.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r30, varReplacer2618);

        $r32 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        $i29 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i30 = $i29 + 4;

        varReplacer2619 = 0;

        $z3 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: boolean equals(byte[],int,byte[],int,int)>($r32, varReplacer2619, r4, $i30, i1);

        if $z3 != 0 goto label11;

        $r33 = new org.apache.sshd.common.SshException;

        varReplacer2621 = 5;

        varReplacer2622 = "MAC Error";

        specialinvoke $r33.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer2621, varReplacer2622);

        throw $r33;

     label11:
        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l6 = $l5 + 1L;

        $l7 = $l6 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqi> = $l7;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        i8 = virtualinvoke $r7.<org.apache.sshd.common.util.buffer.Buffer: int getUByte()>();

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        i9 = virtualinvoke $r8.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        if $r9 == null goto label15;

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label12;

        $r27 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $z2 = interfaceinvoke $r27.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z2 != 0 goto label15;

     label12:
        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        if $r19 != null goto label13;

        $r26 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r26.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer> = $r26;

        goto label14;

     label13:
        $r20 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        virtualinvoke $r20.<org.apache.sshd.common.util.buffer.Buffer: void clear()>();

     label14:
        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i21 = virtualinvoke $r21.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i22 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i23 = $i21 + $i22;

        $i24 = $i23 - 1;

        $i25 = $i24 - i8;

        virtualinvoke $r22.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i25);

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r24 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        interfaceinvoke $r25.<org.apache.sshd.common.compression.Compression: void uncompress(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)>($r24, $r23);

        r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        goto label16;

     label15:
        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i10 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i11 = $i10 + 4;

        $i12 = $i11 - i8;

        virtualinvoke $r10.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i12);

        r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

     label16:
        $r55 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r55.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z5 == 0 goto label17;

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $l20 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l20);

        $r18 = virtualinvoke r54.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        varReplacer2615 = "Received packet #{}: {}";

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer2615, $r17, $r18);

     label17:
        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $i14 = virtualinvoke r54.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $l15 = (long) $i14;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l15);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r54);

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i17 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i18 = $i17 + 4;

        $i19 = $i18 + i1;

        virtualinvoke $r13.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i19);

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r14.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(i9);

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r15.<org.apache.sshd.common.util.buffer.Buffer: void compact()>();

        varReplacer2624 = 0;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer2624;

        goto label01;

     label18:
        return;
    }

    protected void sendIdentification(java.lang.String)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, $r6, varReplacer2625, varReplacer2626;
        org.slf4j.Logger $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.nio.charset.Charset $r7;
        byte[] r8;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r9;
        org.apache.sshd.common.io.IoSession $r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2626 = "Send identification: {}";

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer2626, r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer2625 = "\r\n";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2625);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r9 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r9.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[])>(r8);

        interfaceinvoke $r10.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>($r9);

        return;
    }

    protected abstract boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException;

    protected java.lang.String doReadIdentification(org.apache.sshd.common.util.buffer.Buffer, boolean)
    {
        byte[] r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        int i0, $i1, $i2, $i3, i4, $i5, varReplacer2629;
        java.lang.IllegalStateException $r2, $r3, $r5;
        java.lang.String $r4, r7, varReplacer2628, varReplacer2630, varReplacer2631, varReplacer2632;
        boolean z0, $z1, z2;
        org.apache.sshd.common.session.AbstractSession r6;
        byte b6;
        null_type varReplacer2627;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        z0 := @parameter1: boolean;

        r0 = newarray (byte)[256];

     label01:
        i0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i4 = 0;

        z2 = 0;

     label02:
        $i5 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        if $i5 != 0 goto label03;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i0);

        varReplacer2627 = null;

        return varReplacer2627;

     label03:
        b6 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: byte getByte()>();

        if b6 != 13 goto label04;

        z2 = 1;

        goto label02;

     label04:
        if b6 != 10 goto label05;

        goto label08;

     label05:
        if z2 == 0 goto label06;

        $r3 = new java.lang.IllegalStateException;

        varReplacer2631 = "Incorrect identification: bad line ending";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2631);

        throw $r3;

     label06:
        $i1 = lengthof r0;

        if i4 < $i1 goto label07;

        $r2 = new java.lang.IllegalStateException;

        varReplacer2630 = "Incorrect identification: line too long";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2630);

        throw $r2;

     label07:
        $i2 = i4;

        i4 = i4 + 1;

        r0[$i2] = b6;

        goto label02;

     label08:
        $r4 = new java.lang.String;

        varReplacer2629 = 0;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r0, varReplacer2629, i4);

        r7 = $r4;

        if z0 != 0 goto label09;

        varReplacer2628 = "SSH-";

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer2628);

        if $z1 == 0 goto label10;

     label09:
        return r7;

     label10:
        $i3 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i3 <= 16384 goto label11;

        $r5 = new java.lang.IllegalStateException;

        varReplacer2632 = "Incorrect identification: too many header lines";

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer2632);

        throw $r5;

     label11:
        goto label01;
    }

    protected java.util.Map createProposal(java.lang.String)
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.AbstractSession r2;
        org.apache.sshd.common.FactoryManager $r3, $r11, $r18, $r25;
        org.apache.sshd.common.kex.KexProposalOption $r4, $r9, $r14, $r16, $r21, $r23, $r28, $r30, $r32, $r34;
        java.util.List $r5, $r12, $r19, $r26;
        java.lang.String $r6, r8, r13, r20, r27, varReplacer2633, varReplacer2634;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r8 := @parameter0: java.lang.String;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        $r4 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r3 = r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r5 = interfaceinvoke $r3.<org.apache.sshd.common.FactoryManager: java.util.List getKeyExchangeFactories()>();

        $r6 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r5);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r9 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption SERVERKEYS>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r8);

        $r11 = r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r12 = interfaceinvoke $r11.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        r13 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r12);

        $r14 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r13);

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r13);

        $r18 = r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r19 = interfaceinvoke $r18.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        r20 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r19);

        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, r20);

        $r23 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, r20);

        $r25 = r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r26 = interfaceinvoke $r25.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        r27 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r26);

        $r28 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r27);

        $r30 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r27);

        $r32 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        varReplacer2634 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, varReplacer2634);

        $r34 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        varReplacer2633 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, varReplacer2633);

        return r1;
    }

    protected byte[] sendKexInit(java.util.Map) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r5, $r13, $r16, $r27;
        org.apache.sshd.common.util.buffer.Buffer r2;
        int i0, $i1, varReplacer2635, varReplacer2640, varReplacer2641, varReplacer2642, varReplacer2643;
        org.apache.sshd.common.random.Random $r3;
        byte[] $r4, $r32, r37;
        boolean $z0, $z1, $z2;
        java.util.List $r6;
        java.lang.Object $r8, $r11;
        org.apache.sshd.common.kex.KexProposalOption r9;
        java.util.Map r10;
        java.lang.String r12, $r14, $r18, $r21, $r25, $r29, $r33, $r35, varReplacer2636, varReplacer2637, varReplacer2638, varReplacer2639, varReplacer2644, varReplacer2645;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r22, $r23, $r24, $r26, $r28, $r30, $r31, $r34;
        java.util.Iterator r36;
        long varReplacer2646;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r10 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2637 = "Send SSH_MSG_KEXINIT";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2637);

        varReplacer2641 = 20;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer2641);

        i0 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i1 = i0 + 16;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i1);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r4 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer2640 = 16;

        interfaceinvoke $r3.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r4, i0, varReplacer2640);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r27 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        varReplacer2638 = "sendKexInit(";

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2638);

        $r29 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        varReplacer2636 = ") cookie=";

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2636);

        $r32 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer2642 = 16;

        varReplacer2643 = 58;

        $r33 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(byte[],int,int,char)>($r32, i0, varReplacer2642, varReplacer2643);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void trace(java.lang.String)>($r35);

     label1:
        $r6 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r36 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r8 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.sshd.common.kex.KexProposalOption) $r8;

        $r11 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label3;

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer2644 = "sendKexInit(";

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2644);

        $r18 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        varReplacer2645 = ")[";

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2645);

        $r21 = virtualinvoke r9.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        varReplacer2639 = "] ";

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2639);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String)>($r25);

     label3:
        $r14 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String trimToEmpty(java.lang.String)>(r12);

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>($r14);

        goto label2;

     label4:
        varReplacer2635 = 0;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putBoolean(boolean)>(varReplacer2635);

        varReplacer2646 = 0L;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>(varReplacer2646);

        r37 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] getCompactData()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return r37;
    }

    protected byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer, java.util.Map)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        byte[] r1, r2, r51;
        int $i0, $i1, i2, $i3, $i4, $i5, i7, i8, i9, i11, varReplacer2647, varReplacer2648, varReplacer2649, varReplacer2650, varReplacer2658;
        org.apache.sshd.common.session.AbstractSession r3;
        org.slf4j.Logger $r4, $r6, $r7, $r9, $r17, $r25, $r29, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.util.List $r5;
        byte $b6, b10;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r14, $r16, $r18, $r20, $r21, $r22, $r28, $r30, $r32, $r33, $r35, $r36, $r37, $r39, $r41, $r43, $r44, $r46;
        java.lang.String $r11, $r15, $r19, $r23, $r31, $r34, $r38, $r42, $r45, $r47, r50, varReplacer2651, varReplacer2652, varReplacer2653, varReplacer2654, varReplacer2655, varReplacer2656, varReplacer2657, varReplacer2659, varReplacer2660;
        java.lang.Object $r24;
        java.util.Map r26;
        java.util.Iterator r48;
        org.apache.sshd.common.kex.KexProposalOption r49;
        long l12;

        nop;

        r3 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r26 := @parameter1: java.util.Map;

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i1 = $i0 + 1;

        r2 = newarray (byte)[$i1];

        r2[0] = 20;

        b10 = 6;

        i2 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        varReplacer2658 = 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, varReplacer2658, $i4);

        $i5 = i2 + 16;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i5);

        i11 = b10 + 16;

        $r4 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r40 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        varReplacer2660 = "receiveKexInit(";

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2660);

        $r42 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        varReplacer2659 = ") cookie=";

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2659);

        varReplacer2649 = 16;

        varReplacer2650 = 58;

        $r45 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(byte[],int,int,char)>(r1, i2, varReplacer2649, varReplacer2650);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r40.<org.slf4j.Logger: void trace(java.lang.String)>($r47);

     label1:
        $r5 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r48 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z4 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r24 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        r49 = (org.apache.sshd.common.kex.KexProposalOption) $r24;

        i7 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        r50 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r25 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r25.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label3;

        $r29 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        varReplacer2651 = "receiveKexInit(";

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2651);

        $r31 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        varReplacer2656 = ")[";

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2656);

        $r34 = virtualinvoke r49.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        varReplacer2652 = "] ";

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2652);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void trace(java.lang.String)>($r38);

     label3:
        i8 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i9 = i8 - i7;

        interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r49, r50);

        i11 = i11 + i9;

        goto label2;

     label4:
        z5 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean getBoolean()>();

        $r6 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label5;

        $r17 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer2655 = "receiveKexInit(";

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2655);

        $r19 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        varReplacer2653 = ") first kex packet follows: ";

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2653);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void trace(java.lang.String)>($r23);

     label5:
        l12 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: long getUInt()>();

        $b6 = l12 cmp 0L;

        if $b6 == 0 goto label6;

        $r7 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z2 == 0 goto label6;

        $r9 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        varReplacer2654 = "receiveKexInit(";

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2654);

        $r11 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        varReplacer2657 = ") non-zero reserved value: ";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2657);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l12);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void trace(java.lang.String)>($r15);

     label6:
        r51 = newarray (byte)[i11];

        varReplacer2647 = 0;

        varReplacer2648 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, varReplacer2647, r51, varReplacer2647, i11);

        return r51;
    }

    protected void sendNewKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;
        org.apache.sshd.common.util.buffer.Buffer r2;
        java.lang.String varReplacer2661;
        int varReplacer2662;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2661 = "Send SSH_MSG_NEWKEYS";

        interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>(varReplacer2661);

        varReplacer2662 = 21;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer2662);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return;
    }

    protected void receiveNewKeys() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1, $r3, $r5;
        byte[] r2, r4, $r7, $r10, r11, r12, $r13, r14, $r53, $r66, $r67, r73, r74, r75, r76, r78, r81, r84, r87;
        org.apache.sshd.common.digest.Digest r6;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r8, r9;
        int i0, $i1, $i2, i3, $i5, $i8, $i11, $i14, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i28, varReplacer2664, varReplacer2665, varReplacer2666, varReplacer2667, varReplacer2668, varReplacer2669, varReplacer2671, varReplacer2672, varReplacer2675, varReplacer2676, varReplacer2680;
        byte $b4, $b6, $b7, $b9, $b10, $b12, $b13, $b15, $b16, $b18;
        org.apache.sshd.common.kex.KexProposalOption $r15, $r21, $r27, $r32, $r38, $r44;
        org.apache.sshd.common.FactoryManager $r16, $r22, $r28, $r33, $r39, $r45;
        java.util.List $r17, $r23, $r29, $r34, $r40, $r46;
        java.lang.Object $r18, $r19, $r24, $r25, $r30, $r35, $r36, $r41, $r42, $r47;
        org.apache.sshd.common.cipher.Cipher r20, r37, $r49, $r51;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.mac.Mac r26, r43, $r52;
        org.apache.sshd.common.compression.Compression r31, r48, $r50, $r54, $r61, $r63;
        java.util.concurrent.atomic.AtomicLong $r55, $r56, $r57, $r58, $r59;
        long $l26, varReplacer2670, varReplacer2673, varReplacer2674, varReplacer2677;
        org.apache.sshd.common.compression.Compression$Type $r60, $r62;
        java.lang.String r77, r80, r82, r83, r86, r88, varReplacer2663, varReplacer2678, varReplacer2679, varReplacer2681;
        org.apache.sshd.common.cipher.Cipher$Mode $r79, $r85;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r2 = interfaceinvoke $r1.<org.apache.sshd.common.kex.KeyExchange: byte[] getK()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r4 = interfaceinvoke $r3.<org.apache.sshd.common.kex.KeyExchange: byte[] getH()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r6 = interfaceinvoke $r5.<org.apache.sshd.common.kex.KeyExchange: org.apache.sshd.common.digest.Digest getHash()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        if $r7 != null goto label1;

        $i27 = lengthof r4;

        $r66 = newarray (byte)[$i27];

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId> = $r66;

        $r67 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $i28 = lengthof r4;

        varReplacer2664 = 0;

        varReplacer2665 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, varReplacer2664, $r67, varReplacer2664, $i28);

     label1:
        $r8 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r8.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r9 = $r8;

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r4);

        varReplacer2672 = 65;

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(varReplacer2672);

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>($r10);

        i0 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        r11 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer2667 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2667, i0);

        r12 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $i1 = lengthof $r13;

        $i2 = i0 - $i1;

        i3 = $i2 - 1;

        $b4 = r11[i3];

        $i5 = $b4 + 1;

        $b6 = (byte) $i5;

        r11[i3] = $b6;

        varReplacer2668 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2668, i0);

        r14 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b7 = r11[i3];

        $i8 = $b7 + 1;

        $b9 = (byte) $i8;

        r11[i3] = $b9;

        varReplacer2675 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2675, i0);

        r73 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b10 = r11[i3];

        $i11 = $b10 + 1;

        $b12 = (byte) $i11;

        r11[i3] = $b12;

        varReplacer2676 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2676, i0);

        r74 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b13 = r11[i3];

        $i14 = $b13 + 1;

        $b15 = (byte) $i14;

        r11[i3] = $b15;

        varReplacer2669 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2669, i0);

        r75 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b16 = r11[i3];

        $i17 = $b16 + 1;

        $b18 = (byte) $i17;

        r11[i3] = $b18;

        varReplacer2680 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r11, varReplacer2680, i0);

        r76 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r15 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        r77 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r15);

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r17 = interfaceinvoke $r16.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r18 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r17, r77);

        varReplacer2678 = "Unknown s2c cipher: %s";

        $r19 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r18, varReplacer2678, r77);

        r20 = (org.apache.sshd.common.cipher.Cipher) $r19;

        $i19 = interfaceinvoke r20.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r78 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r74, $i19, r6, r2, r4);

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z0 == 0 goto label2;

        $r79 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

        goto label3;

     label2:
        $r79 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

     label3:
        interfaceinvoke r20.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r79, r78, r14);

        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        r80 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r21);

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r23 = interfaceinvoke $r22.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r24 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r23, r80);

        varReplacer2679 = "Unknown s2c mac: %s";

        $r25 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r24, varReplacer2679, r80);

        r26 = (org.apache.sshd.common.mac.Mac) $r25;

        $i20 = interfaceinvoke r26.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r81 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r76, $i20, r6, r2, r4);

        interfaceinvoke r26.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r81);

        $r27 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        r82 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r27);

        $r28 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r29 = interfaceinvoke $r28.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r30 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r29, r82);

        r31 = (org.apache.sshd.common.compression.Compression) $r30;

        $r32 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        r83 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r32);

        $r33 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r34 = interfaceinvoke $r33.<org.apache.sshd.common.FactoryManager: java.util.List getCipherFactories()>();

        $r35 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r34, r83);

        varReplacer2663 = "Unknown c2s cipher: %s";

        $r36 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r35, varReplacer2663, r83);

        r37 = (org.apache.sshd.common.cipher.Cipher) $r36;

        $i21 = interfaceinvoke r37.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r84 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r73, $i21, r6, r2, r4);

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z1 == 0 goto label4;

        $r85 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

        goto label5;

     label4:
        $r85 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

     label5:
        interfaceinvoke r37.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r85, r84, r12);

        $r38 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        r86 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r38);

        $r39 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r40 = interfaceinvoke $r39.<org.apache.sshd.common.FactoryManager: java.util.List getMacFactories()>();

        $r41 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r40, r86);

        varReplacer2681 = "Unknown c2s mac: %s";

        $r42 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r41, varReplacer2681, r86);

        r43 = (org.apache.sshd.common.mac.Mac) $r42;

        $i22 = interfaceinvoke r43.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r87 = specialinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r75, $i22, r6, r2, r4);

        interfaceinvoke r43.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r87);

        $r44 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        r88 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r44);

        $r45 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $r46 = interfaceinvoke $r45.<org.apache.sshd.common.FactoryManager: java.util.List getCompressionFactories()>();

        $r47 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r46, r88);

        r48 = (org.apache.sshd.common.compression.Compression) $r47;

        $z2 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z2 == 0 goto label6;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r26;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r31;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r37;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r43;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r48;

        goto label7;

     label6:
        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r37;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r43;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r48;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r26;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r31;

     label7:
        $r49 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $i23 = interfaceinvoke $r49.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = $i23;

        $r50 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        if $r50 == null goto label8;

        $r63 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $r62 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Deflater>;

        varReplacer2671 = -1;

        interfaceinvoke $r63.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r62, varReplacer2671);

     label8:
        $r51 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i24 = interfaceinvoke $r51.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = $i24;

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i25 = interfaceinvoke $r52.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        $r53 = newarray (byte)[$i25];

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult> = $r53;

        $r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        if $r54 == null goto label9;

        $r61 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r60 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Inflater>;

        varReplacer2666 = -1;

        interfaceinvoke $r61.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r60, varReplacer2666);

     label9:
        $r55 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        varReplacer2673 = 0L;

        virtualinvoke $r55.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer2673);

        $r56 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        varReplacer2677 = 0L;

        virtualinvoke $r56.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer2677);

        $r57 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        varReplacer2670 = 0L;

        virtualinvoke $r57.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer2670);

        $r58 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        varReplacer2674 = 0L;

        virtualinvoke $r58.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer2674);

        $r59 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l26 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r59.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l26);

        return;
    }

    private byte[] resizeKey(byte[], int, org.apache.sshd.common.digest.Digest, byte[], byte[]) throws java.lang.Exception
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, varReplacer2682, varReplacer2683, varReplacer2684, varReplacer2685;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r0, r1;
        byte[] r2, r3, $r5, r6, r7, r9;
        org.apache.sshd.common.digest.Digest r4;
        org.apache.sshd.common.session.AbstractSession r8;

        nop;

        r8 := @this: org.apache.sshd.common.session.AbstractSession;

        r9 := @parameter0: byte[];

        i0 := @parameter1: int;

        r4 := @parameter2: org.apache.sshd.common.digest.Digest;

        r2 := @parameter3: byte[];

        r3 := @parameter4: byte[];

     label1:
        $i1 = lengthof r9;

        if i0 <= $i1 goto label2;

        $r0 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r0.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r1 = $r0;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r3);

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r9);

        $r5 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        varReplacer2684 = 0;

        interfaceinvoke r4.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>($r5, varReplacer2684, $i2);

        r6 = interfaceinvoke r4.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $i4 = lengthof r9;

        $i3 = lengthof r6;

        $i5 = $i4 + $i3;

        r7 = newarray (byte)[$i5];

        $i6 = lengthof r9;

        varReplacer2682 = 0;

        varReplacer2683 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, varReplacer2682, r7, varReplacer2682, $i6);

        $i8 = lengthof r9;

        $i7 = lengthof r6;

        varReplacer2685 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, varReplacer2685, r7, $i8, $i7);

        r9 = r7;

        goto label1;

     label2:
        return r9;
    }

    public void disconnect(int, java.lang.String) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0, varReplacer2688;
        org.slf4j.Logger $r1;
        java.lang.Integer $r2;
        java.lang.String r3, varReplacer2686, varReplacer2687;
        org.apache.sshd.common.util.buffer.Buffer r4;
        long $l1, $l2;
        java.util.concurrent.TimeUnit $r5;
        org.apache.sshd.common.io.IoWriteFuture $r6;
        org.apache.sshd.common.session.AbstractSession$3 $r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        varReplacer2686 = "Disconnecting: {} - {}";

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer2686, $r2, r3);

        varReplacer2688 = 1;

        r4 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer2688);

        $l1 = (long) i0;

        virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l1);

        virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r3);

        varReplacer2687 = "";

        virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(varReplacer2687);

        $l2 = r0.<org.apache.sshd.common.session.AbstractSession: long disconnectTimeoutMs>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r6 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)>(r4, $l2, $r5);

        $r7 = new org.apache.sshd.common.session.AbstractSession$3;

        specialinvoke $r7.<org.apache.sshd.common.session.AbstractSession$3: void <init>(org.apache.sshd.common.session.AbstractSession)>(r0);

        interfaceinvoke $r6.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r7);

        return;
    }

    protected void notImplemented() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        long $l0, $l1;
        int varReplacer2689;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer2689 = 3;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer2689);

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l1 = $l0 - 1L;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l1);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        return;
    }

    protected java.util.Map negotiate()
    {
        java.util.EnumMap $r0, r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.sshd.common.session.AbstractSession r4;
        java.util.Map $r5, $r8, $r11;
        java.lang.Object $r6, $r9, $r12, $r16, $r46;
        org.apache.sshd.common.kex.KexProposalOption r7, $r40, $r43;
        java.lang.String r10, r13, $r21, $r30, $r33, r45, r47, r51, r52, r53, varReplacer2690, varReplacer2691, varReplacer2693, varReplacer2694, varReplacer2695, varReplacer2696, varReplacer2698, varReplacer2699, varReplacer2700;
        java.lang.String[] r14, r15, r49, r50;
        org.slf4j.Logger $r17, $r19, $r41, $r42;
        java.lang.StringBuilder $r18, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39;
        java.lang.IllegalStateException $r44;
        int i0, i1, i2, i3, varReplacer2692, varReplacer2697;

        nop;

        r4 := @this: org.apache.sshd.common.session.AbstractSession;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        $r2 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.sshd.common.kex.KexProposalOption) $r6;

        $r8 = r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map clientProposal>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (java.lang.String) $r9;

        $r11 = r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map serverProposal>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r13 = (java.lang.String) $r12;

        varReplacer2697 = 44;

        r14 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r10, varReplacer2697);

        varReplacer2692 = 44;

        r15 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r13, varReplacer2692);

        r49 = r14;

        i1 = lengthof r49;

        i2 = 0;

     label02:
        if i2 >= i1 goto label07;

        r45 = r49[i2];

        r50 = r15;

        i0 = lengthof r50;

        i3 = 0;

     label03:
        if i3 >= i0 goto label05;

        r47 = r50[i3];

        $z5 = virtualinvoke r45.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z5 == 0 goto label04;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r45);

        goto label05;

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        $r46 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r51 = (java.lang.String) $r46;

        if r51 == null goto label06;

        goto label07;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r52 = (java.lang.String) $r16;

        if r52 != null goto label11;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        varReplacer2699 = "Unable to negotiate key exchange for ";

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2699);

        $r33 = virtualinvoke r7.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        varReplacer2696 = " (client: ";

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2696);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        varReplacer2700 = " / server: ";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2700);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        varReplacer2698 = ")";

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2698);

        r53 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        $z2 = virtualinvoke $r40.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r7);

        if $z2 != 0 goto label08;

        $r43 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        $z4 = virtualinvoke $r43.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r7);

        if $z4 == 0 goto label09;

     label08:
        $r41 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r41.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label10;

        $r42 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        interfaceinvoke $r42.<org.slf4j.Logger: void trace(java.lang.String)>(r53);

        goto label10;

     label09:
        $r44 = new java.lang.IllegalStateException;

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r53);

        throw $r44;

     label10:
        goto label12;

     label11:
        $r17 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r17.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label12;

        $r19 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer2693 = "Kex: negotiate(";

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2693);

        $r21 = virtualinvoke r7.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        varReplacer2690 = ") guess=";

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2690);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        varReplacer2691 = " (client: ";

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2691);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        varReplacer2694 = " / server: ";

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2694);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        varReplacer2695 = ")";

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2695);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void trace(java.lang.String)>($r30);

     label12:
        goto label01;

     label13:
        $r5 = virtualinvoke r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map setNegotiationResult(java.util.Map)>(r1);

        return $r5;
    }

    protected java.util.Map setNegotiationResult(java.util.Map)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.Map $r1, r2, $r3, r4, $r5, $r23;
        boolean $z0, $z1;
        org.slf4j.Logger $r6, $r9, $r17;
        java.lang.Object[] $r7, $r15;
        org.apache.sshd.common.kex.KexProposalOption $r8, $r11, $r13, $r16, $r19, $r21;
        java.lang.Object $r10, $r12, $r14, $r18, $r20, $r22;
        java.lang.Throwable $r24, r25;
        java.lang.String varReplacer2701, varReplacer2702;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r23.<java.util.Map: void clear()>();

     label2:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>(r4);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r24 := @caughtexception;

        r25 = $r24;

        exitmonitor r2;

     label5:
        throw r25;

     label6:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label7;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r7 = newarray (java.lang.Object)[3];

        $r8 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        $r10 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r7[0] = $r10;

        $r11 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        $r12 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r7[1] = $r12;

        $r13 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r7[2] = $r14;

        varReplacer2702 = "Kex: server->client {} {} {}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer2702, $r7);

        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[3];

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        $r18 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r15[0] = $r18;

        $r19 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        $r20 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r15[1] = $r20;

        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        $r22 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r15[2] = $r22;

        varReplacer2701 = "Kex: client->server {} {} {}";

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer2701, $r15);

     label7:
        return r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void requestSuccess(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r5, $r7;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r3;
        org.apache.sshd.common.util.buffer.Buffer r4;
        byte[] $r6;
        java.lang.Throwable $r8, r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r3 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $r6 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: byte[] getCompactData()>();

        specialinvoke $r3.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[])>($r6);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r9 = $r8;

        exitmonitor r2;

     label4:
        throw r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void requestFailure(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r3, $r4;
        java.lang.Throwable $r5, r6;
        org.apache.sshd.common.util.buffer.Buffer r7;
        null_type varReplacer2703;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r7 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        varReplacer2703 = null;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(varReplacer2703);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r4.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r6 = $r5;

        exitmonitor r2;

     label4:
        throw r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getIntProperty(java.lang.String, int)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, $r12, $r15, $r17, varReplacer2704, varReplacer2705, varReplacer2706;
        int i0, $i1;
        org.apache.sshd.common.FactoryManager $r2;
        java.lang.Exception $r3, r4;
        org.slf4j.Logger $r5, $r7;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r13, $r14, $r16;
        java.lang.Class $r11;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $i1 = staticinvoke <org.apache.sshd.common.FactoryManagerUtils: int getIntProperty(org.apache.sshd.common.FactoryManager,java.lang.String,int)>($r2, r1, i0);

     label2:
        return $i1;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2706 = "getIntProperty(";

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2706);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer2704 = ") failed (";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2704);

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        varReplacer2705 = ") to retrieve: ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2705);

        $r15 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

     label4:
        return i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public long getLongProperty(java.lang.String, long)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, $r12, $r15, $r17, varReplacer2707, varReplacer2708, varReplacer2709;
        long l0, $l1;
        org.apache.sshd.common.FactoryManager $r2;
        java.lang.Exception $r3, r4;
        org.slf4j.Logger $r5, $r7;
        boolean $z0;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r13, $r14, $r16;
        java.lang.Class $r11;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        $l1 = staticinvoke <org.apache.sshd.common.FactoryManagerUtils: long getLongProperty(org.apache.sshd.common.FactoryManager,java.lang.String,long)>($r2, r1, l0);

     label2:
        return $l1;

     label3:
        $r3 := @caughtexception;

        r4 = $r3;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer2707 = "getLongProperty(";

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2707);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        varReplacer2709 = ") failed (";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2709);

        $r11 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        varReplacer2708 = ") to retrieve: ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2708);

        $r15 = virtualinvoke r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r17);

     label4:
        return l0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Object getAttribute(org.apache.sshd.common.session.Session$AttributeKey)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.Session$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.Session$AttributeKey;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object setAttribute(org.apache.sshd.common.session.Session$AttributeKey, java.lang.Object)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.Session$AttributeKey r1;
        java.lang.Object r2, $r4;
        java.util.Map $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.Session$AttributeKey;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.String getUsername()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username>;

        return $r1;
    }

    public void setUsername(java.lang.String)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username> = r1;

        return;
    }

    public java.lang.Object getLock()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        return $r1;
    }

    public void addListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.SessionListener r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.util.List $r3;
        java.lang.String varReplacer2710;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.session.SessionListener;

        varReplacer2710 = "addListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer2710, r1);

        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void removeListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        java.util.List $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.SessionListener;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.List listeners>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    protected void sendEvent(org.apache.sshd.common.session.SessionListener$Event) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener$Event r1;
        org.apache.sshd.common.session.SessionListener $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.SessionListener$Event;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy>;

        interfaceinvoke $r2.<org.apache.sshd.common.session.SessionListener: void sessionEvent(org.apache.sshd.common.session.Session,org.apache.sshd.common.session.SessionListener$Event)>(r0, r1);

        return;
    }

    public org.apache.sshd.common.future.SshFuture reExchangeKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KexState $r1, $r2;
        java.util.concurrent.atomic.AtomicReference $r3;
        boolean $z0;
        org.apache.sshd.common.future.DefaultSshFuture $r4, $r7;
        org.slf4j.Logger $r5;
        java.lang.String varReplacer2711;
        null_type varReplacer2712;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer2711 = "Initiating key re-exchange";

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>(varReplacer2711);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit()>();

        $r7 = new org.apache.sshd.common.future.DefaultSshFuture;

        varReplacer2712 = null;

        specialinvoke $r7.<org.apache.sshd.common.future.DefaultSshFuture: void <init>(java.lang.Object)>(varReplacer2712);

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture> = $r7;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.DefaultSshFuture reexchangeFuture>;

        return $r4;
    }

    protected void checkRekey() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        return;
    }

    protected byte[] sendKexInit() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, $r10, $r12, varReplacer2713, varReplacer2716, varReplacer2717;
        boolean $z0, $z1;
        java.util.Map r2;
        byte[] r3;
        org.slf4j.Logger $r4, $r6;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r11;
        org.apache.sshd.common.SshException $r13;
        int varReplacer2714, varReplacer2715;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String resolveAvailableSignaturesProposal()>();

        $z0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r13 = new org.apache.sshd.common.SshException;

        varReplacer2715 = 9;

        varReplacer2716 = "sendKexInit() no resolved signatures available";

        specialinvoke $r13.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer2715, varReplacer2716);

        throw $r13;

     label1:
        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map createProposal(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit(java.util.Map)>(r2);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        varReplacer2717 = "sendKexInit(";

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2717);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        varReplacer2713 = ") seed: ";

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2713);

        varReplacer2714 = 58;

        $r10 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(char,byte[])>(varReplacer2714, r3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void setKexSeed(byte[])>(r3);

        return r3;
    }

    protected abstract transient void setKexSeed(byte[]);

    protected java.lang.String resolveAvailableSignaturesProposal()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)>($r1);

        return $r2;
    }

    protected abstract java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager);

    protected abstract void checkKeys() throws java.io.IOException;

    protected void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.AbstractSession r2;
        org.apache.sshd.common.util.buffer.Buffer r3;
        byte[] r4;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        r4 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)>(r3, r1);

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: void receiveKexInit(java.util.Map,byte[])>(r1, r4);

        return;
    }

    protected abstract void receiveKexInit(java.util.Map, byte[]) throws java.io.IOException;

    protected java.util.Map mergeProposals(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1, r2;
        boolean $z0, $z1;
        java.lang.Throwable $r4, r5;
        org.apache.sshd.common.session.AbstractSession r6;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        if r0 != r1 goto label1;

        return r1;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        interfaceinvoke r0.<java.util.Map: void clear()>();

     label3:
        $z1 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.util.Map)>(r1);

        if $z1 == 0 goto label5;

        exitmonitor r2;

     label4:
        return r1;

     label5:
        interfaceinvoke r0.<java.util.Map: void putAll(java.util.Map)>(r1);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r4 := @caughtexception;

        r5 = $r4;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return r1;

        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void serviceAccept() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        return;
    }

    protected void checkForTimeouts() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0, $z1;
        long l0, $l1, $l3, $l5, $l6, $l8, $l10, $l11;
        byte $b2, $b4, $b7, $b9, $b12;
        org.apache.sshd.common.session.Session$TimeoutStatus $r1, $r8;
        java.util.concurrent.atomic.AtomicReference $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13;
        java.lang.String $r7, $r14, varReplacer2718, varReplacer2719, varReplacer2720, varReplacer2722;
        int varReplacer2721, varReplacer2723;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isClosing()>();

        if $z0 != 0 goto label2;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z1 != 0 goto label1;

        $l6 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $b7 = $l6 cmp 0L;

        if $b7 <= 0 goto label1;

        $l8 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutTimestamp>;

        $b9 = l0 cmp $l8;

        if $b9 <= 0 goto label1;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r8 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus AuthTimeout>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r8);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        varReplacer2720 = "Session has timed out waiting for authentication after ";

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2720);

        $l10 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        varReplacer2718 = " ms.";

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2718);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer2721 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer2721, $r14);

     label1:
        $l11 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $b12 = $l11 cmp 0L;

        if $b12 <= 0 goto label2;

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label2;

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp>;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r1 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus AuthTimeout>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        varReplacer2722 = "User session has timed out idling after ";

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2722);

        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        varReplacer2719 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2719);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer2723 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer2723, $r7);

     label2:
        return;
    }

    public void resetIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l1, $l2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        $l2 = $l0 + $l1;

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutTimestamp> = $l2;

        return;
    }

    public org.apache.sshd.common.session.Session$TimeoutStatus getTimeoutStatus()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (org.apache.sshd.common.session.Session$TimeoutStatus) $r2;

        return $r3;
    }

    public long getAuthTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutMs>;

        return $l0;
    }

    public long getIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutMs>;

        return $l0;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r11, $r12;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r13, varReplacer2724, varReplacer2725, varReplacer2726;
        org.apache.sshd.common.io.IoSession $r9;
        java.net.SocketAddress $r10;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer2724 = "[";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2724);

        $r6 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String getUsername()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer2725 = "@";

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2725);

        $r9 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession getIoSession()>();

        $r10 = interfaceinvoke $r9.<org.apache.sshd.common.io.IoSession: java.net.SocketAddress getRemoteAddress()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        varReplacer2726 = "]";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer2726);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static org.slf4j.Logger access$000(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        nop;

        $r0 = class "Lorg/apache/sshd/common/session/AbstractSession;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled> = $z1;

        return;
    }
}
