public abstract class org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider extends org.apache.sshd.common.keyprovider.AbstractKeyPairProvider
{
    public static final java.lang.String DEFAULT_ALGORITHM;
    public static final boolean DEFAULT_ALLOWED_TO_OVERWRITE;
    private java.nio.file.Path path;
    private java.lang.String algorithm;
    private int keySize;
    private java.security.spec.AlgorithmParameterSpec keySpec;
    private java.security.KeyPair keyPair;
    private boolean overwriteAllowed;

    protected void <init>()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.lang.String varReplacer5820;
        int varReplacer5821;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        specialinvoke r0.<org.apache.sshd.common.keyprovider.AbstractKeyPairProvider: void <init>()>();

        varReplacer5820 = "DSA";

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.lang.String algorithm> = varReplacer5820;

        varReplacer5821 = 1;

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: boolean overwriteAllowed> = varReplacer5821;

        return;
    }

    public java.nio.file.Path getPath()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.nio.file.Path $r1;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        $r1 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.nio.file.Path path>;

        return $r1;
    }

    public void setFile(java.io.File)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.io.File r1;
        java.nio.file.Path $r3;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r1 := @parameter0: java.io.File;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

     label2:
        virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: void setPath(java.nio.file.Path)>($r3);

        return;
    }

    public void setPath(java.nio.file.Path)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.nio.file.Path r1, $r3;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r1 := @parameter0: java.nio.file.Path;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

     label2:
        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.nio.file.Path path> = $r3;

        return;
    }

    public java.lang.String getAlgorithm()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        $r1 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.lang.String algorithm>;

        return $r1;
    }

    public void setAlgorithm(java.lang.String)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.lang.String r1;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.lang.String algorithm> = r1;

        return;
    }

    public int getKeySize()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        int $i0;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        $i0 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: int keySize>;

        return $i0;
    }

    public void setKeySize(int)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        int i0;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        i0 := @parameter0: int;

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: int keySize> = i0;

        return;
    }

    public java.security.spec.AlgorithmParameterSpec getKeySpec()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.security.spec.AlgorithmParameterSpec $r1;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        $r1 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.spec.AlgorithmParameterSpec keySpec>;

        return $r1;
    }

    public void setKeySpec(java.security.spec.AlgorithmParameterSpec)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.security.spec.AlgorithmParameterSpec r1;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.spec.AlgorithmParameterSpec keySpec> = r1;

        return;
    }

    public boolean isOverwriteAllowed()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        $z0 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: boolean overwriteAllowed>;

        return $z0;
    }

    public void setOverwriteAllowed(boolean)
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        boolean z0;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: boolean overwriteAllowed> = z0;

        return;
    }

    public synchronized java.lang.Iterable loadKeys()
    {
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r0;
        java.nio.file.Path r1;
        java.security.KeyPair $r2, $r3, $r6, $r8, $r10, $r56, $r59, $r61;
        java.util.Set $r4;
        java.util.List $r5;
        java.nio.file.OpenOption[] $r7, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Exception $r11, $r26, $r41, r55, r58, r60;
        java.lang.Object[] $r12, $r27, $r42;
        org.slf4j.Logger $r13, $r17, $r19, $r28, $r32, $r34, $r43, $r47, $r49;
        java.lang.Class $r14, $r29, $r44;
        java.lang.String $r15, $r16, $r25, $r30, $r31, $r40, $r45, $r46, $r53, r57, varReplacer5822, varReplacer5823, varReplacer5824, varReplacer5825, varReplacer5826, varReplacer5827, varReplacer5828, varReplacer5829, varReplacer5830, varReplacer5831, varReplacer5832;
        java.lang.StringBuilder $r18, $r20, $r21, $r22, $r23, $r24, $r33, $r35, $r36, $r37, $r38, $r39, $r48, $r50, $r51, $r52;
        java.nio.file.LinkOption[] r54;
        int varReplacer5833;

        nop;

        r0 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r1 = virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.nio.file.Path getPath()>();

        $r2 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        if $r2 != null goto label04;

        if r1 == null goto label04;

        varReplacer5833 = 0;

        r54 = staticinvoke <org.apache.sshd.common.util.io.IoUtils: java.nio.file.LinkOption[] getLinkOptions(boolean)>(varReplacer5833);

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, r54);

        if $z0 == 0 goto label04;

        $z1 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, r54);

        if $z1 == 0 goto label04;

     label01:
        $r9 = <org.apache.sshd.common.util.io.IoUtils: java.nio.file.OpenOption[] EMPTY_OPEN_OPTIONS>;

        $r10 = virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair readKeyPair(java.nio.file.Path,java.nio.file.OpenOption[])>(r1, $r9);

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair> = $r10;

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

        r55 = $r41;

        $r43 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r42 = newarray (java.lang.Object)[3];

        $r44 = virtualinvoke r55.<java.lang.Object: java.lang.Class getClass()>();

        $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getSimpleName()>();

        $r42[0] = $r45;

        $r42[1] = r1;

        $r46 = virtualinvoke r55.<java.lang.Exception: java.lang.String getMessage()>();

        $r42[2] = $r46;

        varReplacer5825 = "Failed ({}) to load from {}: {}";

        interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer5825, $r42);

        $r47 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r47.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z4 == 0 goto label04;

        $r49 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        varReplacer5822 = "loadKeys(";

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5822);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        varReplacer5827 = ") failure details";

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5827);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r49.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r53, r55);

     label04:
        $r56 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        if $r56 != null goto label12;

        r57 = virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.lang.String getAlgorithm()>();

     label05:
        $r6 = virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair generateKeyPair(java.lang.String)>(r57);

        r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair> = $r6;

     label06:
        goto label08;

     label07:
        $r26 := @caughtexception;

        r58 = $r26;

        $r28 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r27 = newarray (java.lang.Object)[5];

        $r27[0] = r1;

        $r27[1] = r57;

        $r29 = virtualinvoke r58.<java.lang.Object: java.lang.Class getClass()>();

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getSimpleName()>();

        $r27[2] = $r30;

        $r27[3] = r57;

        $r31 = virtualinvoke r58.<java.lang.Exception: java.lang.String getMessage()>();

        $r27[4] = $r31;

        varReplacer5823 = "loadKeys({})[{}] Failed ({}) to generate {} key-pair: {}";

        interfaceinvoke $r28.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer5823, $r27);

        $r32 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r32.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label08;

        $r34 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        varReplacer5826 = "loadKeys(";

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5826);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        varReplacer5830 = ")[";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5830);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        varReplacer5828 = "] key-pair generation failure details";

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5828);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r34.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r40, r58);

     label08:
        $r59 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        if $r59 == null goto label12;

        if r1 == null goto label12;

     label09:
        $r8 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        $r7 = newarray (java.nio.file.OpenOption)[0];

        virtualinvoke r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])>($r8, r1, $r7);

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

        r60 = $r11;

        $r13 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r12 = newarray (java.lang.Object)[5];

        $r12[0] = r57;

        $r12[1] = r1;

        $r14 = virtualinvoke r60.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12[2] = $r15;

        $r12[3] = r57;

        $r16 = virtualinvoke r60.<java.lang.Exception: java.lang.String getMessage()>();

        $r12[4] = $r16;

        varReplacer5831 = "loadKeys({})[{}] Failed ({}) to write {} key: {}";

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer5831, $r12);

        $r17 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r17.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label12;

        $r19 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer5824 = "loadKeys(";

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5824);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        varReplacer5829 = ")[";

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5829);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        varReplacer5832 = "] writefailure details";

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5832);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r25, r60);

     label12:
        $r61 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        if $r61 != null goto label13;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label13:
        $r3 = r0.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair keyPair>;

        $r4 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r3);

        return $r4;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    protected transient java.security.KeyPair readKeyPair(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.nio.file.Path r0;
        java.nio.file.OpenOption[] r1;
        java.io.InputStream r2;
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, r6, r7, $r8, $r9, $r10, r11, r12, r14;
        java.security.KeyPair r13;

        nop;

        r3 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.OpenOption[];

        r2 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r1);

        r12 = null;

     label01:
        $r4 = interfaceinvoke r0.<java.nio.file.Path: java.lang.String toString()>();

        r13 = virtualinvoke r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.KeyPair doReadKeyPair(java.lang.String,java.io.InputStream)>($r4, r2);

     label02:
        if r2 == null goto label07;

        if r12 == null goto label06;

     label03:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r11 = $r10;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r11);

        goto label07;

     label06:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label07:
        return r13;

     label08:
        $r9 := @caughtexception;

        r14 = $r9;

        r12 = r14;

        throw r14;

     label09:
        $r8 := @caughtexception;

        r7 = $r8;

     label10:
        if r2 == null goto label15;

        if r12 == null goto label14;

     label11:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r5 := @caughtexception;

        r6 = $r5;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r6);

        goto label15;

     label14:
        virtualinvoke r2.<java.io.InputStream: void close()>();

     label15:
        throw r7;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    protected abstract java.security.KeyPair doReadKeyPair(java.lang.String, java.io.InputStream) throws java.io.IOException, java.security.GeneralSecurityException;

    protected transient void writeKeyPair(java.security.KeyPair, java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException, java.security.GeneralSecurityException
    {
        java.nio.file.Path r0;
        java.nio.file.LinkOption[] $r1;
        boolean $z0, $z1, $z2;
        java.nio.file.OpenOption[] r2;
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r3;
        java.lang.String $r4, $r9, $r10, $r15, $r16, $r23, varReplacer5834, varReplacer5835, varReplacer5836, varReplacer5837;
        java.security.KeyPair r5;
        java.lang.Object[] $r6, $r12;
        org.slf4j.Logger $r7, $r13, $r17, $r19;
        java.lang.Exception $r11, r34;
        java.lang.Class $r14;
        java.lang.StringBuilder $r18, $r20, $r21, $r22;
        java.lang.Throwable $r24, r25, r26, $r27, $r28, $r29, r31, r32, r33;
        java.io.OutputStream r30;
        java.security.PublicKey $r35;

        nop;

        r3 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r5 := @parameter0: java.security.KeyPair;

        r0 := @parameter1: java.nio.file.Path;

        r2 := @parameter2: java.nio.file.OpenOption[];

        $r1 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(r0, $r1);

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: boolean isOverwriteAllowed()>();

        if $z1 == 0 goto label19;

     label01:
        r30 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r0, r2);

        r31 = null;

     label02:
        $r4 = interfaceinvoke r0.<java.nio.file.Path: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: void doWriteKeyPair(java.lang.String,java.security.KeyPair,java.io.OutputStream)>($r4, r5, r30);

     label03:
        if r30 == null goto label16;

        if r31 == null goto label07;

     label04:
        virtualinvoke r30.<java.io.OutputStream: void close()>();

     label05:
        goto label16;

     label06:
        $r29 := @caughtexception;

        r32 = $r29;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r32);

        goto label16;

     label07:
        virtualinvoke r30.<java.io.OutputStream: void close()>();

        goto label16;

     label08:
        $r28 := @caughtexception;

        r33 = $r28;

        r31 = r33;

        throw r33;

     label09:
        $r27 := @caughtexception;

        r26 = $r27;

     label10:
        if r30 == null goto label15;

        if r31 == null goto label14;

     label11:
        virtualinvoke r30.<java.io.OutputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r24 := @caughtexception;

        r25 = $r24;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r25);

        goto label15;

     label14:
        virtualinvoke r30.<java.io.OutputStream: void close()>();

     label15:
        throw r26;

     label16:
        goto label22;

     label17:
        $r11 := @caughtexception;

        r34 = $r11;

        $r13 = r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = r0;

        $r14 = virtualinvoke r34.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r12[1] = $r15;

        $r16 = virtualinvoke r34.<java.lang.Exception: java.lang.String getMessage()>();

        $r12[2] = $r16;

        varReplacer5834 = "writeKeyPair({}) failed ({}) to write key {}: {}";

        interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer5834, $r12);

        $r17 = r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r17.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label18;

        $r19 = r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer5836 = "writeKeyPair(";

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5836);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer5837 = ") write failure details";

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5837);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r23, r34);

     label18:
        goto label22;

     label19:
        $r7 = r3.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r0;

        $r9 = staticinvoke <org.apache.sshd.common.config.keys.KeyUtils: java.lang.String getKeyType(java.security.KeyPair)>(r5);

        $r6[1] = $r9;

        if r5 != null goto label20;

        $r35 = null;

        goto label21;

     label20:
        $r35 = virtualinvoke r5.<java.security.KeyPair: java.security.PublicKey getPublic()>();

     label21:
        $r10 = staticinvoke <org.apache.sshd.common.config.keys.KeyUtils: java.lang.String getFingerPrint(java.security.PublicKey)>($r35);

        $r6[2] = $r10;

        varReplacer5835 = "Overwriting key ({}) is disabled: using throwaway {}: {}";

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>(varReplacer5835, $r6);

     label22:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch java.lang.Exception from label01 to label16 with label17;
    }

    protected abstract void doWriteKeyPair(java.lang.String, java.security.KeyPair, java.io.OutputStream) throws java.io.IOException, java.security.GeneralSecurityException;

    protected java.security.KeyPair generateKeyPair(java.lang.String) throws java.security.GeneralSecurityException
    {
        java.lang.String r0, $r10, $r19, $r21, varReplacer5838, varReplacer5839, varReplacer5840, varReplacer5841;
        java.security.KeyPairGenerator r1;
        org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider r2;
        java.security.spec.AlgorithmParameterSpec $r3, $r11, $r17;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r12, $r14, $r15, $r16, $r20;
        org.slf4j.Logger $r5, $r13;
        java.lang.Class $r18;
        java.security.KeyPair $r22;

        nop;

        r2 := @this: org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.sshd.common.util.SecurityUtils: java.security.KeyPairGenerator getKeyPairGenerator(java.lang.String)>(r0);

        $r3 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.spec.AlgorithmParameterSpec keySpec>;

        if $r3 == null goto label1;

        $r11 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.spec.AlgorithmParameterSpec keySpec>;

        virtualinvoke r1.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>($r11);

        $r13 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        varReplacer5838 = "generateKeyPair(";

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5838);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        varReplacer5839 = ") generating host key - spec=";

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5839);

        $r17 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: java.security.spec.AlgorithmParameterSpec keySpec>;

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getSimpleName()>();

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r21);

        goto label2;

     label1:
        $i0 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: int keySize>;

        if $i0 == 0 goto label2;

        $i1 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: int keySize>;

        virtualinvoke r1.<java.security.KeyPairGenerator: void initialize(int)>($i1);

        $r5 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: org.slf4j.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer5840 = "generateKeyPair(";

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5840);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        varReplacer5841 = ") generating host key - size=";

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer5841);

        $i2 = r2.<org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider: int keySize>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r10);

     label2:
        $r22 = virtualinvoke r1.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        return $r22;
    }
}
