public abstract class org.apache.sshd.common.session.AbstractSession extends org.apache.sshd.common.kex.AbstractKexFactoryManager implements org.apache.sshd.common.session.Session
{
    public static final java.lang.String SESSION;
    protected final boolean isServer;
    protected final org.apache.sshd.common.io.IoSession ioSession;
    protected final org.apache.sshd.common.random.Random random;
    protected boolean authed;
    protected java.lang.String username;
    protected final java.util.Collection sessionListeners;
    protected final org.apache.sshd.common.session.SessionListener sessionListenerProxy;
    protected final java.util.Collection channelListeners;
    protected final org.apache.sshd.common.channel.ChannelListener channelListenerProxy;
    protected byte[] sessionId;
    protected java.lang.String serverVersion;
    protected java.lang.String clientVersion;
    protected final java.util.Map serverProposal;
    protected final java.util.Map clientProposal;
    protected final java.util.Map negotiationResult;
    protected byte[] i_c;
    protected byte[] i_s;
    protected org.apache.sshd.common.kex.KeyExchange kex;
    protected java.lang.Boolean firstKexPacketFollows;
    protected final java.util.concurrent.atomic.AtomicReference kexState;
    protected final java.util.concurrent.atomic.AtomicReference kexFutureHolder;
    protected org.apache.sshd.common.cipher.Cipher outCipher;
    protected org.apache.sshd.common.cipher.Cipher inCipher;
    protected int outCipherSize;
    protected int inCipherSize;
    protected org.apache.sshd.common.mac.Mac outMac;
    protected org.apache.sshd.common.mac.Mac inMac;
    protected byte[] inMacResult;
    protected org.apache.sshd.common.compression.Compression outCompression;
    protected org.apache.sshd.common.compression.Compression inCompression;
    protected long seqi;
    protected long seqo;
    protected org.apache.sshd.common.util.buffer.Buffer decoderBuffer;
    protected org.apache.sshd.common.util.buffer.Buffer uncompressBuffer;
    protected int decoderState;
    protected int decoderLength;
    protected final java.lang.Object encodeLock;
    protected final java.lang.Object decodeLock;
    protected final java.lang.Object requestLock;
    protected final java.util.Map attributes;
    protected long authTimeoutStart;
    protected long idleTimeoutStart;
    protected final java.util.concurrent.atomic.AtomicReference timeoutStatus;
    protected final java.util.concurrent.atomic.AtomicLong inPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong outPacketsCount;
    protected final java.util.concurrent.atomic.AtomicLong inBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong outBytesCount;
    protected final java.util.concurrent.atomic.AtomicLong inBlocksCount;
    protected final java.util.concurrent.atomic.AtomicLong outBlocksCount;
    protected final java.util.concurrent.atomic.AtomicLong lastKeyTimeValue;
    protected long maxRekyPackets;
    protected long maxRekeyBytes;
    protected long maxRekeyInterval;
    protected final java.util.Queue pendingPackets;
    protected org.apache.sshd.common.Service currentService;
    protected int ignorePacketDataLength;
    protected long ignorePacketsFrequency;
    protected int ignorePacketsVariance;
    protected final java.util.concurrent.atomic.AtomicLong maxRekeyBlocks;
    protected final java.util.concurrent.atomic.AtomicLong ignorePacketsCount;
    private final org.apache.sshd.common.FactoryManager factoryManager;
    private final java.util.Map properties;
    private final java.util.concurrent.atomic.AtomicReference requestResult;
    static final boolean $assertionsDisabled;

    protected void <init>(boolean, org.apache.sshd.common.FactoryManager, org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager r1;
        java.lang.Object $r2, $r13, $r14, $r15, $r33, $r35, $r36;
        org.apache.sshd.common.kex.KexFactoryManager $r3;
        java.util.concurrent.CopyOnWriteArraySet $r4, $r5;
        java.util.EnumMap $r6, $r7, $r8;
        java.util.concurrent.atomic.AtomicReference $r9, $r11, $r17, $r30;
        org.apache.sshd.common.kex.KexState $r10;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r12;
        java.util.concurrent.ConcurrentHashMap $r16, $r29;
        long $l0, $l1, varReplacer3551, varReplacer3554, varReplacer3555, varReplacer3556, varReplacer3557, varReplacer3559, varReplacer3560, varReplacer3561, varReplacer3564, varReplacer3565, varReplacer3566, varReplacer3569, varReplacer3570;
        org.apache.sshd.common.session.Session$TimeoutStatus $r18;
        java.util.concurrent.atomic.AtomicLong $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28;
        java.util.LinkedList $r26;
        boolean z0;
        org.apache.sshd.common.io.IoSession r31;
        org.apache.sshd.common.Factory $r32, r34;
        org.apache.sshd.common.random.Random $r37;
        java.lang.Class $r38;
        java.lang.ClassLoader r39;
        java.util.Collection $r40, $r43;
        java.util.EventListener $r41, $r44;
        org.apache.sshd.common.session.SessionListener $r42, $r46;
        org.apache.sshd.common.channel.ChannelListener $r45, $r47;
        java.lang.String varReplacer3550, varReplacer3558, varReplacer3562;
        int varReplacer3552, varReplacer3553, varReplacer3563, varReplacer3567;
        null_type varReplacer3568;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.sshd.common.FactoryManager;

        r31 := @parameter2: org.apache.sshd.common.io.IoSession;

        varReplacer3550 = "No factory manager provided";

        $r2 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, varReplacer3550);

        $r3 = (org.apache.sshd.common.kex.KexFactoryManager) $r2;

        specialinvoke r0.<org.apache.sshd.common.kex.AbstractKexFactoryManager: void <init>(org.apache.sshd.common.kex.KexFactoryManager)>($r3);

        $r4 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners> = $r4;

        $r5 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r5.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners> = $r5;

        $r6 = new java.util.EnumMap;

        specialinvoke $r6.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map serverProposal> = $r6;

        $r7 = new java.util.EnumMap;

        specialinvoke $r7.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map clientProposal> = $r7;

        $r8 = new java.util.EnumMap;

        specialinvoke $r8.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult> = $r8;

        $r9 = new java.util.concurrent.atomic.AtomicReference;

        $r10 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState UNKNOWN>;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r10);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState> = $r9;

        $r11 = new java.util.concurrent.atomic.AtomicReference;

        varReplacer3568 = null;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(varReplacer3568);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder> = $r11;

        varReplacer3567 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = varReplacer3567;

        varReplacer3553 = 8;

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = varReplacer3553;

        $r12 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r12.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock> = $r15;

        $r16 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r16.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes> = $r16;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutStart> = $l0;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutStart> = $l1;

        $r17 = new java.util.concurrent.atomic.AtomicReference;

        $r18 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        specialinvoke $r17.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r18);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus> = $r17;

        $r19 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3565 = 0L;

        specialinvoke $r19.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3565);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3556 = 0L;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3556);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount> = $r20;

        $r21 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3566 = 0L;

        specialinvoke $r21.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3566);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount> = $r21;

        $r22 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3560 = 0L;

        specialinvoke $r22.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3560);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount> = $r22;

        $r23 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3551 = 0L;

        specialinvoke $r23.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3551);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount> = $r23;

        $r24 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3561 = 0L;

        specialinvoke $r24.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3561);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount> = $r24;

        $r25 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3559 = 0L;

        specialinvoke $r25.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3559);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue> = $r25;

        varReplacer3554 = 2147483648L;

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets> = varReplacer3554;

        varReplacer3569 = 1073741824L;

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes> = varReplacer3569;

        varReplacer3564 = 3600000L;

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval> = varReplacer3564;

        $r26 = new java.util.LinkedList;

        specialinvoke $r26.<java.util.LinkedList: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets> = $r26;

        varReplacer3552 = 16;

        r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketDataLength> = varReplacer3552;

        varReplacer3557 = 1024L;

        r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency> = varReplacer3557;

        varReplacer3563 = 32;

        r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance> = varReplacer3563;

        $r27 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3555 = 67108864L;

        specialinvoke $r27.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3555);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks> = $r27;

        $r28 = new java.util.concurrent.atomic.AtomicLong;

        varReplacer3570 = 1024L;

        specialinvoke $r28.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(varReplacer3570);

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount> = $r28;

        $r29 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r29.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map properties> = $r29;

        $r30 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r30.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult> = $r30;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer> = z0;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager> = r1;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession> = r31;

        $r32 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.Factory getRandomFactory()>();

        varReplacer3562 = "No random factory for %s";

        $r33 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r32, varReplacer3562, r31);

        r34 = (org.apache.sshd.common.Factory) $r33;

        $r35 = interfaceinvoke r34.<org.apache.sshd.common.Factory: java.lang.Object create()>();

        varReplacer3558 = "No randomizer instance for %s";

        $r36 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r35, varReplacer3558, r31);

        $r37 = (org.apache.sshd.common.random.Random) $r36;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random> = $r37;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void refreshConfiguration()>();

        $r38 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r39 = virtualinvoke $r38.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r40 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        $r41 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/session/SessionListener;", r39, $r40);

        $r42 = (org.apache.sshd.common.session.SessionListener) $r41;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy> = $r42;

        $r43 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        $r44 = staticinvoke <org.apache.sshd.common.util.EventListenerUtils: java.util.EventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)>(class "Lorg/apache/sshd/common/channel/ChannelListener;", r39, $r43);

        $r45 = (org.apache.sshd.common.channel.ChannelListener) $r44;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.channel.ChannelListener channelListenerProxy> = $r45;

        $r46 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void addSessionListener(org.apache.sshd.common.session.SessionListener)>($r46);

        $r47 = interfaceinvoke r1.<org.apache.sshd.common.FactoryManager: org.apache.sshd.common.channel.ChannelListener getChannelListenerProxy()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void addChannelListener(org.apache.sshd.common.channel.ChannelListener)>($r47);

        return;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession $r1;
        int varReplacer3571;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        varReplacer3571 = 0;

        $r1 = staticinvoke <org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession,boolean)>(r0, varReplacer3571);

        return $r1;
    }

    public static org.apache.sshd.common.session.AbstractSession getSession(org.apache.sshd.common.io.IoSession, boolean)
    {
        org.apache.sshd.common.io.IoSession r0;
        java.lang.Object $r1;
        org.apache.sshd.common.session.AbstractSession r2;
        boolean z0;
        java.lang.IllegalStateException $r3;
        java.lang.String varReplacer3572, varReplacer3573;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        z0 := @parameter1: boolean;

        varReplacer3573 = "org.apache.sshd.session";

        $r1 = interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object getAttribute(java.lang.Object)>(varReplacer3573);

        r2 = (org.apache.sshd.common.session.AbstractSession) $r1;

        if r2 != null goto label1;

        if z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        varReplacer3572 = "No session available";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer3572);

        throw $r3;

     label1:
        return r2;
    }

    public static void attachSession(org.apache.sshd.common.io.IoSession, org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.io.IoSession r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.String varReplacer3574;

        nop;

        r0 := @parameter0: org.apache.sshd.common.io.IoSession;

        r1 := @parameter1: org.apache.sshd.common.session.AbstractSession;

        varReplacer3574 = "org.apache.sshd.session";

        interfaceinvoke r0.<org.apache.sshd.common.io.IoSession: java.lang.Object setAttribute(java.lang.Object,java.lang.Object)>(varReplacer3574, r1);

        return;
    }

    public java.lang.String getServerVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        return $r1;
    }

    public java.lang.String getClientVersion()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        return $r1;
    }

    public org.apache.sshd.common.kex.KeyExchange getKex()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        return $r1;
    }

    public byte[] getSessionId()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte[] $r1, $r2, $r4;
        boolean $z0;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $z0 = staticinvoke <org.apache.sshd.common.util.NumberUtils: boolean isEmpty(byte[])>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (byte[]) $r3;

     label2:
        return $r4;
    }

    public org.apache.sshd.common.io.IoSession getIoSession()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.io.IoSession $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        return $r1;
    }

    public org.apache.sshd.common.FactoryManager getFactoryManager()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        return $r1;
    }

    public org.apache.sshd.common.PropertyResolver getParentPropertyResolver()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        return $r1;
    }

    public java.util.Map getProperties()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.Map $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map properties>;

        return $r1;
    }

    public java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)
    {
        org.apache.sshd.common.kex.KexProposalOption r0;
        org.apache.sshd.common.session.AbstractSession r1;
        java.util.Map $r2, r3, $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7, r8;
        null_type varReplacer3575;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.kex.KexProposalOption;

        if r0 != null goto label1;

        varReplacer3575 = null;

        return varReplacer3575;

     label1:
        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        r3 = $r2;

        entermonitor $r2;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (java.lang.String) $r5;

        exitmonitor r3;

     label3:
        return $r6;

     label4:
        $r7 := @caughtexception;

        r8 = $r7;

        exitmonitor r3;

     label5:
        throw r8;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public org.apache.sshd.common.cipher.CipherInformation getCipherInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.cipher.Cipher $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

     label2:
        return $r1;
    }

    public org.apache.sshd.common.compression.CompressionInformation getCompressionInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.compression.Compression $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

     label2:
        return $r1;
    }

    public org.apache.sshd.common.mac.MacInformation getMacInformation(boolean)
    {
        boolean z0;
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.mac.Mac $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        goto label2;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

     label2:
        return $r1;
    }

    public boolean isAuthenticated()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        return $z0;
    }

    public void setAuthenticated() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener$Event $r1;
        int varReplacer3576;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer3576 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: boolean authed> = varReplacer3576;

        $r1 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event Authenticated>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r1);

        return;
    }

    public void messageReceived(org.apache.sshd.common.util.Readable) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        org.apache.sshd.common.util.Readable r3;
        org.apache.sshd.common.util.buffer.Buffer $r4, $r6, $r7;
        java.lang.String $r5, $r8;
        boolean $z0;
        java.lang.Throwable $r9, r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.Readable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object decodeLock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r4.<org.apache.sshd.common.util.buffer.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r3);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        if $r5 == null goto label2;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        if $r8 != null goto label5;

     label2:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r7.<org.apache.sshd.common.util.buffer.Buffer: void compact()>();

        goto label5;

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void decode()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r10 = $r9;

        exitmonitor r2;

     label8:
        throw r10;

     label9:
        return;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void refreshConfiguration()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, r2;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l7, $l10, $l11, $l14, $l15, varReplacer3586;
        int $i6, $i8, $i9, $i13, varReplacer3580, varReplacer3582, varReplacer3583;
        byte $b12;
        org.apache.sshd.common.random.Random $r3;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.lang.Throwable $r5, r6;
        java.lang.String varReplacer3577, varReplacer3578, varReplacer3579, varReplacer3581, varReplacer3584, varReplacer3585;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes>;

        varReplacer3577 = "rekey-bytes-limit";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3577, $l0);

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes> = $l1;

        $l2 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval>;

        varReplacer3578 = "rekey-time-limit";

        $l3 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3578, $l2);

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval> = $l3;

        $l4 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets>;

        varReplacer3584 = "rekey-packets-limit";

        $l5 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3584, $l4);

        r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets> = $l5;

        varReplacer3579 = "ignore-message-size";

        varReplacer3580 = 16;

        $i6 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)>(r0, varReplacer3579, varReplacer3580);

        r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketDataLength> = $i6;

        varReplacer3585 = "ignore-message-frequency";

        varReplacer3586 = 1024L;

        $l7 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3585, varReplacer3586);

        r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency> = $l7;

        varReplacer3581 = "ignore-message-variance";

        varReplacer3582 = 32;

        $i8 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)>(r0, varReplacer3581, varReplacer3582);

        r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance> = $i8;

        $i9 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance>;

        $l11 = (long) $i9;

        $l10 = r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency>;

        $b12 = $l11 cmp $l10;

        if $b12 < 0 goto label2;

        varReplacer3583 = 0;

        r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance> = varReplacer3583;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $l14 = r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency>;

        $i13 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance>;

        $l15 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)>($r3, $l14, $i13);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l15);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r6 = $r5;

        exitmonitor r2;

     label5:
        throw r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void handleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1, $r8, r10, r12;
        org.apache.sshd.common.util.buffer.Buffer r2;
        java.lang.Throwable $r3, r4, $r11, r13;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r5, r15;
        java.lang.Exception $r6, r14;
        java.util.concurrent.atomic.AtomicReference $r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

     label01:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r12 = $r1;

        entermonitor $r1;

     label02:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        exitmonitor r12;

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

        r13 = $r11;

        exitmonitor r12;

     label05:
        throw r13;

     label06:
        goto label14;

     label07:
        $r6 := @caughtexception;

        r14 = $r6;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r15 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r8;

        if r15 == null goto label13;

        r5 = r15;

        entermonitor r15;

     label08:
        r10 = virtualinvoke r15.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r10 != null goto label09;

        virtualinvoke r15.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>(r14);

     label09:
        exitmonitor r5;

     label10:
        goto label13;

     label11:
        $r3 := @caughtexception;

        r4 = $r3;

        exitmonitor r5;

     label12:
        throw r4;

     label13:
        throw r14;

     label14:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Exception from label01 to label06 with label07;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        int i0;
        org.apache.sshd.common.session.AbstractSession r1;
        org.slf4j.Logger $r2, $r13;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.Service $r3, $r10;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9, $r14, varReplacer3588, varReplacer3591;
        java.lang.Boolean $r11, $r12;
        java.lang.Throwable $r15, r16;
        null_type varReplacer3587, varReplacer3589, varReplacer3590;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int getUByte()>();

        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label01;

        $r13 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r14 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        varReplacer3591 = "doHandleMessage({}) process {}";

        interfaceinvoke $r13.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3591, r1, $r14);

     label01:
        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label10;
            case 8: goto label10;
            case 9: goto label10;
            case 10: goto label10;
            case 11: goto label10;
            case 12: goto label10;
            case 13: goto label10;
            case 14: goto label10;
            case 15: goto label10;
            case 16: goto label10;
            case 17: goto label10;
            case 18: goto label10;
            case 19: goto label10;
            case 20: goto label08;
            case 21: goto label09;
            default: goto label10;
        };

     label02:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label03:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleIgnore(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label04:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label05:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleDebug(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label06:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label07:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label08:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r0);

        goto label18;

     label09:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        goto label18;

     label10:
        if i0 < 30 goto label16;

        if i0 > 49 goto label16;

        $r11 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        if $r11 == null goto label15;

     label11:
        $r12 = r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        $z2 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: boolean handleFirstKexPacketFollows(int,org.apache.sshd.common.util.buffer.Buffer,boolean)>(i0, r0, $z1);

        if $z2 != 0 goto label13;

     label12:
        varReplacer3590 = null;

        r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer3590;

        goto label18;

     label13:
        varReplacer3587 = null;

        r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer3587;

        goto label15;

     label14:
        $r15 := @caughtexception;

        r16 = $r15;

        varReplacer3589 = null;

        r1.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer3589;

        throw r16;

     label15:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        goto label18;

     label16:
        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r3 == null goto label17;

        $r10 = r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        interfaceinvoke $r10.<org.apache.sshd.common.Service: void process(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r0);

        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        goto label18;

     label17:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        varReplacer3588 = "Unsupported command ";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3588);

        $r7 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label18:
        virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return;

        catch java.lang.Throwable from label11 to label12 with label14;
    }

    protected boolean handleFirstKexPacketFollows(int, org.apache.sshd.common.util.buffer.Buffer, boolean)
    {
        boolean z0, $z1;
        org.apache.sshd.common.kex.KexProposalOption[] $r0, r3;
        org.apache.sshd.common.kex.KexProposalOption $r1, $r2, r4;
        int i0, i1, i2, varReplacer3593, varReplacer3594, varReplacer3595;
        org.apache.sshd.common.session.AbstractSession r5;
        org.apache.sshd.common.util.Pair r6;
        org.slf4j.Logger $r7, $r9;
        java.lang.Object[] $r8;
        java.lang.String $r10, varReplacer3592;
        java.lang.Object $r11, $r12;
        org.apache.sshd.common.util.buffer.Buffer r13;

        nop;

        r5 := @this: org.apache.sshd.common.session.AbstractSession;

        i1 := @parameter0: int;

        r13 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        varReplacer3594 = 1;

        return varReplacer3594;

     label1:
        $r0 = newarray (org.apache.sshd.common.kex.KexProposalOption)[2];

        $r1 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r0[0] = $r1;

        $r2 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption SERVERKEYS>;

        $r0[1] = $r2;

        r3 = $r0;

        i0 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r4 = r3[i2];

        r6 = virtualinvoke r5.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Pair comparePreferredKexProposalOption(org.apache.sshd.common.kex.KexProposalOption)>(r4);

        if r6 == null goto label4;

        $r7 = r5.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r9 = r5.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r8 = newarray (java.lang.Object)[5];

        $r8[0] = r5;

        $r10 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i1);

        $r8[1] = $r10;

        $r8[2] = r4;

        $r11 = virtualinvoke r6.<org.apache.sshd.common.util.Pair: java.lang.Object getFirst()>();

        $r8[3] = $r11;

        $r12 = virtualinvoke r6.<org.apache.sshd.common.util.Pair: java.lang.Object getSecond()>();

        $r8[4] = $r12;

        varReplacer3592 = "handleKexMessage({})[{}] 1st follow KEX packet {} option mismatch: client={}, server={}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3592, $r8);

     label3:
        varReplacer3595 = 0;

        return varReplacer3595;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        varReplacer3593 = 1;

        return varReplacer3593;
    }

    protected org.apache.sshd.common.util.Pair comparePreferredKexProposalOption(org.apache.sshd.common.kex.KexProposalOption)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KexProposalOption r1;
        java.util.Map $r2, $r7;
        java.lang.Object $r3, $r8;
        java.lang.String $r4, r6, $r9, r11;
        java.lang.String[] r5, r10;
        boolean $z0;
        org.apache.sshd.common.util.Pair $r12;
        int varReplacer3596, varReplacer3597;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.kex.KexProposalOption;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map clientProposal>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        varReplacer3597 = 44;

        r5 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>($r4, varReplacer3597);

        r6 = r5[0];

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map serverProposal>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r9 = (java.lang.String) $r8;

        varReplacer3596 = 44;

        r10 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>($r9, varReplacer3596);

        r11 = r10[0];

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 == 0 goto label1;

        $r12 = null;

        goto label2;

     label1:
        $r12 = new org.apache.sshd.common.util.Pair;

        specialinvoke $r12.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r6, r11);

     label2:
        return $r12;
    }

    protected void handleKexMessage(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0;
        org.apache.sshd.common.kex.KexState $r1, $r11;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.kex.KeyExchange $r3, $r6, $r14;
        boolean $z0, $z1, $z2;
        org.slf4j.Logger $r4, $r7, $r10, $r15;
        java.lang.Object[] $r5, $r13;
        java.lang.String $r8, $r16, varReplacer3598, varReplacer3599;
        java.lang.Integer $r9, $r17;
        java.util.concurrent.atomic.AtomicReference $r12;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r2 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r1);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $z0 = interfaceinvoke $r3.<org.apache.sshd.common.kex.KeyExchange: boolean next(int,org.apache.sshd.common.util.buffer.Buffer)>(i0, r2);

        if $z0 == 0 goto label2;

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label1;

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r0;

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r16 = interfaceinvoke $r14.<org.apache.sshd.common.kex.KeyExchange: java.lang.String getName()>();

        $r13[1] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[2] = $r17;

        varReplacer3598 = "handleKexMessage({})[{}] KEX processing complete after cmd={}";

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3598, $r13);

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkKeys()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendNewKeys()>();

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r11 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r11);

        goto label3;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r0;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r8 = interfaceinvoke $r6.<org.apache.sshd.common.kex.KeyExchange: java.lang.String getName()>();

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[2] = $r9;

        varReplacer3599 = "handleKexMessage({})[{}] more KEX packets expected after cmd={}";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3599, $r5);

     label3:
        return;
    }

    protected void handleIgnore(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        byte[] $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: byte[] getBytes()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleIgnore(byte[],org.apache.sshd.common.util.buffer.Buffer)>($r2, r1);

        return;
    }

    protected void handleIgnore(byte[], org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r2, $r4, $r6;
        boolean $z0, $z1;
        byte[] r3;
        java.lang.String $r5, varReplacer3600, varReplacer3601;
        org.apache.sshd.common.util.buffer.Buffer r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: byte[];

        r7 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3601 = "handleIgnore({}) SSH_MSG_IGNORE";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3601, r0);

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(byte[])>(r3);

        varReplacer3600 = "handleIgnore({}) data: {}";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3600, r0, $r5);

     label2:
        return;
    }

    protected void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        int $i0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $i0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleUnimplemented(int,org.apache.sshd.common.util.buffer.Buffer)>($i0, r1);

        return;
    }

    protected void handleUnimplemented(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r2;
        boolean $z0;
        int i0;
        java.lang.Integer $r3;
        org.apache.sshd.common.util.buffer.Buffer r4;
        java.lang.String varReplacer3602;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        varReplacer3602 = "handleUnimplented({}) SSH_MSG_UNIMPLEMENTED #{}";

        interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3602, r0, $r3);

     label1:
        return;
    }

    protected void handleDebug(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        boolean $z0;
        java.lang.String $r2, $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $z0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: boolean getBoolean()>();

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleDebug(boolean,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($z0, $r2, $r3, r1);

        return;
    }

    protected void handleDebug(boolean, java.lang.String, java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r3;
        boolean $z0, z1;
        java.lang.Object[] $r2;
        java.lang.Boolean $r4;
        java.lang.String r5, r6, varReplacer3603;
        org.apache.sshd.common.util.buffer.Buffer r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        z1 := @parameter0: boolean;

        r6 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        r7 := @parameter3: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r2 = newarray (java.lang.Object)[4];

        $r2[0] = r0;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r2[1] = $r4;

        $r2[2] = r5;

        $r2[3] = r6;

        varReplacer3603 = "handleDebug({}) SSH_MSG_DEBUG (display={}) [lang={}] \'{}\'";

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3603, $r2);

     label1:
        return;
    }

    protected void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        int $i0;
        java.lang.String $r2, $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $i0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r3 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($i0, $r2, $r3, r1);

        return;
    }

    protected void handleDisconnect(int, java.lang.String, java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        java.lang.Object[] $r3;
        int i0, varReplacer3604;
        java.lang.String $r5, r6, r7, varReplacer3605;
        org.apache.sshd.common.util.buffer.Buffer r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        r8 := @parameter3: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r5 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r3[1] = $r5;

        $r3[2] = r6;

        $r3[3] = r7;

        varReplacer3605 = "handleDisconnect({}) SSH_MSG_DISCONNECT reason={}, [lang={}] msg={}";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3605, $r3);

     label1:
        varReplacer3604 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer3604);

        return;
    }

    protected void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($r2, r1);

        return;
    }

    protected void handleServiceRequest(java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r4, $r8, $r9, $r11, $r12, $r18, $r26;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.kex.KexState $r2;
        java.lang.String r3, $r16, $r24, $r28, $r29, varReplacer3607, varReplacer3609, varReplacer3610, varReplacer3611, varReplacer3612, varReplacer3613, varReplacer3614;
        org.apache.sshd.common.util.buffer.Buffer r5, $r6, r31;
        java.lang.Exception $r10, r30;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r19, $r20, $r21, $r22, $r23;
        java.lang.Object[] $r25;
        java.lang.Class $r27;
        int varReplacer3606, varReplacer3608, varReplacer3615;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3607 = "handleServiceRequest({}) SSH_MSG_SERVICE_REQUEST \'{}\'";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3607, r0, r3);

     label1:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer3608 = 5;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer3608, $r2);

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void startService(java.lang.String)>(r3);

     label3:
        goto label7;

     label4:
        $r10 := @caughtexception;

        r30 = $r10;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label5;

        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r25 = newarray (java.lang.Object)[4];

        $r25[0] = r0;

        $r25[1] = r3;

        $r27 = virtualinvoke r30.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getSimpleName()>();

        $r25[2] = $r28;

        $r29 = virtualinvoke r30.<java.lang.Exception: java.lang.String getMessage()>();

        $r25[3] = $r29;

        varReplacer3614 = "handleServiceRequest({}) Service {} rejected: {} = {}";

        interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3614, $r25);

     label5:
        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r12.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label6;

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer3609 = "handleServiceRequest(";

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3609);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer3610 = ") service=";

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3610);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        varReplacer3612 = " rejection details";

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3612);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r24, r30);

     label6:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        varReplacer3613 = "Bad service request: ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3613);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3615 = 7;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer3615, $r16);

        return;

     label7:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label8;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3611 = "handleServiceRequest({}) Accepted service {}";

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3611, r0, r3);

     label8:
        $r6 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: org.apache.sshd.common.util.buffer.Buffer clear(org.apache.sshd.common.util.buffer.Buffer)>(r5);

        varReplacer3606 = 6;

        r31 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)>(varReplacer3606, $r6);

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r3);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r31);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)>($r2, r1);

        return;
    }

    protected void handleServiceAccept(java.lang.String, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        org.apache.sshd.common.kex.KexState $r2;
        java.lang.String r3, varReplacer3616;
        org.apache.sshd.common.util.buffer.Buffer r5;
        int varReplacer3617;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: java.lang.String;

        r5 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3616 = "handleServiceAccept({}) SSH_MSG_SERVICE_ACCEPT service={}";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3616, r0, r3);

     label1:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        varReplacer3617 = 6;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(varReplacer3617, $r2);

        return;
    }

    protected void handleKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r29;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.util.buffer.Buffer r2;
        org.apache.sshd.common.kex.KexState $r3, $r4, $r6, $r7;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        java.util.Map r9;
        org.apache.sshd.common.kex.KexProposalOption $r10;
        java.lang.Object $r11, $r14, $r15;
        java.lang.String r12, $r18, $r22, varReplacer3618, varReplacer3619, varReplacer3620;
        java.util.List $r13;
        org.apache.sshd.common.kex.KeyExchange $r16, $r19;
        java.nio.charset.Charset $r17, $r21;
        byte[] $r20, $r23, $r24, $r25;
        org.apache.sshd.common.session.SessionListener$Event $r26;
        java.lang.IllegalStateException $r27;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r29 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3618 = "handleKexInit({}) SSH_MSG_KEXINIT";

        interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3618, r0);

     label1:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r3 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit()>();

        goto label3;

     label2:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r7 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $r6 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState RUN>;

        $z2 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z2 != 0 goto label3;

        $r27 = new java.lang.IllegalStateException;

        varReplacer3619 = "Received SSH_MSG_KEXINIT while key exchange is running";

        specialinvoke $r27.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer3619);

        throw $r27;

     label3:
        r9 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiate()>();

        $r10 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r11 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getKeyExchangeFactories()>();

        $r14 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r13, r12);

        varReplacer3620 = "Unknown negotiated KEX algorithm: %s";

        $r15 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r14, varReplacer3620, r12);

        $r16 = (org.apache.sshd.common.kex.KeyExchange) $r15;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex> = $r16;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String serverVersion>;

        $r17 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r20 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String clientVersion>;

        $r21 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r23 = virtualinvoke $r22.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r21);

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] i_s>;

        $r24 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] i_c>;

        interfaceinvoke $r19.<org.apache.sshd.common.kex.KeyExchange: void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])>(r0, $r20, $r23, $r25, $r24);

        $r26 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KexCompleted>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r26);

        return;
    }

    protected void handleNewKeys(int, org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r13, $r18, $r21;
        boolean $z0, $z1, $z2;
        int i0;
        org.apache.sshd.common.kex.KexState $r2, $r9;
        java.util.concurrent.atomic.AtomicReference $r3, $r10;
        java.lang.Object $r4, $r11, $r12, $r14, r32, r35, $r37, r40;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r5, r31;
        org.apache.sshd.common.session.SessionListener$Event $r6;
        java.util.Queue $r7, $r8, r34, $r36;
        org.apache.sshd.common.util.buffer.Buffer $r15, r30;
        org.apache.sshd.common.io.IoWriteFuture $r16;
        java.lang.Boolean $r20;
        java.lang.String $r22, varReplacer3621, varReplacer3622;
        java.lang.Throwable $r23, r24, $r25, r26, $r27, r28, $r29, r33;
        org.apache.sshd.common.session.PendingWriteFuture $r38, r39;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r30 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label01;

        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r22 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        varReplacer3622 = "handleNewKeys({}) SSH_MSG_NEWKEYS command={}";

        interfaceinvoke $r21.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3622, r0, $r22);

     label01:
        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState KEYS>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void validateKexState(int,org.apache.sshd.common.kex.KexState)>(i0, $r2);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void receiveNewKeys()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r4;

        if r5 == null goto label07;

        r31 = r5;

        entermonitor r5;

     label02:
        r32 = virtualinvoke r5.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r32 != null goto label03;

        $r20 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r5.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r20);

     label03:
        exitmonitor r31;

     label04:
        goto label07;

     label05:
        $r29 := @caughtexception;

        r33 = $r29;

        exitmonitor r31;

     label06:
        throw r33;

     label07:
        $r6 = <org.apache.sshd.common.session.SessionListener$Event: org.apache.sshd.common.session.SessionListener$Event KeyEstablished>;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event)>($r6);

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r34 = $r7;

        entermonitor $r7;

     label08:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z1 = interfaceinvoke $r8.<java.util.Queue: boolean isEmpty()>();

        if $z1 != 0 goto label15;

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label09;

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3621 = "handleNewKeys({}) Dequeing pending packets";

        interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3621, r0);

     label09:
        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r35 = $r14;

        entermonitor $r14;

     label10:
        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $r37 = interfaceinvoke $r36.<java.util.Queue: java.lang.Object poll()>();

        $r38 = (org.apache.sshd.common.session.PendingWriteFuture) $r37;

        r39 = $r38;

        if $r38 == null goto label11;

        $r15 = virtualinvoke r39.<org.apache.sshd.common.session.PendingWriteFuture: org.apache.sshd.common.util.buffer.Buffer getBuffer()>();

        $r16 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>($r15);

        interfaceinvoke $r16.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>(r39);

        goto label10;

     label11:
        exitmonitor r35;

     label12:
        goto label15;

     label13:
        $r27 := @caughtexception;

        r28 = $r27;

        exitmonitor r35;

     label14:
        throw r28;

     label15:
        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r9 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r9);

        exitmonitor r34;

     label16:
        goto label19;

     label17:
        $r25 := @caughtexception;

        r26 = $r25;

        exitmonitor r34;

     label18:
        throw r26;

     label19:
        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r40 = $r11;

        entermonitor $r11;

     label20:
        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        virtualinvoke $r12.<java.lang.Object: void notifyAll()>();

        exitmonitor r40;

     label21:
        goto label24;

     label22:
        $r23 := @caughtexception;

        r24 = $r23;

        exitmonitor r40;

     label23:
        throw r24;

     label24:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label08 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    protected void validateKexState(int, org.apache.sshd.common.kex.KexState)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.kex.KexState r3, r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11, $r12, $r13;
        int i0;
        java.lang.String $r8, $r14, varReplacer3623, varReplacer3624, varReplacer3625;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: org.apache.sshd.common.kex.KexState;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.kex.KexState) $r2;

        $z0 = virtualinvoke r4.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        varReplacer3623 = "Received KEX command=";

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3623);

        $r8 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        varReplacer3625 = " while in state=";

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3625);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer3624 = " instead of ";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3624);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label1:
        return;
    }

    public void exceptionCaught(java.lang.Throwable)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.util.closeable.AbstractCloseable$State r3, $r4, $r12, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Object[] $r5, $r35, $r53;
        java.lang.Throwable r6, $r40, r41;
        org.slf4j.Logger $r7, $r11, $r17, $r25, $r26, $r28, $r36, $r42, $r43, $r45, $r54;
        java.lang.Class $r8, $r37, $r55;
        java.lang.String $r9, $r10, $r15, $r23, $r34, $r38, $r39, $r49, $r52, $r56, $r57, $r58, varReplacer3626, varReplacer3628, varReplacer3629, varReplacer3630, varReplacer3631, varReplacer3632, varReplacer3633, varReplacer3634, varReplacer3635, varReplacer3636, varReplacer3637, varReplacer3638;
        org.apache.sshd.common.SshException $r14;
        int i0, varReplacer3627;
        java.lang.StringBuilder $r16, $r18, $r19, $r20, $r21, $r22, $r27, $r29, $r30, $r31, $r32, $r33, $r44, $r46, $r47, $r48, $r50, $r51;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r6 := @parameter0: java.lang.Throwable;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference state>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.util.closeable.AbstractCloseable$State) $r2;

        $r4 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Opened>;

        $z0 = virtualinvoke $r4.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label03;

        $r24 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Graceful>;

        $z4 = virtualinvoke $r24.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z4 != 0 goto label03;

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z5 = interfaceinvoke $r25.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z5 == 0 goto label01;

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r35 = newarray (java.lang.Object)[4];

        $r35[0] = r0;

        $r37 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getSimpleName()>();

        $r35[1] = $r38;

        $r35[2] = r3;

        $r39 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r35[3] = $r39;

        varReplacer3630 = "exceptionCaught({}) ignore {} due to state={}, message=\'{}\'";

        interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3630, $r35);

     label01:
        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z6 = interfaceinvoke $r26.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z6 == 0 goto label02;

        $r28 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        varReplacer3631 = "exceptionCaught(";

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3631);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer3632 = ")[state=";

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3632);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer3633 = "] ignored exception details";

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3633);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r28.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r34, r6);

     label02:
        return;

     label03:
        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r0;

        $r5[1] = r3;

        $r8 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5[2] = $r9;

        $r10 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5[3] = $r10;

        varReplacer3635 = "exceptionCaught({})[state={}] {}: {}";

        interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer3635, $r5);

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r11.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label04;

        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        varReplacer3638 = "exceptionCaught(";

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3638);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer3628 = ")[state=";

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3628);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        varReplacer3634 = "] details";

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3634);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r23, r6);

     label04:
        $r12 = <org.apache.sshd.common.util.closeable.AbstractCloseable$State: org.apache.sshd.common.util.closeable.AbstractCloseable$State Opened>;

        $z2 = virtualinvoke $r12.<org.apache.sshd.common.util.closeable.AbstractCloseable$State: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label10;

        $z3 = r6 instanceof org.apache.sshd.common.SshException;

        if $z3 == 0 goto label10;

        $r14 = (org.apache.sshd.common.SshException) r6;

        i0 = virtualinvoke $r14.<org.apache.sshd.common.SshException: int getDisconnectCode()>();

        if i0 <= 0 goto label10;

     label05:
        $r15 = virtualinvoke r6.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(i0, $r15);

     label06:
        goto label09;

     label07:
        $r40 := @caughtexception;

        r41 = $r40;

        $r42 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z7 = interfaceinvoke $r42.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z7 == 0 goto label08;

        $r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r53 = newarray (java.lang.Object)[4];

        $r53[0] = r0;

        $r55 = virtualinvoke r41.<java.lang.Object: java.lang.Class getClass()>();

        $r56 = virtualinvoke $r55.<java.lang.Class: java.lang.String getSimpleName()>();

        $r53[1] = $r56;

        $r57 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r53[2] = $r57;

        $r58 = virtualinvoke r41.<java.lang.Throwable: java.lang.String getMessage()>();

        $r53[3] = $r58;

        varReplacer3637 = "exceptionCaught({}) {} while disconnect with code={}: {}";

        interfaceinvoke $r54.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3637, $r53);

     label08:
        $r43 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z8 = interfaceinvoke $r43.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z8 == 0 goto label09;

        $r45 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        varReplacer3636 = "exceptionCaught(";

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3636);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer3626 = ")[code=";

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3626);

        $r49 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        varReplacer3629 = "] disconnect exception details";

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3629);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r45.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Throwable)>($r52, r41);

     label09:
        return;

     label10:
        varReplacer3627 = 1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.future.CloseFuture close(boolean)>(varReplacer3627);

        return;

        catch java.lang.Throwable from label05 to label06 with label07;
    }

    protected org.apache.sshd.common.Closeable getInnerCloseable()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.closeable.Builder $r1, $r3, $r5;
        java.util.List $r2;
        org.apache.sshd.common.io.IoSession $r4;
        org.apache.sshd.common.Closeable $r6;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.closeable.Builder builder()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getServices()>();

        $r3 = virtualinvoke $r1.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.util.closeable.Builder parallel(java.lang.Iterable)>($r2);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r5 = virtualinvoke $r3.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.util.closeable.Builder close(org.apache.sshd.common.Closeable)>($r4);

        $r6 = virtualinvoke $r5.<org.apache.sshd.common.util.closeable.Builder: org.apache.sshd.common.Closeable build()>();

        return $r6;
    }

    protected void preClose()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r4, $r6, $r7, r37;
        java.lang.Object $r2, $r5, r35;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture r3, r34;
        java.util.Collection $r8, $r9, $r14, $r15, $r23, $r24;
        org.apache.sshd.common.SshException $r11;
        java.lang.Throwable $r12, r13, $r31, r32, $r33, r36, r40;
        java.lang.RuntimeException $r16, r39;
        java.lang.Object[] $r17;
        org.slf4j.Logger $r18, $r22, $r26;
        java.lang.Class $r19;
        java.lang.String $r20, $r21, $r30, varReplacer3639, varReplacer3640, varReplacer3641, varReplacer3642;
        boolean $z0;
        java.lang.StringBuilder $r25, $r27, $r28, $r29;
        org.apache.sshd.common.session.SessionListener r38;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r2;

        if r3 == null goto label06;

        r34 = r3;

        entermonitor r3;

     label01:
        r35 = virtualinvoke r3.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r35 != null goto label02;

        $r11 = new org.apache.sshd.common.SshException;

        varReplacer3639 = "Session closing while KEX in progress";

        specialinvoke $r11.<org.apache.sshd.common.SshException: void <init>(java.lang.String)>(varReplacer3639);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r11);

     label02:
        exitmonitor r34;

     label03:
        goto label06;

     label04:
        $r33 := @caughtexception;

        r36 = $r33;

        exitmonitor r34;

     label05:
        throw r36;

     label06:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r37 = $r4;

        entermonitor $r4;

     label07:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r5 = <org.apache.sshd.common.util.GenericUtils: java.lang.Object NULL>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r37;

     label08:
        goto label11;

     label09:
        $r31 := @caughtexception;

        r32 = $r31;

        exitmonitor r37;

     label10:
        throw r32;

     label11:
        r38 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

     label12:
        interfaceinvoke r38.<org.apache.sshd.common.session.SessionListener: void sessionClosed(org.apache.sshd.common.session.Session)>(r0);

     label13:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r8.<java.util.Collection: void clear()>();

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r9.<java.util.Collection: void clear()>();

        goto label18;

     label14:
        $r16 := @caughtexception;

        r39 = $r16;

        r40 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.Throwable peelException(java.lang.Throwable)>(r39);

        $r18 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r17 = newarray (java.lang.Object)[3];

        $r17[0] = r0;

        $r19 = virtualinvoke r40.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getSimpleName()>();

        $r17[1] = $r20;

        $r21 = virtualinvoke r40.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17[2] = $r21;

        varReplacer3640 = "preClose({}) {} while signal session closed: {}";

        interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(varReplacer3640, $r17);

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r22.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label15;

        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        varReplacer3642 = "preClose(";

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3642);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        varReplacer3641 = ") signal session closed exception details";

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3641);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>($r30, r40);

     label15:
        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r23.<java.util.Collection: void clear()>();

        $r24 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r24.<java.util.Collection: void clear()>();

        goto label18;

     label16:
        $r12 := @caughtexception;

        r13 = $r12;

     label17:
        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        interfaceinvoke $r14.<java.util.Collection: void clear()>();

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        interfaceinvoke $r15.<java.util.Collection: void clear()>();

        throw r13;

     label18:
        specialinvoke r0.<org.apache.sshd.common.kex.AbstractKexFactoryManager: void preClose()>();

        return;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.RuntimeException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    protected java.util.List getServices()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.Service $r1, $r2;
        java.util.List $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.Service currentService>;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label2:
        return $r3;
    }

    public org.apache.sshd.common.Service getService(java.lang.Class)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class r6;
        java.lang.String $r7, $r9, varReplacer3643;
        java.lang.Object $r10, $r12;
        org.apache.sshd.common.Service r11, $r13;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r6 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getServices()>();

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.sshd.common.Service) $r10;

        $z1 = virtualinvoke r6.<java.lang.Class: boolean isInstance(java.lang.Object)>(r11);

        if $z1 == 0 goto label2;

        $r12 = virtualinvoke r6.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r11);

        $r13 = (org.apache.sshd.common.Service) $r12;

        return $r13;

     label2:
        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        varReplacer3643 = "Attempted to access unknown service ";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3643);

        $r7 = virtualinvoke r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r8;
        org.apache.sshd.common.kex.KexState $r2, $r9;
        java.lang.Object $r3, $r10;
        boolean $z0, $z1, $z2;
        org.apache.sshd.common.util.buffer.Buffer r4;
        byte[] $r5;
        int $i0, $i1;
        java.util.Queue $r6, r7, $r11, $r14;
        org.apache.sshd.common.session.PendingWriteFuture $r12, r13;
        org.slf4j.Logger $r15;
        java.lang.String $r16, varReplacer3644;
        java.lang.Throwable $r18, r19, $r20, r21;
        byte b2;
        org.apache.sshd.common.io.IoWriteFuture r22;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z0 = virtualinvoke $r2.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label08;

        $r5 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        b2 = $r5[$i0];

        if b2 <= 49 goto label08;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        r7 = $r6;

        entermonitor $r6;

     label01:
        $r9 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r10 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z1 = virtualinvoke $r9.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label04;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        $z2 = interfaceinvoke $r11.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label02;

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $i1 = b2 & 255;

        $r16 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getCommandMessageName(int)>($i1);

        varReplacer3644 = "writePacket({})[{}] Start flagging packets as pending until key exchange is done";

        interfaceinvoke $r15.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3644, r0, $r16);

     label02:
        $r12 = new org.apache.sshd.common.session.PendingWriteFuture;

        specialinvoke $r12.<org.apache.sshd.common.session.PendingWriteFuture: void <init>(org.apache.sshd.common.util.buffer.Buffer)>(r4);

        r13 = $r12;

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Queue pendingPackets>;

        interfaceinvoke $r14.<java.util.Queue: boolean add(java.lang.Object)>(r13);

        exitmonitor r7;

     label03:
        return r13;

     label04:
        exitmonitor r7;

     label05:
        goto label08;

     label06:
        $r20 := @caughtexception;

        r21 = $r20;

        exitmonitor r7;

     label07:
        throw r21;

     label08:
        r22 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)>(r4);

     label09:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        return r22;

     label10:
        $r18 := @caughtexception;

        r19 = $r18;

     label11:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void checkRekey()>();

        throw r19;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        org.apache.sshd.common.io.IoWriteFuture r2;
        org.apache.sshd.common.future.DefaultSshFuture r3;
        org.apache.sshd.common.FactoryManager $r4;
        java.util.concurrent.ScheduledExecutorService r5;
        org.apache.sshd.common.session.AbstractSession$1 $r6;
        long l0;
        java.util.concurrent.TimeUnit r7;
        java.util.concurrent.ScheduledFuture r8;
        org.apache.sshd.common.session.AbstractSession$2 $r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        l0 := @parameter1: long;

        r7 := @parameter2: java.util.concurrent.TimeUnit;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        r3 = (org.apache.sshd.common.future.DefaultSshFuture) r2;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager factoryManager>;

        r5 = interfaceinvoke $r4.<org.apache.sshd.common.FactoryManager: java.util.concurrent.ScheduledExecutorService getScheduledExecutorService()>();

        $r6 = new org.apache.sshd.common.session.AbstractSession$1;

        specialinvoke $r6.<org.apache.sshd.common.session.AbstractSession$1: void <init>(org.apache.sshd.common.session.AbstractSession,long,java.util.concurrent.TimeUnit,org.apache.sshd.common.future.DefaultSshFuture)>(r0, l0, r7, r3);

        r8 = interfaceinvoke r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r6, l0, r7);

        $r9 = new org.apache.sshd.common.session.AbstractSession$2;

        specialinvoke $r9.<org.apache.sshd.common.session.AbstractSession$2: void <init>(org.apache.sshd.common.session.AbstractSession,java.util.concurrent.ScheduledFuture)>(r0, r8);

        virtualinvoke r3.<org.apache.sshd.common.future.DefaultSshFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r9);

        return r2;
    }

    protected org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0, $i1, $i3, i4, varReplacer3645;
        org.apache.sshd.common.util.buffer.Buffer r1, r16;
        org.apache.sshd.common.io.IoSession $r2, $r4;
        org.apache.sshd.common.io.IoWriteFuture $r3;
        long $l2;
        java.lang.Object $r6, r7, $r17, r18;
        org.apache.sshd.common.random.Random $r8;
        byte[] $r9;
        org.slf4j.Logger $r10, $r11;
        boolean $z0;
        java.lang.Throwable $r12, r13, $r14, r15;
        java.lang.String varReplacer3646;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r16 = null;

        i0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: int resolveIgnoreBufferDataLength()>();

        if i0 <= 0 goto label06;

        $i1 = i0 + 8;

        varReplacer3645 = 2;

        r16 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer3645, $i1);

        $l2 = (long) i0;

        virtualinvoke r16.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l2);

        i4 = virtualinvoke r16.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r7 = $r6;

        entermonitor $r6;

     label01:
        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r9 = virtualinvoke r16.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r8.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r9, i4, i0);

        exitmonitor r7;

     label02:
        goto label05;

     label03:
        $r14 := @caughtexception;

        r15 = $r14;

        exitmonitor r7;

     label04:
        throw r15;

     label05:
        $i3 = i4 + i0;

        virtualinvoke r16.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i3);

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label06;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3646 = "doWritePacket({}) append SSH_MSG_IGNORE message";

        interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3646, r0);

     label06:
        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object encodeLock>;

        r18 = $r17;

        entermonitor $r17;

     label07:
        if r16 == null goto label08;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void encode(org.apache.sshd.common.util.buffer.Buffer)>(r16);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        interfaceinvoke $r4.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>(r16);

     label08:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void encode(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r3 = interfaceinvoke $r2.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        exitmonitor r18;

     label09:
        return $r3;

     label10:
        $r12 := @caughtexception;

        r13 = $r12;

        exitmonitor r18;

     label11:
        throw r13;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected int resolveIgnoreBufferDataLength()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int $i0, $i3, $i6, $i9, $i10, $i11, $i12, varReplacer3647, varReplacer3648;
        long $l1, l4, $l7, $l8;
        byte $b2, $b5;
        java.util.concurrent.atomic.AtomicLong $r1, $r5;
        java.lang.Object $r2, r3;
        org.apache.sshd.common.random.Random $r4, $r6;
        java.lang.Throwable $r7, r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $i0 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketDataLength>;

        if $i0 <= 0 goto label1;

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label1;

        $i3 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance>;

        if $i3 >= 0 goto label2;

     label1:
        varReplacer3647 = 0;

        return varReplacer3647;

     label2:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        l4 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();

        $b5 = l4 cmp 0L;

        if $b5 <= 0 goto label3;

        varReplacer3648 = 0;

        return varReplacer3648;

     label3:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        r3 = $r2;

        entermonitor $r2;

     label4:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong ignorePacketsCount>;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $l7 = r0.<org.apache.sshd.common.session.AbstractSession: long ignorePacketsFrequency>;

        $i6 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketsVariance>;

        $l8 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)>($r4, $l7, $i6);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l8);

        $i10 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketDataLength>;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $i9 = r0.<org.apache.sshd.common.session.AbstractSession: int ignorePacketDataLength>;

        $i11 = interfaceinvoke $r6.<org.apache.sshd.common.random.Random: int random(int)>($i9);

        $i12 = $i10 + $i11;

        exitmonitor r3;

     label5:
        return $i12;

     label6:
        $r7 := @caughtexception;

        r8 = $r7;

        exitmonitor r3;

     label7:
        throw r8;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random, long, int)
    {
        long l0, $l4, l5, $l6, $l8, varReplacer3650;
        byte $b1;
        int i2, i3, $i7;
        org.apache.sshd.common.random.Random r0;
        org.apache.sshd.common.session.AbstractSession r1;
        org.slf4j.Logger $r2, $r3;
        boolean $z0;
        java.lang.Long $r4;
        java.lang.String varReplacer3649;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.random.Random;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        if i2 >= 0 goto label2;

     label1:
        varReplacer3650 = -1L;

        return varReplacer3650;

     label2:
        if i2 != 0 goto label3;

        return l0;

     label3:
        if i2 >= 0 goto label4;

        $i7 = 0 - i2;

        goto label5;

     label4:
        $i7 = i2;

     label5:
        i3 = interfaceinvoke r0.<org.apache.sshd.common.random.Random: int random(int)>($i7);

        if i2 >= 0 goto label6;

        $l6 = (long) i3;

        $l8 = l0 - $l6;

        goto label7;

     label6:
        $l4 = (long) i3;

        $l8 = l0 + $l4;

     label7:
        l5 = $l8;

        $r2 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label8;

        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        varReplacer3649 = "calculateNextIgnorePacketCount({}) count={}";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3649, r1, $r4);

     label8:
        return l5;
    }

    public org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer, long, java.util.concurrent.TimeUnit) throws java.io.IOException
    {
        long l0, l4, l5, l6, l7, l9;
        byte $b1, $b2, $b3, $b8;
        java.util.concurrent.TimeUnit r0, $r1, $r21;
        org.apache.sshd.common.session.AbstractSession r2;
        java.lang.Object $r3, r4, r8, $r19;
        org.apache.sshd.common.util.buffer.Buffer r5, $r9;
        java.util.concurrent.atomic.AtomicReference $r7, $r18, $r20, r37, $r38;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketTimeoutException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r23, $r24, $r25, $r26, $r27;
        java.lang.String $r16, $r28, varReplacer3651, varReplacer3652, varReplacer3654, varReplacer3655, varReplacer3656, varReplacer3657, varReplacer3659;
        java.io.IOException $r17;
        java.lang.IllegalArgumentException $r22;
        java.lang.Throwable $r29, r30, $r31, $r33, $r35, r36, r39;
        java.io.InterruptedIOException $r32, $r34;
        null_type varReplacer3653, varReplacer3658;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r5 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        l0 := @parameter1: long;

        r0 := @parameter2: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        varReplacer3655 = "Non-positive timeout requested: %d";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: void checkTrue(boolean,java.lang.String,long)>($z3, varReplacer3655, l0);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l9 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l0, r0);

        $b2 = l9 cmp 0L;

        if $b2 > 0 goto label03;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        varReplacer3651 = "Requested timeout below 1 msec: ";

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3651);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        varReplacer3659 = " ";

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3659);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r22;

     label03:
        $r3 = r2.<org.apache.sshd.common.session.AbstractSession: java.lang.Object requestLock>;

        r4 = $r3;

        entermonitor $r3;

     label04:
        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r5);

        $r7 = r2.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r37 = $r7;

        entermonitor $r7;

     label05:
        $z0 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: boolean isOpen()>();

        if $z0 == 0 goto label08;

        $b3 = l9 cmp 0L;

        if $b3 <= 0 goto label08;

        $r18 = r2.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r19 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r19 != null goto label08;

        l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $r20 = r2.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r20.<java.lang.Object: void wait(long)>(l9);

        l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l6 = l5 - l4;

        $r21 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l7 = virtualinvoke $r21.<java.util.concurrent.TimeUnit: long toMillis(long)>(l6);

        $b8 = l7 cmp 0L;

        if $b8 <= 0 goto label06;

        l9 = l9 - l7;

        goto label07;

     label06:
        l9 = l9 - 1L;

     label07:
        goto label05;

     label08:
        $r38 = r2.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        varReplacer3658 = null;

        r8 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(varReplacer3658);

        exitmonitor r37;

     label09:
        goto label12;

     label10:
        $r35 := @caughtexception;

        r36 = $r35;

        exitmonitor r37;

     label11:
        throw r36;

     label12:
        goto label14;

     label13:
        $r31 := @caughtexception;

        r39 = $r31;

        $r32 = new java.io.InterruptedIOException;

        varReplacer3656 = "Interrupted while waiting for request result";

        specialinvoke $r32.<java.io.InterruptedIOException: void <init>(java.lang.String)>(varReplacer3656);

        $r33 = virtualinvoke $r32.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(r39);

        $r34 = (java.io.InterruptedIOException) $r33;

        throw $r34;

     label14:
        exitmonitor r4;

     label15:
        goto label18;

     label16:
        $r29 := @caughtexception;

        r30 = $r29;

        exitmonitor r4;

     label17:
        throw r30;

     label18:
        $z1 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: boolean isOpen()>();

        if $z1 != 0 goto label19;

        $r17 = new java.io.IOException;

        varReplacer3657 = "Session is closed or closing";

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>(varReplacer3657);

        throw $r17;

     label19:
        if r8 != null goto label20;

        $r10 = new java.net.SocketTimeoutException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        varReplacer3652 = "No response received after ";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3652);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        varReplacer3654 = " ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3654);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.net.SocketTimeoutException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label20:
        $z2 = r8 instanceof org.apache.sshd.common.util.buffer.Buffer;

        if $z2 == 0 goto label21;

        $r9 = (org.apache.sshd.common.util.buffer.Buffer) r8;

        return $r9;

     label21:
        varReplacer3653 = null;

        return varReplacer3653;

        catch java.lang.Throwable from label05 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.InterruptedException from label04 to label12 with label13;
        catch java.lang.Throwable from label04 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        byte b0;
        org.apache.sshd.common.util.buffer.Buffer $r1;
        int varReplacer3660;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b0 := @parameter0: byte;

        varReplacer3660 = 0;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(b0, varReplacer3660);

        return $r1;
    }

    public org.apache.sshd.common.util.buffer.Buffer createBuffer(byte, int)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int i0, $i1, $i2, $i3, $i5, $i6, i7, i8, i9, i10, varReplacer3661;
        org.apache.sshd.common.mac.Mac $r1, $r5;
        byte b4;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r2, $r6;
        byte[] $r3;
        org.apache.sshd.common.util.buffer.Buffer $r4, $r7;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        b4 := @parameter0: byte;

        i7 := @parameter1: int;

        if i7 > 0 goto label1;

        $r6 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r6.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        $r7 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)>(b4, $r6);

        return $r7;

     label1:
        i0 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i8 = i7 + 5;

        $i2 = neg i8;

        $i1 = i0 - 1;

        i9 = $i2 & $i1;

        if i9 >= i0 goto label2;

        i9 = i9 + i0;

     label2:
        $i3 = i8 + i9;

        i10 = $i3 - 4;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r1 == null goto label3;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $i6 = interfaceinvoke $r5.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i10 = i10 + $i6;

     label3:
        $r2 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $i5 = i10 + 8;

        $r3 = newarray (byte)[$i5];

        varReplacer3661 = 0;

        specialinvoke $r2.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[],boolean)>($r3, varReplacer3661);

        $r4 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)>(b4, $r2);

        return $r4;
    }

    public org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte, org.apache.sshd.common.util.buffer.Buffer)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        byte b0;
        org.apache.sshd.common.session.AbstractSession r2;
        int varReplacer3662, varReplacer3663;
        java.lang.String varReplacer3664;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        b0 := @parameter0: byte;

        r0 := @parameter1: org.apache.sshd.common.util.buffer.Buffer;

        varReplacer3664 = "No buffer to prepare";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, varReplacer3664);

        varReplacer3663 = 5;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(varReplacer3663);

        varReplacer3662 = 5;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer3662);

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(b0);

        return r0;
    }

    protected void encode(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        int $i0, $i1, i2, i3, i4, $i5, $i8, $i9, $i10, $i11, $i12, $i19, $i20, $i21, $i22, i25, $i26, $i29, $i30, i31, i32, $i33, $i34, i35, i36, i37, i38, varReplacer3665, varReplacer3667, varReplacer3668;
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r23, $r26;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.compression.Compression $r2, $r19, $r20, $r21;
        long $l6, $l13, $l14, $l15, $l17, $l23, $l27, $l28;
        byte $b7;
        org.apache.sshd.common.random.Random $r3;
        byte[] $r4, $r10, $r16, $r18;
        org.apache.sshd.common.mac.Mac $r5, $r13, $r14, $r15, $r17;
        org.apache.sshd.common.cipher.Cipher $r6, $r9, $r11;
        java.util.concurrent.atomic.AtomicLong $r7, $r8, $r12;
        java.lang.Object[] $r22;
        java.lang.Long $r24;
        java.lang.String $r25, varReplacer3666, varReplacer3669;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r27, r32;
        java.lang.Exception $r28, r34;
        org.apache.sshd.common.SshException $r29;
        java.lang.Throwable $r30, r33;
        org.apache.sshd.common.util.buffer.Buffer r31;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r31 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

     label01:
        $i0 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i0 >= 5 goto label02;

        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3666 = "Performance cost: when sending a packet, ensure that 5 bytes are available in front of the buffer";

        interfaceinvoke $r26.<org.slf4j.Logger: void warn(java.lang.String)>(varReplacer3666);

        $r27 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $i29 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i30 = $i29 + 64;

        varReplacer3665 = 0;

        specialinvoke $r27.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(int,boolean)>($i30, varReplacer3665);

        r32 = $r27;

        varReplacer3667 = 5;

        virtualinvoke r32.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(varReplacer3667);

        virtualinvoke r32.<org.apache.sshd.common.util.buffer.Buffer: void putBuffer(org.apache.sshd.common.util.Readable)>(r31);

        r31 = r32;

     label02:
        i31 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i1 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i2 = $i1 - 5;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label03;

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r0;

        $l28 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l28);

        $r22[1] = $r24;

        $r25 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        $r22[2] = $r25;

        varReplacer3669 = "encode({}) Sending packet #{}: {}";

        interfaceinvoke $r23.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer3669, $r22);

     label03:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        if $r2 == null goto label05;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $z1 = interfaceinvoke $r19.<org.apache.sshd.common.compression.Compression: boolean isCompressionExecuted()>();

        if $z1 == 0 goto label05;

        $z2 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z2 != 0 goto label04;

        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $z3 = interfaceinvoke $r21.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z3 != 0 goto label05;

     label04:
        $r20 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        interfaceinvoke $r20.<org.apache.sshd.common.compression.Compression: void compress(org.apache.sshd.common.util.buffer.Buffer)>(r31);

        i31 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

     label05:
        i3 = r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize>;

        i4 = i31;

        i32 = i31 + 5;

        $i33 = neg i32;

        $i34 = i3 - 1;

        i35 = $i33 & $i34;

        if i35 >= i3 goto label06;

        i35 = i35 + i3;

     label06:
        $i5 = i32 + i35;

        i36 = $i5 - 4;

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(i2);

        $l6 = (long) i36;

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l6);

        $b7 = (byte) i35;

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>($b7);

        $i8 = i2 + i4;

        $i9 = $i8 + 5;

        $i10 = $i9 + i35;

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i10);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r4 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i11 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i12 = $i11 - i35;

        interfaceinvoke $r3.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r4, $i12, i35);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        if $r5 == null goto label07;

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        i37 = interfaceinvoke $r13.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        i25 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i26 = i25 + i37;

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i26);

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $l27 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        interfaceinvoke $r14.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l27);

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r16 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r15.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>($r16, i2, i25);

        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac>;

        $r18 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        interfaceinvoke $r17.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r18, i25);

     label07:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        if $r6 == null goto label08;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $r10 = virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i19 = i36 + 4;

        interfaceinvoke $r9.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r10, i2, $i19);

        $i20 = i36 + 4;

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $i21 = interfaceinvoke $r11.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i38 = $i20 / $i21;

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        varReplacer3668 = 1;

        $i22 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer3668, i38);

        $l23 = (long) $i22;

        virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l23);

     label08:
        $l13 = r0.<org.apache.sshd.common.session.AbstractSession: long seqo>;

        $l14 = $l13 + 1L;

        $l15 = $l14 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqo> = $l15;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $l17 = (long) i36;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l17);

        virtualinvoke r31.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i2);

     label09:
        goto label12;

     label10:
        $r30 := @caughtexception;

        r33 = $r30;

        throw r33;

     label11:
        $r28 := @caughtexception;

        r34 = $r28;

        $r29 = new org.apache.sshd.common.SshException;

        specialinvoke $r29.<org.apache.sshd.common.SshException: void <init>(java.lang.Throwable)>(r34);

        throw $r29;

     label12:
        return;

        catch java.io.IOException from label01 to label09 with label10;
        catch java.lang.Exception from label01 to label09 with label11;
    }

    protected void decode() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        int $i0, $i1, $i2, $i3, i7, $i9, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i47, $i48, i49, $i50, i51, i52, i53, i54, $i55, $i56, $i57, varReplacer3670, varReplacer3671, varReplacer3672, varReplacer3673, varReplacer3674, varReplacer3675, varReplacer3676, varReplacer3677, varReplacer3680, varReplacer3683;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.sshd.common.mac.Mac $r1, $r6, $r29, $r30, $r32, $r38;
        org.apache.sshd.common.util.buffer.Buffer $r2, $r3, $r7, $r8, $r12, $r13, $r14, $r20, $r21, $r22, $r23, $r24, $r25, $r39, $r41, $r43, $r44, $r52, $r57, r59, $r60;
        byte[] r4, $r31, $r33, $r54;
        org.apache.sshd.common.cipher.Cipher $r5, $r35, $r36, $r42, $r53, $r55;
        long $l4, $l5, $l6, $l10, $l15, $l21, $l32, $l45;
        org.apache.sshd.common.compression.Compression $r9, $r19, $r26, $r28;
        java.util.concurrent.atomic.AtomicLong $r10, $r11, $r37, $r56;
        java.lang.Object[] $r15;
        org.slf4j.Logger $r16, $r45, $r61;
        java.lang.Long $r17;
        java.lang.String $r18, $r46, $r51, varReplacer3678, varReplacer3679, varReplacer3681, varReplacer3682;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r27;
        org.apache.sshd.common.SshException $r34, $r47;
        java.lang.AssertionError $r40, $r58;
        java.lang.StringBuilder $r48, $r49, $r50;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

     label01:
        $i48 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i48 != 0 goto label06;

        $z5 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z5 != 0 goto label02;

        $r57 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i47 = virtualinvoke $r57.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i47 == 0 goto label02;

        $r58 = new java.lang.AssertionError;

        specialinvoke $r58.<java.lang.AssertionError: void <init>()>();

        throw $r58;

     label02:
        $r41 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i35 = virtualinvoke $r41.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i36 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        if $i35 <= $i36 goto label18;

        $r42 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r42 == null goto label03;

        $r53 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r54 = virtualinvoke $r52.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i41 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        varReplacer3680 = 0;

        interfaceinvoke $r53.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>($r54, varReplacer3680, $i41);

        $i42 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        $r55 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i43 = interfaceinvoke $r55.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i49 = $i42 / $i43;

        $r56 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer3683 = 1;

        $i44 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer3683, i49);

        $l45 = (long) $i44;

        virtualinvoke $r56.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l45);

     label03:
        $r43 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i37 = virtualinvoke $r43.<org.apache.sshd.common.util.buffer.Buffer: int getInt()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength> = $i37;

        $i38 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i38 < 5 goto label04;

        $i40 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        if $i40 <= 262144 goto label05;

     label04:
        $r45 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r44 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r46 = virtualinvoke $r44.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        varReplacer3682 = "decode({}) Error decoding packet(invalid length) {}";

        interfaceinvoke $r45.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3682, r0, $r46);

        $r47 = new org.apache.sshd.common.SshException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        varReplacer3681 = "Invalid packet length: ";

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3681);

        $i39 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i39);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3672 = 2;

        specialinvoke $r47.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3672, $r51);

        throw $r47;

     label05:
        varReplacer3675 = 1;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer3675;

        goto label01;

     label06:
        $i0 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderState>;

        if $i0 != 1 goto label01;

        $z0 = <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $r39 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i34 = virtualinvoke $r39.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i34 == 4 goto label07;

        $r40 = new java.lang.AssertionError;

        specialinvoke $r40.<java.lang.AssertionError: void <init>()>();

        throw $r40;

     label07:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r1 == null goto label08;

        $r38 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i50 = interfaceinvoke $r38.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        goto label09;

     label08:
        $i50 = 0;

     label09:
        i51 = $i50;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i1 = virtualinvoke $r2.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i2 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i3 = $i2 + i51;

        if $i1 < $i3 goto label18;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        r4 = virtualinvoke $r3.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        if $r5 == null goto label10;

        $i26 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i28 = $i26 + 4;

        $i27 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        i52 = $i28 - $i27;

        $r35 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i29 = r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize>;

        interfaceinvoke $r35.<org.apache.sshd.common.cipher.Cipher: void update(byte[],int,int)>(r4, $i29, i52);

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i30 = interfaceinvoke $r36.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i53 = i52 / $i30;

        $r37 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer3673 = 1;

        $i31 = staticinvoke <java.lang.Math: int max(int,int)>(varReplacer3673, i53);

        $l32 = (long) $i31;

        virtualinvoke $r37.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l32);

     label10:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        if $r6 == null goto label11;

        $r29 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $l21 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        interfaceinvoke $r29.<org.apache.sshd.common.mac.Mac: void updateUInt(long)>($l21);

        $r30 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i22 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i23 = $i22 + 4;

        varReplacer3671 = 0;

        interfaceinvoke $r30.<org.apache.sshd.common.mac.Mac: void update(byte[],int,int)>(r4, varReplacer3671, $i23);

        $r32 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $r31 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        varReplacer3670 = 0;

        interfaceinvoke $r32.<org.apache.sshd.common.mac.Mac: void doFinal(byte[],int)>($r31, varReplacer3670);

        $r33 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult>;

        $i24 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i25 = $i24 + 4;

        varReplacer3676 = 0;

        $z4 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: boolean equals(byte[],int,byte[],int,int)>($r33, varReplacer3676, r4, $i25, i51);

        if $z4 != 0 goto label11;

        $r34 = new org.apache.sshd.common.SshException;

        varReplacer3677 = 5;

        varReplacer3678 = "MAC Error";

        specialinvoke $r34.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3677, varReplacer3678);

        throw $r34;

     label11:
        $l4 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l5 = $l4 + 1L;

        $l6 = $l5 & 4294967295L;

        r0.<org.apache.sshd.common.session.AbstractSession: long seqi> = $l6;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        i54 = virtualinvoke $r7.<org.apache.sshd.common.util.buffer.Buffer: int getUByte()>();

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        i7 = virtualinvoke $r8.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        if $r9 == null goto label15;

        $r19 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $z1 = interfaceinvoke $r19.<org.apache.sshd.common.compression.Compression: boolean isCompressionExecuted()>();

        if $z1 == 0 goto label15;

        $z2 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z2 != 0 goto label12;

        $r28 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $z3 = interfaceinvoke $r28.<org.apache.sshd.common.compression.Compression: boolean isDelayed()>();

        if $z3 != 0 goto label15;

     label12:
        $r20 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        if $r20 != null goto label13;

        $r27 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r27.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer> = $r27;

        goto label14;

     label13:
        $r21 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        virtualinvoke $r21.<org.apache.sshd.common.util.buffer.Buffer: void clear()>();

     label14:
        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r22 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i16 = virtualinvoke $r22.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i17 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i18 = $i16 + $i17;

        $i19 = $i18 - 1;

        $i20 = $i19 - i54;

        virtualinvoke $r23.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i20);

        $r26 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r25 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $r24 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        interfaceinvoke $r26.<org.apache.sshd.common.compression.Compression: void uncompress(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)>($r25, $r24);

        r59 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer uncompressBuffer>;

        goto label16;

     label15:
        $r60 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i55 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i56 = $i55 + 4;

        $i57 = $i56 - i54;

        virtualinvoke $r60.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i57);

        r59 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

     label16:
        $r61 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z6 = interfaceinvoke $r61.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z6 == 0 goto label17;

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = r0;

        $l15 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l15);

        $r15[1] = $r17;

        $r18 = virtualinvoke r59.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String printHex()>();

        $r15[2] = $r18;

        varReplacer3679 = "decode({}) Received packet #{}: {}";

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer3679, $r15);

     label17:
        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        virtualinvoke $r10.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();

        $r11 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $i9 = virtualinvoke r59.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $l10 = (long) $i9;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>($l10);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void handleMessage(org.apache.sshd.common.util.buffer.Buffer)>(r59);

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        $i12 = r0.<org.apache.sshd.common.session.AbstractSession: int decoderLength>;

        $i13 = $i12 + 4;

        $i14 = $i13 + i51;

        virtualinvoke $r12.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i14);

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r13.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>(i7);

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer decoderBuffer>;

        virtualinvoke $r14.<org.apache.sshd.common.util.buffer.Buffer: void compact()>();

        varReplacer3674 = 0;

        r0.<org.apache.sshd.common.session.AbstractSession: int decoderState> = varReplacer3674;

        goto label01;

     label18:
        return;
    }

    protected void sendIdentification(java.lang.String)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r12;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String r3, $r6, varReplacer3684, varReplacer3685;
        java.nio.charset.Charset $r7;
        byte[] r8;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r9;
        org.apache.sshd.common.io.IoSession $r10;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3684 = "sendIdentification({}): {}";

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3684, r0, r3);

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        varReplacer3685 = "\r\n";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3685);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        $r10 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession ioSession>;

        $r9 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r9.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[])>(r8);

        interfaceinvoke $r10.<org.apache.sshd.common.io.IoSession: org.apache.sshd.common.io.IoWriteFuture write(org.apache.sshd.common.util.buffer.Buffer)>($r9);

        return;
    }

    protected abstract boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException;

    protected java.lang.String doReadIdentification(org.apache.sshd.common.util.buffer.Buffer, boolean)
    {
        byte[] r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        int i0, $i1, $i2, $i3, i4, $i5, varReplacer3689;
        java.lang.IllegalStateException $r2, $r3, $r5;
        java.lang.String $r4, r7, varReplacer3686, varReplacer3688, varReplacer3690, varReplacer3691;
        boolean z0, $z1, z2;
        org.apache.sshd.common.session.AbstractSession r6;
        byte b6;
        null_type varReplacer3687;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        z0 := @parameter1: boolean;

        r0 = newarray (byte)[256];

     label01:
        i0 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i4 = 0;

        z2 = 0;

     label02:
        $i5 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        if $i5 != 0 goto label03;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>(i0);

        varReplacer3687 = null;

        return varReplacer3687;

     label03:
        b6 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: byte getByte()>();

        if b6 != 13 goto label04;

        z2 = 1;

        goto label02;

     label04:
        if b6 != 10 goto label05;

        goto label08;

     label05:
        if z2 == 0 goto label06;

        $r3 = new java.lang.IllegalStateException;

        varReplacer3688 = "Incorrect identification: bad line ending";

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer3688);

        throw $r3;

     label06:
        $i1 = lengthof r0;

        if i4 < $i1 goto label07;

        $r2 = new java.lang.IllegalStateException;

        varReplacer3686 = "Incorrect identification: line too long";

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer3686);

        throw $r2;

     label07:
        $i2 = i4;

        i4 = i4 + 1;

        r0[$i2] = b6;

        goto label02;

     label08:
        $r4 = new java.lang.String;

        varReplacer3689 = 0;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],int,int)>(r0, varReplacer3689, i4);

        r7 = $r4;

        if z0 != 0 goto label09;

        varReplacer3690 = "SSH-";

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(varReplacer3690);

        if $z1 == 0 goto label10;

     label09:
        return r7;

     label10:
        $i3 = virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        if $i3 <= 16384 goto label11;

        $r5 = new java.lang.IllegalStateException;

        varReplacer3691 = "Incorrect identification: too many header lines";

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(varReplacer3691);

        throw $r5;

     label11:
        goto label01;
    }

    protected java.util.Map createProposal(java.lang.String)
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.AbstractSession r2;
        org.apache.sshd.common.kex.KexProposalOption $r3, $r10, $r16, $r18, $r24, $r26, $r32, $r34, $r36, $r38;
        java.util.List $r4, $r12, $r20, $r28;
        java.lang.Object[] $r5, $r13, $r21, $r29;
        java.util.Collection $r6, $r14, $r22, $r30;
        java.lang.String $r7, r9, r15, r23, r31, varReplacer3692, varReplacer3693, varReplacer3694, varReplacer3695, varReplacer3696, varReplacer3697;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r9 := @parameter0: java.lang.String;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        $r3 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption ALGORITHMS>;

        $r4 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: java.util.List getKeyExchangeFactories()>();

        $r5 = newarray (java.lang.Object)[0];

        varReplacer3696 = "No KEX factories";

        $r6 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r4, varReplacer3696, $r5);

        $r7 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r6);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

        $r10 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption SERVERKEYS>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r9);

        $r12 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: java.util.List getCipherFactories()>();

        $r13 = newarray (java.lang.Object)[0];

        varReplacer3697 = "No cipher factories";

        $r14 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r12, varReplacer3697, $r13);

        r15 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r14);

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r15);

        $r18 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r15);

        $r20 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: java.util.List getMacFactories()>();

        $r21 = newarray (java.lang.Object)[0];

        varReplacer3692 = "No MAC factories";

        $r22 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r20, varReplacer3692, $r21);

        r23 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r22);

        $r24 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r23);

        $r26 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, r23);

        $r28 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: java.util.List getCompressionFactories()>();

        $r29 = newarray (java.lang.Object)[0];

        varReplacer3694 = "No compression factories";

        $r30 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>($r28, varReplacer3694, $r29);

        r31 = staticinvoke <org.apache.sshd.common.NamedResource$Utils: java.lang.String getNames(java.util.Collection)>($r30);

        $r32 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r31);

        $r34 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r31);

        $r36 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        varReplacer3695 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, varReplacer3695);

        $r38 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        varReplacer3693 = "";

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, varReplacer3693);

        return r1;
    }

    protected byte[] sendKexInit(java.util.Map) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r5, $r13, $r16, $r27, $r36;
        boolean $z0, $z1, $z2, $z3;
        org.apache.sshd.common.util.buffer.Buffer r2;
        int i0, $i1, varReplacer3699, varReplacer3706, varReplacer3707, varReplacer3708, varReplacer3709;
        org.apache.sshd.common.random.Random $r3;
        byte[] $r4, $r32, r38;
        java.util.List $r6;
        java.lang.Object $r8, $r11;
        org.apache.sshd.common.kex.KexProposalOption r9;
        java.util.Map r10;
        java.lang.String r12, $r14, $r18, $r21, $r25, $r29, $r33, $r35, varReplacer3698, varReplacer3700, varReplacer3702, varReplacer3703, varReplacer3704, varReplacer3705;
        java.lang.StringBuilder $r15, $r17, $r19, $r20, $r22, $r23, $r24, $r26, $r28, $r30, $r31, $r34;
        java.util.Iterator r37;
        long varReplacer3701;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r10 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3703 = "sendKexInit({}) Send SSH_MSG_KEXINIT";

        interfaceinvoke $r36.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3703, r0);

     label1:
        varReplacer3706 = 20;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)>(varReplacer3706);

        i0 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: int wpos()>();

        $i1 = i0 + 16;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void wpos(int)>($i1);

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.random.Random random>;

        $r4 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer3707 = 16;

        interfaceinvoke $r3.<org.apache.sshd.common.random.Random: void fill(byte[],int,int)>($r4, i0, varReplacer3707);

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label2;

        $r27 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        varReplacer3704 = "sendKexInit(";

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3704);

        $r29 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        varReplacer3705 = ") cookie=";

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3705);

        $r32 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer3708 = 16;

        varReplacer3709 = 58;

        $r33 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(byte[],int,int,char)>($r32, i0, varReplacer3708, varReplacer3709);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void trace(java.lang.String)>($r35);

     label2:
        $r6 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r37 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r8 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.sshd.common.kex.KexProposalOption) $r8;

        $r11 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r12 = (java.lang.String) $r11;

        $r13 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r13.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z2 == 0 goto label4;

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        varReplacer3700 = "sendKexInit(";

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3700);

        $r18 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        varReplacer3698 = ")[";

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3698);

        $r21 = virtualinvoke r9.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        varReplacer3702 = "] ";

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3702);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.slf4j.Logger: void trace(java.lang.String)>($r25);

     label4:
        $r14 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String trimToEmpty(java.lang.String)>(r12);

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>($r14);

        goto label3;

     label5:
        varReplacer3699 = 0;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putBoolean(boolean)>(varReplacer3699);

        varReplacer3701 = 0L;

        virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>(varReplacer3701);

        r38 = virtualinvoke r2.<org.apache.sshd.common.util.buffer.Buffer: byte[] getCompactData()>();

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return r38;
    }

    protected byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer, java.util.Map)
    {
        org.apache.sshd.common.util.buffer.Buffer r0;
        byte[] r1, r2, r53;
        int $i0, $i1, i2, $i3, $i4, $i5, i7, i8, i10, i11, varReplacer3712, varReplacer3713, varReplacer3714, varReplacer3722, varReplacer3723;
        org.apache.sshd.common.session.AbstractSession r3;
        org.slf4j.Logger $r4, $r7, $r8, $r10, $r18, $r29, $r33, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r5;
        java.lang.Boolean $r6, $r23;
        byte $b6, b9;
        java.lang.StringBuilder $r9, $r11, $r13, $r14, $r15, $r17, $r19, $r21, $r22, $r24, $r32, $r34, $r36, $r37, $r39, $r40, $r41, $r43, $r45, $r47, $r48, $r50;
        java.lang.String $r12, $r16, $r20, $r25, r28, $r35, $r38, $r42, $r46, $r49, $r51, varReplacer3710, varReplacer3711, varReplacer3715, varReplacer3716, varReplacer3717, varReplacer3718, varReplacer3719, varReplacer3720, varReplacer3721;
        java.lang.Object $r26;
        org.apache.sshd.common.kex.KexProposalOption r27;
        java.util.Map r30;
        java.util.Iterator r52;
        long l12;

        nop;

        r3 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        r30 := @parameter1: java.util.Map;

        r1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i0 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        $i1 = $i0 + 1;

        r2 = newarray (byte)[$i1];

        r2[0] = 20;

        b9 = 6;

        i2 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        varReplacer3712 = 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, varReplacer3712, $i4);

        $i5 = i2 + 16;

        virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: void rpos(int)>($i5);

        i10 = b9 + 16;

        $r4 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r44 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        varReplacer3716 = "receiveKexInit(";

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3716);

        $r46 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        varReplacer3715 = ") cookie=";

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3715);

        varReplacer3722 = 16;

        varReplacer3723 = 58;

        $r49 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(byte[],int,int,char)>(r1, i2, varReplacer3722, varReplacer3723);

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r44.<org.slf4j.Logger: void trace(java.lang.String)>($r51);

     label1:
        $r5 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r52 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label4;

        $r26 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.sshd.common.kex.KexProposalOption) $r26;

        i11 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        r28 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: java.lang.String getString()>();

        $r29 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z4 = interfaceinvoke $r29.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z4 == 0 goto label3;

        $r33 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        varReplacer3717 = "receiveKexInit(";

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3717);

        $r35 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        varReplacer3720 = ")[";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3720);

        $r38 = virtualinvoke r27.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        varReplacer3718 = "] ";

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3718);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r33.<org.slf4j.Logger: void trace(java.lang.String)>($r42);

     label3:
        i7 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: int rpos()>();

        i8 = i7 - i11;

        interfaceinvoke r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, r28);

        i10 = i10 + i8;

        goto label2;

     label4:
        $z1 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: boolean getBoolean()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r3.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows> = $r6;

        $r7 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z2 == 0 goto label5;

        $r18 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        varReplacer3721 = "receiveKexInit(";

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3721);

        $r20 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        varReplacer3710 = ") first kex packet follows: ";

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3710);

        $r23 = r3.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows>;

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void trace(java.lang.String)>($r25);

     label5:
        l12 = virtualinvoke r0.<org.apache.sshd.common.util.buffer.Buffer: long getUInt()>();

        $b6 = l12 cmp 0L;

        if $b6 == 0 goto label6;

        $r8 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r8.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label6;

        $r10 = r3.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        varReplacer3711 = "receiveKexInit(";

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3711);

        $r12 = virtualinvoke r3.<org.apache.sshd.common.session.AbstractSession: java.lang.String toString()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        varReplacer3719 = ") non-zero reserved value: ";

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3719);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l12);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String)>($r16);

     label6:
        r53 = newarray (byte)[i10];

        varReplacer3713 = 0;

        varReplacer3714 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, varReplacer3713, r53, varReplacer3713, i10);

        return r53;
    }

    protected void sendNewKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1, $r4;
        boolean $z0;
        org.apache.sshd.common.util.buffer.Buffer r2;
        java.lang.String varReplacer3724;
        int varReplacer3725, varReplacer3726;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3724 = "sendNewKeys({}) Send SSH_MSG_NEWKEYS";

        interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3724, r0);

     label1:
        varReplacer3725 = 21;

        varReplacer3726 = 8;

        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer3725, varReplacer3726);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r2);

        return;
    }

    protected void receiveNewKeys() throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KeyExchange $r1, $r3, $r5;
        byte[] r2, r4, $r7, r9, r10, r11, $r39, $r82, $r84, $r88, $r89, r92, r94, r96, r98, r104, r107, r110, r113;
        org.apache.sshd.common.digest.Digest r6;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer r8, $r87;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, $i12, $i13, $i17, $i18, $i21, $i25, $i29, $i33, $i37, $i39, varReplacer3727, varReplacer3728, varReplacer3731, varReplacer3734, varReplacer3735, varReplacer3737, varReplacer3739, varReplacer3740, varReplacer3741, varReplacer3742, varReplacer3743, varReplacer3744, varReplacer3746, varReplacer3750, varReplacer3751;
        org.apache.sshd.common.cipher.Cipher r12, r25, $r34, $r37, $r42, $r43, $r54, $r55;
        org.apache.sshd.common.kex.KexProposalOption $r13, $r17, $r21, $r26, $r30, $r99;
        java.util.List $r14, $r18, $r22, $r27, $r31, $r101;
        java.lang.Object $r15, $r19, $r23, $r24, $r28, $r32, $r81, $r102, $r103;
        org.apache.sshd.common.mac.Mac r16, r29, $r38;
        org.apache.sshd.common.compression.Compression r20, r33, $r36, $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.sshd.common.compression.Compression$Type $r35, $r40;
        long l14, $l15, $l16, varReplacer3732, varReplacer3736, varReplacer3738, varReplacer3747, varReplacer3752, varReplacer3756;
        java.util.concurrent.atomic.AtomicLong $r44, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r58;
        org.slf4j.Logger $r45, $r56, $r83, $r85;
        java.lang.Object[] $r53;
        java.lang.Long $r57;
        org.apache.sshd.common.SshException $r59, $r64, $r70, $r75;
        java.lang.StringBuilder $r60, $r61, $r62, $r65, $r66, $r67, $r71, $r72, $r73, $r76, $r77, $r78;
        java.lang.String $r63, $r68, $r74, $r79, $r86, r100, r106, r108, r109, r112, r114, varReplacer3729, varReplacer3730, varReplacer3733, varReplacer3748, varReplacer3749, varReplacer3753, varReplacer3754, varReplacer3755, varReplacer3757;
        byte $b20, $b22, $b24, $b26, $b28, $b30, $b32, $b34, $b36, $b38;
        org.apache.sshd.common.cipher.Cipher$Mode $r105, $r111;
        null_type varReplacer3745;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r2 = interfaceinvoke $r1.<org.apache.sshd.common.kex.KeyExchange: byte[] getK()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r4 = interfaceinvoke $r3.<org.apache.sshd.common.kex.KeyExchange: byte[] getH()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.kex.KeyExchange kex>;

        r6 = interfaceinvoke $r5.<org.apache.sshd.common.kex.KeyExchange: org.apache.sshd.common.digest.Digest getHash()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        if $r7 != null goto label01;

        $r81 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r82 = (byte[]) $r81;

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId> = $r82;

        $r83 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r83.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z3 == 0 goto label01;

        $r85 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r84 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        varReplacer3744 = 58;

        $r86 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(char,byte[])>(varReplacer3744, $r84);

        varReplacer3730 = "receiveNewKeys({}) session ID={}";

        interfaceinvoke $r85.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3730, r0, $r86);

     label01:
        $r87 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r87.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r8 = $r87;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r2);

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r4);

        varReplacer3739 = 65;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putByte(byte)>(varReplacer3739);

        $r88 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>($r88);

        i0 = virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        r9 = virtualinvoke r8.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        varReplacer3740 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3740, i0);

        r10 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r89 = r0.<org.apache.sshd.common.session.AbstractSession: byte[] sessionId>;

        $i17 = lengthof $r89;

        $i18 = i0 - $i17;

        i1 = $i18 - 1;

        $b20 = r9[i1];

        $i21 = $b20 + 1;

        $b22 = (byte) $i21;

        r9[i1] = $b22;

        varReplacer3741 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3741, i0);

        r11 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b24 = r9[i1];

        $i25 = $b24 + 1;

        $b26 = (byte) $i25;

        r9[i1] = $b26;

        varReplacer3734 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3734, i0);

        r92 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b28 = r9[i1];

        $i29 = $b28 + 1;

        $b30 = (byte) $i29;

        r9[i1] = $b30;

        varReplacer3751 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3751, i0);

        r94 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b32 = r9[i1];

        $i33 = $b32 + 1;

        $b34 = (byte) $i33;

        r9[i1] = $b34;

        varReplacer3742 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3742, i0);

        r96 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $b36 = r9[i1];

        $i37 = $b36 + 1;

        $b38 = (byte) $i37;

        r9[i1] = $b38;

        varReplacer3743 = 0;

        interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>(r9, varReplacer3743, i0);

        r98 = interfaceinvoke r6.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $r99 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        r100 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r99);

        $r101 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getCipherFactories()>();

        $r102 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r101, r100);

        varReplacer3729 = "Unknown s2c cipher: %s";

        $r103 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r102, varReplacer3729, r100);

        r12 = (org.apache.sshd.common.cipher.Cipher) $r103;

        $i39 = interfaceinvoke r12.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r104 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r94, $i39, r6, r2, r4);

        $z4 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z4 == 0 goto label02;

        $r105 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

        goto label03;

     label02:
        $r105 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

     label03:
        interfaceinvoke r12.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r105, r104, r11);

        $r13 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        r106 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r13);

        $r14 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getMacFactories()>();

        $r15 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r14, r106);

        r16 = (org.apache.sshd.common.mac.Mac) $r15;

        if r16 != null goto label04;

        $r75 = new org.apache.sshd.common.SshException;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        varReplacer3754 = "Unknown s2c MAC: ";

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3754);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r106);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3735 = 5;

        specialinvoke $r75.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3735, $r79);

        throw $r75;

     label04:
        $i2 = interfaceinvoke r16.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r107 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r98, $i2, r6, r2, r4);

        interfaceinvoke r16.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r107);

        $r17 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        r108 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r17);

        $r18 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getCompressionFactories()>();

        $r19 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r18, r108);

        r20 = (org.apache.sshd.common.compression.Compression) $r19;

        if r20 != null goto label05;

        $r70 = new org.apache.sshd.common.SshException;

        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        varReplacer3749 = "Unknown s2c compression: ";

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3749);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3727 = 6;

        specialinvoke $r70.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3727, $r74);

        throw $r70;

     label05:
        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        r109 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r21);

        $r22 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getCipherFactories()>();

        $r23 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r22, r109);

        varReplacer3753 = "Unknown c2s cipher: %s";

        $r24 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r23, varReplacer3753, r109);

        r25 = (org.apache.sshd.common.cipher.Cipher) $r24;

        $i3 = interfaceinvoke r25.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        r110 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r92, $i3, r6, r2, r4);

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z0 == 0 goto label06;

        $r111 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Decrypt>;

        goto label07;

     label06:
        $r111 = <org.apache.sshd.common.cipher.Cipher$Mode: org.apache.sshd.common.cipher.Cipher$Mode Encrypt>;

     label07:
        interfaceinvoke r25.<org.apache.sshd.common.cipher.Cipher: void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])>($r111, r110, r10);

        $r26 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        r112 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r26);

        $r27 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getMacFactories()>();

        $r28 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r27, r112);

        r29 = (org.apache.sshd.common.mac.Mac) $r28;

        if r29 != null goto label08;

        $r64 = new org.apache.sshd.common.SshException;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        varReplacer3755 = "Unknown c2s MAC: ";

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3755);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r112);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3737 = 5;

        specialinvoke $r64.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3737, $r68);

        throw $r64;

     label08:
        $i4 = interfaceinvoke r29.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        r113 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])>(r96, $i4, r6, r2, r4);

        interfaceinvoke r29.<org.apache.sshd.common.mac.Mac: void init(byte[])>(r113);

        $r30 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        r114 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String getNegotiatedKexParameter(org.apache.sshd.common.kex.KexProposalOption)>($r30);

        $r31 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.List getCompressionFactories()>();

        $r32 = staticinvoke <org.apache.sshd.common.NamedFactory$Utils: java.lang.Object create(java.util.Collection,java.lang.String)>($r31, r114);

        r33 = (org.apache.sshd.common.compression.Compression) $r32;

        if r33 != null goto label09;

        $r59 = new org.apache.sshd.common.SshException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        varReplacer3733 = "Unknown c2s compression: ";

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3733);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        varReplacer3728 = 6;

        specialinvoke $r59.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3728, $r63);

        throw $r59;

     label09:
        $z1 = r0.<org.apache.sshd.common.session.AbstractSession: boolean isServer>;

        if $z1 == 0 goto label10;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r12;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r16;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r20;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r25;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r29;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r33;

        goto label11;

     label10:
        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher> = r25;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac outMac> = r29;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression> = r33;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher> = r12;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac> = r16;

        r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression> = r20;

     label11:
        $r34 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $i5 = interfaceinvoke $r34.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int outCipherSize> = $i5;

        $r36 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression outCompression>;

        $r35 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Deflater>;

        varReplacer3731 = -1;

        interfaceinvoke $r36.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r35, varReplacer3731);

        $r37 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $i6 = interfaceinvoke $r37.<org.apache.sshd.common.cipher.Cipher: int getIVSize()>();

        r0.<org.apache.sshd.common.session.AbstractSession: int inCipherSize> = $i6;

        $r38 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.mac.Mac inMac>;

        $i7 = interfaceinvoke $r38.<org.apache.sshd.common.mac.Mac: int getBlockSize()>();

        $r39 = newarray (byte)[$i7];

        r0.<org.apache.sshd.common.session.AbstractSession: byte[] inMacResult> = $r39;

        $r41 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.compression.Compression inCompression>;

        $r40 = <org.apache.sshd.common.compression.Compression$Type: org.apache.sshd.common.compression.Compression$Type Inflater>;

        varReplacer3746 = -1;

        interfaceinvoke $r41.<org.apache.sshd.common.compression.Compression: void init(org.apache.sshd.common.compression.Compression$Type,int)>($r40, varReplacer3746);

        $r42 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        i8 = interfaceinvoke $r42.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        $r43 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        i9 = interfaceinvoke $r43.<org.apache.sshd.common.cipher.Cipher: int getBlockSize()>();

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i9);

        $i11 = i10 * 8;

        $i12 = $i11 / 4;

        varReplacer3750 = 63;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, varReplacer3750);

        l14 = 1L << $i13;

        $r44 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        varReplacer3757 = "rekey-blocks-limit";

        $l15 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3757, l14);

        virtualinvoke $r44.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l15);

        $r45 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r45.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label12;

        $r56 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r53 = newarray (java.lang.Object)[5];

        $r53[0] = r0;

        $r54 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher inCipher>;

        $r53[1] = $r54;

        $r55 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.cipher.Cipher outCipher>;

        $r53[2] = $r55;

        $r57 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l14);

        $r53[3] = $r57;

        $r58 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        $r53[4] = $r58;

        varReplacer3748 = "receiveNewKeys({}) inCipher={}, outCipher={}, recommended blocks limit={}, actual={}";

        interfaceinvoke $r56.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3748, $r53);

     label12:
        $r46 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        varReplacer3736 = 0L;

        virtualinvoke $r46.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3736);

        $r47 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        varReplacer3756 = 0L;

        virtualinvoke $r47.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3756);

        $r48 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        varReplacer3738 = 0L;

        virtualinvoke $r48.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3738);

        $r49 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        varReplacer3752 = 0L;

        virtualinvoke $r49.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3752);

        $r50 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        varReplacer3747 = 0L;

        virtualinvoke $r50.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3747);

        $r51 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        varReplacer3732 = 0L;

        virtualinvoke $r51.<java.util.concurrent.atomic.AtomicLong: void set(long)>(varReplacer3732);

        $r52 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l16 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r52.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l16);

        varReplacer3745 = null;

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Boolean firstKexPacketFollows> = varReplacer3745;

        return;
    }

    protected byte[] resizeKey(byte[], int, org.apache.sshd.common.digest.Digest, byte[], byte[]) throws java.lang.Exception
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, varReplacer3758, varReplacer3759, varReplacer3760, varReplacer3761;
        byte[] r0, r1, $r3, r4, r5, r8;
        org.apache.sshd.common.digest.Digest r2;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r6;
        org.apache.sshd.common.session.AbstractSession r7;
        org.apache.sshd.common.util.buffer.Buffer r9;

        nop;

        r7 := @this: org.apache.sshd.common.session.AbstractSession;

        r8 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.sshd.common.digest.Digest;

        r0 := @parameter3: byte[];

        r1 := @parameter4: byte[];

        r9 = null;

     label1:
        $i1 = lengthof r8;

        if i0 <= $i1 goto label3;

        if r9 != null goto label2;

        $r6 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        specialinvoke $r6.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>()>();

        r9 = $r6;

     label2:
        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putMPInt(byte[])>(r0);

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r1);

        virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: void putRawBytes(byte[])>(r8);

        $r3 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: byte[] array()>();

        $i2 = virtualinvoke r9.<org.apache.sshd.common.util.buffer.Buffer: int available()>();

        varReplacer3761 = 0;

        interfaceinvoke r2.<org.apache.sshd.common.digest.Digest: void update(byte[],int,int)>($r3, varReplacer3761, $i2);

        r4 = interfaceinvoke r2.<org.apache.sshd.common.digest.Digest: byte[] digest()>();

        $i4 = lengthof r8;

        $i3 = lengthof r4;

        $i5 = $i4 + $i3;

        r5 = newarray (byte)[$i5];

        $i6 = lengthof r8;

        varReplacer3759 = 0;

        varReplacer3760 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, varReplacer3759, r5, varReplacer3759, $i6);

        $i8 = lengthof r8;

        $i7 = lengthof r4;

        varReplacer3758 = 0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, varReplacer3758, r5, $i8, $i7);

        r8 = r5;

        r9 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: org.apache.sshd.common.util.buffer.Buffer clear(org.apache.sshd.common.util.buffer.Buffer)>(r9);

        goto label1;

     label3:
        return r8;
    }

    public void disconnect(int, java.lang.String) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object[] $r1;
        int i0, $i1, $i2, varReplacer3765;
        org.slf4j.Logger $r2;
        java.lang.String $r3, r4, varReplacer3762, varReplacer3763, varReplacer3764;
        org.apache.sshd.common.util.buffer.Buffer r5;
        long $l3, $l4, l5;
        java.util.concurrent.TimeUnit $r6;
        org.apache.sshd.common.io.IoWriteFuture $r7;
        org.apache.sshd.common.session.AbstractSession$3 $r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r0;

        $r3 = staticinvoke <org.apache.sshd.common.SshConstants: java.lang.String getDisconnectReasonName(int)>(i0);

        $r1[1] = $r3;

        $r1[2] = r4;

        varReplacer3762 = "Disconnecting({}): {} - {}";

        interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>(varReplacer3762, $r1);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = $i1 + 16;

        varReplacer3765 = 1;

        r5 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer3765, $i2);

        $l3 = (long) i0;

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l3);

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(r4);

        varReplacer3764 = "";

        virtualinvoke r5.<org.apache.sshd.common.util.buffer.Buffer: void putString(java.lang.String)>(varReplacer3764);

        $l4 = <org.apache.sshd.common.FactoryManager: long DEFAULT_DISCONNECT_TIMEOUT>;

        varReplacer3763 = "disconnect-timeout";

        l5 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3763, $l4);

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r7 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)>(r5, l5, $r6);

        $r8 = new org.apache.sshd.common.session.AbstractSession$3;

        specialinvoke $r8.<org.apache.sshd.common.session.AbstractSession$3: void <init>(org.apache.sshd.common.session.AbstractSession,int,java.lang.String)>(r0, i0, r4);

        interfaceinvoke $r7.<org.apache.sshd.common.io.IoWriteFuture: org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)>($r8);

        return;
    }

    protected void notImplemented() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.util.buffer.Buffer r1;
        long $l0, $l1;
        int varReplacer3766, varReplacer3767;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        varReplacer3766 = 3;

        varReplacer3767 = 8;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)>(varReplacer3766, varReplacer3767);

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long seqi>;

        $l1 = $l0 - 1L;

        virtualinvoke r1.<org.apache.sshd.common.util.buffer.Buffer: void putInt(long)>($l1);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)>(r1);

        return;
    }

    protected java.util.Map negotiate()
    {
        java.util.EnumMap $r0, r1;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.sshd.common.session.AbstractSession r4;
        java.util.Map $r5, $r8, $r11;
        java.lang.Object $r6, $r9, $r12, $r16, $r46;
        org.apache.sshd.common.kex.KexProposalOption r7, $r40, $r43;
        java.lang.String r10, r13, $r21, $r30, $r33, r45, r47, r51, r52, r53, varReplacer3769, varReplacer3770, varReplacer3771, varReplacer3773, varReplacer3774, varReplacer3775, varReplacer3776, varReplacer3777, varReplacer3778;
        java.lang.String[] r14, r15, r49, r50;
        org.slf4j.Logger $r17, $r19, $r41, $r42;
        java.lang.StringBuilder $r18, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39;
        java.lang.IllegalStateException $r44;
        int i0, i1, i2, i3, varReplacer3768, varReplacer3772;

        nop;

        r4 := @this: org.apache.sshd.common.session.AbstractSession;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        $r2 = <org.apache.sshd.common.kex.KexProposalOption: java.util.List VALUES>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.sshd.common.kex.KexProposalOption) $r6;

        $r8 = r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map clientProposal>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (java.lang.String) $r9;

        $r11 = r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map serverProposal>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r13 = (java.lang.String) $r12;

        varReplacer3768 = 44;

        r14 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r10, varReplacer3768);

        varReplacer3772 = 44;

        r15 = staticinvoke <org.apache.sshd.common.util.GenericUtils: java.lang.String[] split(java.lang.String,char)>(r13, varReplacer3772);

        r49 = r14;

        i1 = lengthof r49;

        i2 = 0;

     label02:
        if i2 >= i1 goto label07;

        r45 = r49[i2];

        r50 = r15;

        i0 = lengthof r50;

        i3 = 0;

     label03:
        if i3 >= i0 goto label05;

        r47 = r50[i3];

        $z5 = virtualinvoke r45.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z5 == 0 goto label04;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r45);

        goto label05;

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        $r46 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r51 = (java.lang.String) $r46;

        if r51 == null goto label06;

        goto label07;

     label06:
        i2 = i2 + 1;

        goto label02;

     label07:
        $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r52 = (java.lang.String) $r16;

        if r52 != null goto label11;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        varReplacer3777 = "Unable to negotiate key exchange for ";

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3777);

        $r33 = virtualinvoke r7.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        varReplacer3778 = " (client: ";

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3778);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        varReplacer3773 = " / server: ";

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3773);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        varReplacer3774 = ")";

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3774);

        r53 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CLANG>;

        $z2 = virtualinvoke $r40.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r7);

        if $z2 != 0 goto label08;

        $r43 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SLANG>;

        $z4 = virtualinvoke $r43.<org.apache.sshd.common.kex.KexProposalOption: boolean equals(java.lang.Object)>(r7);

        if $z4 == 0 goto label09;

     label08:
        $r41 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z3 = interfaceinvoke $r41.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z3 == 0 goto label10;

        $r42 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        interfaceinvoke $r42.<org.slf4j.Logger: void trace(java.lang.String)>(r53);

        goto label10;

     label09:
        $r44 = new java.lang.IllegalStateException;

        specialinvoke $r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r53);

        throw $r44;

     label10:
        goto label12;

     label11:
        $r17 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r17.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label12;

        $r19 = r4.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        varReplacer3775 = "Kex: negotiate(";

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3775);

        $r21 = virtualinvoke r7.<org.apache.sshd.common.kex.KexProposalOption: java.lang.String getDescription()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        varReplacer3776 = ") guess=";

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3776);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        varReplacer3769 = " (client: ";

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3769);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        varReplacer3770 = " / server: ";

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3770);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        varReplacer3771 = ")";

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3771);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.slf4j.Logger: void trace(java.lang.String)>($r30);

     label12:
        goto label01;

     label13:
        $r5 = virtualinvoke r4.<org.apache.sshd.common.session.AbstractSession: java.util.Map setNegotiationResult(java.util.Map)>(r1);

        return $r5;
    }

    protected java.util.Map setNegotiationResult(java.util.Map)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.Map $r1, r2, $r3, r4, $r5, $r23;
        boolean $z0, $z1;
        org.slf4j.Logger $r6, $r9, $r17;
        java.lang.Object[] $r7, $r15;
        org.apache.sshd.common.kex.KexProposalOption $r8, $r11, $r13, $r16, $r19, $r21;
        java.lang.Object $r10, $r12, $r14, $r18, $r20, $r22;
        java.lang.Throwable $r24, r25;
        java.lang.String varReplacer3779, varReplacer3780;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: java.util.Map;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r23 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r23.<java.util.Map: void clear()>();

     label2:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map negotiationResult>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>(r4);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r24 := @caughtexception;

        r25 = $r24;

        exitmonitor r2;

     label5:
        throw r25;

     label6:
        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label7;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r7 = newarray (java.lang.Object)[4];

        $r7[0] = r0;

        $r8 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CENC>;

        $r10 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r7[1] = $r10;

        $r11 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CMAC>;

        $r12 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r7[2] = $r12;

        $r13 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption S2CCOMP>;

        $r14 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r7[3] = $r14;

        varReplacer3780 = "setNegotiationResult({}) Kex: server->client {} {} {}";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3780, $r7);

        $r17 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r0;

        $r16 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SENC>;

        $r18 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r15[1] = $r18;

        $r19 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SMAC>;

        $r20 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r15[2] = $r20;

        $r21 = <org.apache.sshd.common.kex.KexProposalOption: org.apache.sshd.common.kex.KexProposalOption C2SCOMP>;

        $r22 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r15[3] = $r22;

        varReplacer3779 = "setNegotiationResult({}) Kex: client->server {} {} {}";

        interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3779, $r15);

     label7:
        return r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void requestSuccess(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r5, $r7;
        org.apache.sshd.common.util.buffer.ByteArrayBuffer $r3;
        org.apache.sshd.common.util.buffer.Buffer r4;
        byte[] $r6;
        java.lang.Throwable $r8, r9;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r4 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r3 = new org.apache.sshd.common.util.buffer.ByteArrayBuffer;

        $r6 = virtualinvoke r4.<org.apache.sshd.common.util.buffer.Buffer: byte[] getCompactData()>();

        specialinvoke $r3.<org.apache.sshd.common.util.buffer.ByteArrayBuffer: void <init>(byte[])>($r6);

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r7.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r9 = $r8;

        exitmonitor r2;

     label4:
        throw r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void requestFailure(org.apache.sshd.common.util.buffer.Buffer) throws java.lang.Exception
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, r2, $r4, $r5;
        java.lang.Object $r3;
        java.lang.Throwable $r6, r7;
        org.apache.sshd.common.util.buffer.Buffer r8;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r8 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        r2 = $r1;

        entermonitor $r1;

     label1:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        $r3 = <org.apache.sshd.common.util.GenericUtils: java.lang.Object NULL>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void resetIdleTimeout()>();

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference requestResult>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r7 = $r6;

        exitmonitor r2;

     label4:
        throw r7;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object getAttribute(org.apache.sshd.common.session.Session$AttributeKey)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.Session$AttributeKey r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.Session$AttributeKey;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object setAttribute(org.apache.sshd.common.session.Session$AttributeKey, java.lang.Object)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.Session$AttributeKey r1;
        java.lang.Object r2, $r4;
        java.util.Map $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.Session$AttributeKey;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map attributes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r4;
    }

    public java.lang.String getUsername()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username>;

        return $r1;
    }

    public void setUsername(java.lang.String)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String username> = r1;

        return;
    }

    public java.lang.Object getLock()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.Object $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.lang.Object lock>;

        return $r1;
    }

    public void addSessionListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.SessionListener r0;
        org.apache.sshd.common.session.AbstractSession r1;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.slf4j.Logger $r4, $r5, $r6;
        java.lang.String varReplacer3781, varReplacer3782, varReplacer3783, varReplacer3784;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.session.SessionListener;

        varReplacer3782 = "addSessionListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer3782, r1);

        $z0 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r6 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3784 = "addSessionListener({})[{}] ignore registration while session is closing";

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3784, r1, r0);

        return;

     label1:
        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r5 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3783 = "addSessionListener({})[{}] registered";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3783, r1, r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3781 = "addSessionListener({})[{}] ignored duplicate";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3781, r1, r0);

     label3:
        return;
    }

    public void removeSessionListener(org.apache.sshd.common.session.SessionListener)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        java.util.Collection $r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r4;
        java.lang.String varReplacer3785, varReplacer3786;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.session.SessionListener;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection sessionListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3785 = "removeSessionListener({})[{}] removed";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3785, r0, r1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3786 = "removeSessionListener({})[{}] not registered";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3786, r0, r1);

     label2:
        return;
    }

    public org.apache.sshd.common.session.SessionListener getSessionListenerProxy()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener sessionListenerProxy>;

        return $r1;
    }

    public void addChannelListener(org.apache.sshd.common.channel.ChannelListener)
    {
        org.apache.sshd.common.channel.ChannelListener r0;
        org.apache.sshd.common.session.AbstractSession r1;
        boolean $z0, $z1;
        java.util.Collection $r3;
        org.slf4j.Logger $r4, $r5, $r6;
        java.lang.String varReplacer3787, varReplacer3788, varReplacer3789, varReplacer3790;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: org.apache.sshd.common.channel.ChannelListener;

        varReplacer3787 = "addChannelListener(%s) null instance";

        staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>(r0, varReplacer3787, r1);

        $z0 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r6 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3790 = "addChannelListener({})[{}] ignore registration while session is closing";

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3790, r1, r0);

        return;

     label1:
        $r3 = r1.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        $z1 = interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r5 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3788 = "addChannelListener({})[{}] registered";

        interfaceinvoke $r5.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3788, r1, r0);

        goto label3;

     label2:
        $r4 = r1.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3789 = "addChannelListener({})[{}] ignored duplicate";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3789, r1, r0);

     label3:
        return;
    }

    public void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.channel.ChannelListener r1;
        java.util.Collection $r2;
        boolean $z0;
        org.slf4j.Logger $r3, $r4;
        java.lang.String varReplacer3791, varReplacer3792;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 := @parameter0: org.apache.sshd.common.channel.ChannelListener;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.Collection channelListeners>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3792 = "removeChannelListener({})[{}] removed";

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3792, r0, r1);

        goto label2;

     label1:
        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3791 = "removeChannelListener({})[{}] not registered";

        interfaceinvoke $r3.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3791, r0, r1);

     label2:
        return;
    }

    public org.apache.sshd.common.channel.ChannelListener getChannelListenerProxy()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.channel.ChannelListener $r1;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.channel.ChannelListener channelListenerProxy>;

        return $r1;
    }

    protected void sendSessionEvent(org.apache.sshd.common.session.SessionListener$Event) throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.session.SessionListener r1;
        org.apache.sshd.common.session.SessionListener$Event r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r2 := @parameter0: org.apache.sshd.common.session.SessionListener$Event;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.session.SessionListener getSessionListenerProxy()>();

        interfaceinvoke r1.<org.apache.sshd.common.session.SessionListener: void sessionEvent(org.apache.sshd.common.session.Session,org.apache.sshd.common.session.SessionListener$Event)>(r0, r2);

        return;
    }

    public org.apache.sshd.common.future.KeyExchangeFuture reExchangeKeys() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r3;
        java.lang.Object $r2, $r4, $r5;
        org.apache.sshd.common.future.KeyExchangeFuture $r6;
        java.lang.String varReplacer3793;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void requestNewKeysExchange()>();

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        varReplacer3793 = "No current KEX future on state=%s";

        $r5 = staticinvoke <org.apache.sshd.common.util.ValidateUtils: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)>($r2, varReplacer3793, $r4);

        $r6 = (org.apache.sshd.common.future.KeyExchangeFuture) $r5;

        return $r6;
    }

    protected void checkRekey() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isRekeyRequired()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void requestNewKeysExchange()>();

     label1:
        return;
    }

    protected void requestNewKeysExchange() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.kex.KexState $r1, $r2;
        java.util.concurrent.atomic.AtomicReference $r3, $r7, $r15;
        boolean $z0, $z1;
        org.slf4j.Logger $r4, $r14, $r16;
        org.apache.sshd.common.future.DefaultKeyExchangeFuture $r6, r9, r10;
        java.lang.Object $r8, r12, $r17;
        org.apache.sshd.common.SshException $r13;
        java.lang.Throwable $r18, r19;
        java.lang.String varReplacer3794, varReplacer3795, varReplacer3796;
        null_type varReplacer3797;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $r1 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState INIT>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z0 != 0 goto label2;

        $r14 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r14.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r16 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r15 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r17 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        varReplacer3795 = "requestNewKeysExchange({}) KEX state not DONE: {}";

        interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3795, r0, $r17);

     label1:
        return;

     label2:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3794 = "requestNewKeysExchange({}) Initiating key re-exchange";

        interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>(varReplacer3794, r0);

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit()>();

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexFutureHolder>;

        $r6 = new org.apache.sshd.common.future.DefaultKeyExchangeFuture;

        varReplacer3797 = null;

        specialinvoke $r6.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void <init>(java.lang.Object)>(varReplacer3797);

        $r8 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>($r6);

        r9 = (org.apache.sshd.common.future.DefaultKeyExchangeFuture) $r8;

        if r9 == null goto label8;

        r10 = r9;

        entermonitor r9;

     label3:
        r12 = virtualinvoke r9.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: java.lang.Object getValue()>();

        if r12 != null goto label4;

        $r13 = new org.apache.sshd.common.SshException;

        varReplacer3796 = "New KEX started while previous one still ongoing";

        specialinvoke $r13.<org.apache.sshd.common.SshException: void <init>(java.lang.String)>(varReplacer3796);

        virtualinvoke r9.<org.apache.sshd.common.future.DefaultKeyExchangeFuture: void setValue(java.lang.Object)>($r13);

     label4:
        exitmonitor r10;

     label5:
        goto label8;

     label6:
        $r18 := @caughtexception;

        r19 = $r18;

        exitmonitor r10;

     label7:
        throw r19;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected boolean isRekeyRequired()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.kex.KexState r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int varReplacer3798;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference kexState>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (org.apache.sshd.common.kex.KexState) $r2;

        $r4 = <org.apache.sshd.common.kex.KexState: org.apache.sshd.common.kex.KexState DONE>;

        $z0 = virtualinvoke $r4.<org.apache.sshd.common.kex.KexState: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        varReplacer3798 = 0;

        return varReplacer3798;

     label1:
        $z1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isRekeyTimeIntervalExceeded()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isRekeyPacketCountsExceeded()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isRekeyBlocksCountExceeded()>();

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isRekeyDataSizeExceeded()>();

        if $z4 == 0 goto label3;

     label2:
        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        return $z5;
    }

    protected boolean isRekeyTimeIntervalExceeded()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, l2, $l3, l4, $l5, $l7, $l8;
        byte $b1, $b6;
        java.util.concurrent.atomic.AtomicLong $r1, $r5;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.util.Date $r4, $r7;
        java.lang.Long $r8, $r9;
        int varReplacer3799;
        java.lang.String varReplacer3800;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer3799 = 0;

        return varReplacer3799;

     label1:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        l4 = l2 - $l3;

        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval>;

        $b6 = l4 cmp $l5;

        if $b6 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 == 0 goto label4;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label4;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[5];

        $r3[0] = r0;

        $r4 = new java.util.Date;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong lastKeyTimeValue>;

        $l7 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: long get()>();

        specialinvoke $r4.<java.util.Date: void <init>(long)>($l7);

        $r3[1] = $r4;

        $r7 = new java.util.Date;

        specialinvoke $r7.<java.util.Date: void <init>(long)>(l2);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r3[3] = $r8;

        $l8 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyInterval>;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $r3[4] = $r9;

        varReplacer3800 = "isRekeyTimeIntervalExceeded({}) re-keying: last={}, now={}, diff={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3800, $r3);

     label4:
        return z0;
    }

    protected boolean isRekeyPacketCountsExceeded()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l2, $l3, $l5, $l6, $l7;
        byte $b1, $b4, $b8;
        java.util.concurrent.atomic.AtomicLong $r1, $r4, $r5, $r8;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.lang.Long $r7;
        java.lang.String varReplacer3801;
        int varReplacer3802;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer3802 = 0;

        return varReplacer3802;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets>;

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label2;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        $l6 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l7 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets>;

        $b8 = $l6 cmp $l7;

        if $b8 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inPacketsCount>;

        $r3[1] = $r4;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outPacketsCount>;

        $r3[2] = $r5;

        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekyPackets>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r3[3] = $r7;

        varReplacer3801 = "isRekeyPacketCountsExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3801, $r3);

     label5:
        return z0;
    }

    protected boolean isRekeyDataSizeExceeded()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l2, $l3, $l5, $l6, $l7;
        byte $b1, $b4, $b8;
        java.util.concurrent.atomic.AtomicLong $r1, $r4, $r5, $r8;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r2, $r6;
        java.lang.Object[] $r3;
        java.lang.Long $r7;
        java.lang.String varReplacer3803;
        int varReplacer3804;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer3804 = 0;

        return varReplacer3804;

     label1:
        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l3 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes>;

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label2;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $l6 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l7 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes>;

        $b8 = $l6 cmp $l7;

        if $b8 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r0;

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBytesCount>;

        $r3[1] = $r4;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBytesCount>;

        $r3[2] = $r5;

        $l5 = r0.<org.apache.sshd.common.session.AbstractSession: long maxRekeyBytes>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r3[3] = $r7;

        varReplacer3803 = "isRekeyDataSizeExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3803, $r3);

     label5:
        return z0;
    }

    protected boolean isRekeyBlocksCountExceeded()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicLong $r1, $r2, $r5, $r6, $r9;
        long l0, $l2, $l4;
        byte $b1, $b3, $b5;
        boolean z0, $z1, $z2;
        org.slf4j.Logger $r3, $r7;
        java.lang.Object[] $r4;
        java.lang.Long $r8;
        int varReplacer3805;
        java.lang.String varReplacer3806;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong maxRekeyBlocks>;

        l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        varReplacer3805 = 0;

        return varReplacer3805;

     label1:
        $r2 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b3 = $l2 cmp l0;

        if $b3 > 0 goto label2;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        $l4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $b5 = $l4 cmp l0;

        if $b5 <= 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z0 = $z2;

        if z0 == 0 goto label5;

        $r3 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r3.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r7 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = r0;

        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong inBlocksCount>;

        $r4[1] = $r5;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicLong outBlocksCount>;

        $r4[2] = $r6;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4[3] = $r8;

        varReplacer3806 = "isRekeyBlocksCountExceeded({}) re-keying: in={}, out={}, max={}";

        interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>(varReplacer3806, $r4);

     label5:
        return z0;
    }

    protected byte[] sendKexInit() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.lang.String r1, $r7, varReplacer3809, varReplacer3810;
        boolean $z0, $z1;
        java.util.Map r2;
        byte[] r3;
        org.slf4j.Logger $r4, $r6;
        java.lang.Object[] $r5;
        org.apache.sshd.common.SshException $r8;
        int varReplacer3807, varReplacer3808;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String resolveAvailableSignaturesProposal()>();

        $z0 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new org.apache.sshd.common.SshException;

        varReplacer3808 = 9;

        varReplacer3809 = "sendKexInit() no resolved signatures available";

        specialinvoke $r8.<org.apache.sshd.common.SshException: void <init>(int,java.lang.String)>(varReplacer3808, varReplacer3809);

        throw $r8;

     label1:
        r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.util.Map createProposal(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: byte[] sendKexInit(java.util.Map)>(r2);

        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z1 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r0;

        $r5[1] = r2;

        varReplacer3807 = 58;

        $r7 = staticinvoke <org.apache.sshd.common.util.buffer.BufferUtils: java.lang.String printHex(char,byte[])>(varReplacer3807, r3);

        $r5[2] = $r7;

        varReplacer3810 = "sendKexInit({}) proposal={} seed: {}";

        interfaceinvoke $r6.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object[])>(varReplacer3810, $r5);

     label2:
        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void setKexSeed(byte[])>(r3);

        return r3;
    }

    protected abstract transient void setKexSeed(byte[]);

    protected java.lang.String resolveAvailableSignaturesProposal()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.apache.sshd.common.FactoryManager $r1;
        java.lang.String $r2;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.FactoryManager getFactoryManager()>();

        $r2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)>($r1);

        return $r2;
    }

    protected abstract java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager);

    protected abstract void checkKeys() throws java.io.IOException;

    protected void receiveKexInit(org.apache.sshd.common.util.buffer.Buffer) throws java.io.IOException
    {
        java.util.EnumMap $r0, r1;
        org.apache.sshd.common.session.AbstractSession r2;
        org.apache.sshd.common.util.buffer.Buffer r3;
        byte[] r4;

        nop;

        r2 := @this: org.apache.sshd.common.session.AbstractSession;

        r3 := @parameter0: org.apache.sshd.common.util.buffer.Buffer;

        $r0 = new java.util.EnumMap;

        specialinvoke $r0.<java.util.EnumMap: void <init>(java.lang.Class)>(class "Lorg/apache/sshd/common/kex/KexProposalOption;");

        r1 = $r0;

        r4 = virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)>(r3, r1);

        virtualinvoke r2.<org.apache.sshd.common.session.AbstractSession: void receiveKexInit(java.util.Map,byte[])>(r1, r4);

        return;
    }

    protected abstract void receiveKexInit(java.util.Map, byte[]) throws java.io.IOException;

    protected java.util.Map mergeProposals(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1, r2;
        boolean $z0, $z1;
        java.lang.Throwable $r4, r5;
        org.apache.sshd.common.session.AbstractSession r6;

        nop;

        r6 := @this: org.apache.sshd.common.session.AbstractSession;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        if r0 != r1 goto label1;

        return r1;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        interfaceinvoke r0.<java.util.Map: void clear()>();

     label3:
        $z1 = staticinvoke <org.apache.sshd.common.util.GenericUtils: boolean isEmpty(java.util.Map)>(r1);

        if $z1 == 0 goto label5;

        exitmonitor r2;

     label4:
        return r1;

     label5:
        interfaceinvoke r0.<java.util.Map: void putAll(java.util.Map)>(r1);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r4 := @caughtexception;

        r5 = $r4;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return r1;

        catch java.lang.Throwable from label2 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void serviceAccept() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        return;
    }

    protected void checkForTimeouts() throws java.io.IOException
    {
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0, $z1, $z2;
        long l0, $l1, $l2;
        java.lang.Object $r1, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus r2, $r3, $r11;
        org.slf4j.Logger $r4, $r8, $r9;
        java.util.concurrent.atomic.AtomicReference $r5;
        java.lang.String $r7, varReplacer3811, varReplacer3812;
        org.apache.sshd.common.util.Pair r10;
        int varReplacer3813;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $z0 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: boolean isClosing()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3811 = "checkForTimeouts({}) session closing";

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>(varReplacer3811, r0);

        return;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getAuthTimeout()>();

        r10 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Pair checkAuthenticationTimeout(long,long)>(l0, $l1);

        if r10 != null goto label2;

        $l2 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: long getIdleTimeout()>();

        r10 = virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.util.Pair checkIdleTimeout(long,long)>(l0, $l2);

     label2:
        if r10 != null goto label3;

        $r11 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        goto label4;

     label3:
        $r1 = virtualinvoke r10.<org.apache.sshd.common.util.Pair: java.lang.Object getFirst()>();

        $r11 = (org.apache.sshd.common.session.Session$TimeoutStatus) $r1;

     label4:
        r2 = $r11;

        if r2 == null goto label5;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus NoTimeout>;

        $z1 = virtualinvoke $r3.<org.apache.sshd.common.session.Session$TimeoutStatus: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label6;

     label5:
        return;

     label6:
        $r4 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        $z2 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z2 == 0 goto label7;

        $r8 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        varReplacer3812 = "checkForTimeouts({}) disconnect - reason={}";

        interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>(varReplacer3812, r0, r2);

     label7:
        $r5 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r2);

        $r6 = virtualinvoke r10.<org.apache.sshd.common.util.Pair: java.lang.Object getSecond()>();

        $r7 = (java.lang.String) $r6;

        varReplacer3813 = 2;

        virtualinvoke r0.<org.apache.sshd.common.session.AbstractSession: void disconnect(int,java.lang.String)>(varReplacer3813, $r7);

        return;
    }

    protected org.apache.sshd.common.util.Pair checkAuthenticationTimeout(long, long)
    {
        long l0, $l1, l2, l3;
        org.apache.sshd.common.session.AbstractSession r0;
        boolean $z0;
        byte $b4, $b5;
        org.apache.sshd.common.util.Pair $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;
        java.lang.String $r7, varReplacer3815, varReplacer3816;
        null_type varReplacer3814;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        l0 := @parameter0: long;

        l3 := @parameter1: long;

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long authTimeoutStart>;

        l2 = l0 - $l1;

        $z0 = r0.<org.apache.sshd.common.session.AbstractSession: boolean authed>;

        if $z0 != 0 goto label1;

        $b4 = l3 cmp 0L;

        if $b4 <= 0 goto label1;

        $b5 = l2 cmp l3;

        if $b5 <= 0 goto label1;

        $r1 = new org.apache.sshd.common.util.Pair;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus AuthTimeout>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer3816 = "Session has timed out waiting for authentication after ";

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3816);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        varReplacer3815 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3815);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r7);

        return $r1;

     label1:
        varReplacer3814 = null;

        return varReplacer3814;
    }

    protected org.apache.sshd.common.util.Pair checkIdleTimeout(long, long)
    {
        long l0, $l1, l2, l3;
        org.apache.sshd.common.session.AbstractSession r0;
        byte $b4, $b5;
        org.apache.sshd.common.util.Pair $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;
        java.lang.String $r7, varReplacer3817, varReplacer3818;
        null_type varReplacer3819;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        l0 := @parameter0: long;

        l3 := @parameter1: long;

        $l1 = r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutStart>;

        l2 = l0 - $l1;

        $b4 = l3 cmp 0L;

        if $b4 <= 0 goto label1;

        $b5 = l2 cmp l3;

        if $b5 <= 0 goto label1;

        $r1 = new org.apache.sshd.common.util.Pair;

        $r3 = <org.apache.sshd.common.session.Session$TimeoutStatus: org.apache.sshd.common.session.Session$TimeoutStatus IdleTimeout>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        varReplacer3818 = "User session has timed out idling after ";

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3818);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        varReplacer3817 = " ms.";

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3817);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.sshd.common.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r7);

        return $r1;

     label1:
        varReplacer3819 = null;

        return varReplacer3819;
    }

    public void resetIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<org.apache.sshd.common.session.AbstractSession: long idleTimeoutStart> = $l0;

        return;
    }

    public org.apache.sshd.common.session.Session$TimeoutStatus getTimeoutStatus()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        org.apache.sshd.common.session.Session$TimeoutStatus $r3;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: java.util.concurrent.atomic.AtomicReference timeoutStatus>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (org.apache.sshd.common.session.Session$TimeoutStatus) $r2;

        return $r3;
    }

    public long getAuthTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l1;
        java.lang.String varReplacer3820;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = <org.apache.sshd.common.FactoryManager: long DEFAULT_AUTH_TIMEOUT>;

        varReplacer3820 = "auth-timeout";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3820, $l0);

        return $l1;
    }

    public long getIdleTimeout()
    {
        org.apache.sshd.common.session.AbstractSession r0;
        long $l0, $l1;
        java.lang.String varReplacer3821;

        nop;

        r0 := @this: org.apache.sshd.common.session.AbstractSession;

        $l0 = <org.apache.sshd.common.FactoryManager: long DEFAULT_IDLE_TIMEOUT>;

        varReplacer3821 = "idle-timeout";

        $l1 = staticinvoke <org.apache.sshd.common.PropertyResolverUtils: long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)>(r0, varReplacer3821, $l0);

        return $l1;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuilder $r0, $r4, $r5, $r7, $r8, $r11, $r12;
        org.apache.sshd.common.session.AbstractSession r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r13, varReplacer3822, varReplacer3823, varReplacer3824;
        org.apache.sshd.common.io.IoSession $r9;
        java.net.SocketAddress $r10;

        nop;

        r1 := @this: org.apache.sshd.common.session.AbstractSession;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        varReplacer3823 = "[";

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3823);

        $r6 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: java.lang.String getUsername()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        varReplacer3822 = "@";

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3822);

        $r9 = virtualinvoke r1.<org.apache.sshd.common.session.AbstractSession: org.apache.sshd.common.io.IoSession getIoSession()>();

        $r10 = interfaceinvoke $r9.<org.apache.sshd.common.io.IoSession: java.net.SocketAddress getRemoteAddress()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        varReplacer3824 = "]";

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(varReplacer3824);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static org.slf4j.Logger access$000(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$100(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$200(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$300(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$400(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$500(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static org.slf4j.Logger access$600(org.apache.sshd.common.session.AbstractSession)
    {
        org.apache.sshd.common.session.AbstractSession r0;
        org.slf4j.Logger $r1;

        nop;

        r0 := @parameter0: org.apache.sshd.common.session.AbstractSession;

        $r1 = r0.<org.apache.sshd.common.session.AbstractSession: org.slf4j.Logger log>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        nop;

        $r0 = class "Lorg/apache/sshd/common/session/AbstractSession;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.sshd.common.session.AbstractSession: boolean $assertionsDisabled> = $z1;

        return;
    }
}
